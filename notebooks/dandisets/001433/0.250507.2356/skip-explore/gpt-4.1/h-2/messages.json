[
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata about Dandiset 001433 version 0.250507.2356."
      },
      {
        "type": "text",
        "text": "{\n  \"id\": \"DANDI:001433/0.250507.2356\",\n  \"doi\": \"10.48324/dandi.001433/0.250507.2356\",\n  \"url\": \"https://dandiarchive.org/dandiset/001433/0.250507.2356\",\n  \"name\": \"Breathing rhythm and place dataset\",\n  \"about\": [],\n  \"access\": [\n    {\n      \"status\": \"dandi:OpenAccess\",\n      \"schemaKey\": \"AccessRequirements\"\n    }\n  ],\n  \"license\": [\n    \"spdx:CC-BY-4.0\"\n  ],\n  \"version\": \"0.250507.2356\",\n  \"@context\": \"https://raw.githubusercontent.com/dandi/schema/master/releases/0.6.9/context.json\",\n  \"citation\": \"Breathing rhythm and place dataset (2025). (Version 0.250507.2356) [Data set]. DANDI Archive. https://doi.org/10.48324/dandi.001433/0.250507.2356\",\n  \"schemaKey\": \"Dandiset\",\n  \"identifier\": \"DANDI:001433\",\n  \"repository\": \"https://dandiarchive.org\",\n  \"contributor\": [\n    {\n      \"name\": \"National Institutes of Health (NIH)\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"awardNumber\": \"1 R01 NS 123903-03\"\n    },\n    {\n      \"name\": \"Smear, Matt\",\n      \"email\": \"smear@uoregon.edu\",\n      \"roleName\": [\n        \"dcite:ContactPerson\",\n        \"dcite:Author\",\n        \"dcite:Conceptualization\",\n        \"dcite:DataCurator\",\n        \"dcite:DataManager\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0003-4689-388X\"\n    }\n  ],\n  \"dateCreated\": \"2025-05-05T18:39:37.730571+00:00\",\n  \"description\": \"These are behavioral and electrophysiological data from recordings of sniffing, video, and OB electrophysiology in freely-behaving mice given no stimulus, reward, or task. 1 1 R01 NS 123903\",\n  \"publishedBy\": {\n    \"id\": \"urn:uuid:b6ac97aa-3293-4dbe-a7b5-71ab54c1232e\",\n    \"name\": \"DANDI publish\",\n    \"endDate\": \"2025-05-07T23:56:47.954574+00:00\",\n    \"schemaKey\": \"PublishActivity\",\n    \"startDate\": \"2025-05-07T23:56:47.954574+00:00\",\n    \"wasAssociatedWith\": [\n      {\n        \"id\": \"urn:uuid:e47c3249-bd09-40ab-aa88-74f6e2c6f668\",\n        \"name\": \"DANDI API\",\n        \"version\": \"0.1.0\",\n        \"schemaKey\": \"Software\",\n        \"identifier\": \"RRID:SCR_017571\"\n      }\n    ]\n  },\n  \"assetsSummary\": {\n    \"species\": [\n      {\n        \"name\": \"Mus musculus - House mouse\",\n        \"schemaKey\": \"SpeciesType\",\n        \"identifier\": \"http://purl.obolibrary.org/obo/NCBITaxon_10090\"\n      }\n    ],\n    \"approach\": [\n      {\n        \"name\": \"electrophysiological approach\",\n        \"schemaKey\": \"ApproachType\"\n      }\n    ],\n    \"schemaKey\": \"AssetsSummary\",\n    \"dataStandard\": [\n      {\n        \"name\": \"Neurodata Without Borders (NWB)\",\n        \"schemaKey\": \"StandardsType\",\n        \"identifier\": \"RRID:SCR_015242\"\n      }\n    ],\n    \"numberOfBytes\": 41430354280,\n    \"numberOfFiles\": 27,\n    \"numberOfSubjects\": 4,\n    \"variableMeasured\": [\n      \"ProcessingModule\",\n      \"ElectricalSeries\",\n      \"ElectrodeGroup\"\n    ],\n    \"measurementTechnique\": [\n      {\n        \"name\": \"surgical technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"multi electrode extracellular electrophysiology recording technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"analytical technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      }\n    ]\n  },\n  \"datePublished\": \"2025-05-07T23:56:47.954574+00:00\",\n  \"schemaVersion\": \"0.6.9\",\n  \"ethicsApproval\": [],\n  \"wasGeneratedBy\": [],\n  \"relatedResource\": [],\n  \"manifestLocation\": [\n    \"https://dandiarchive.s3.amazonaws.com/dandisets/001433/0.250507.2356/assets.yaml\"\n  ]\n}"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is a listing of some of the files in the Dandiset."
      },
      {
        "type": "text",
        "text": "sub-4122/sub-4122_ses-20250507T152927_ecephys.nwb\nsub-4122/sub-4122_ses-20250507T152930_ecephys.nwb\nsub-4122/sub-4122_ses-20250507T152933_ecephys.nwb\nsub-4127/sub-4127_ses-20250507T152941_ecephys.nwb\nsub-4127/sub-4127_ses-20250507T152953_ecephys.nwb\nsub-4127/sub-4127_ses-20250507T153010_ecephys.nwb\nsub-4127/sub-4127_ses-20250507T153020_ecephys.nwb\nsub-4127/sub-4127_ses-20250507T153032_ecephys.nwb\nsub-4127/sub-4127_ses-20250507T153048_ecephys.nwb\nsub-4127/sub-4127_ses-20250507T153100_ecephys.nwb"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata and usage information about the file sub-4122/sub-4122_ses-20250507T152927_ecephys.nwb."
      },
      {
        "type": "text",
        "text": "\nimport pynwb\nimport h5py\nimport remfile\n\n# Load\nfrom dandi.dandiapi import DandiAPIClient\n\nclient = DandiAPIClient()\ndandiset = client.get_dandiset(\"001433\", \"0.250507.2356\")\nurl = next(dandiset.get_assets_by_glob(\"sub-4122/sub-4122_ses-20250507T152927_ecephys.nwb\")).download_url\n\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file)\nnwb = io.read()\n\nnwb # (NWBFile)\nnwb.session_description # (str) LFP and sniff recording\nnwb.identifier # (str) 4122_4\nnwb.session_start_time # (datetime) 2025-05-07T15:29:27.359523-07:00\nnwb.timestamps_reference_time # (datetime) 2025-05-07T15:29:27.359523-07:00\nnwb.file_create_date # (list) [datetime.datetime(2025, 5, 7, 15, 29, 27, 359523, tzinfo=tzoffset(None, -25200))]\nnwb.experimenter # (tuple) ['Rafilson, Sidney']\nnwb.acquisition # (LabelledDict)\nacquisition = nwb.acquisition\nLFP = acquisition[\"LFP\"]\nLFP # (ElectricalSeries)\nLFP.starting_time # (float64) 0.0\nLFP.rate # (float64) 1000.0\nLFP.resolution # (float64) -1.0\nLFP.comments # (str) no comments\nLFP.description # (str) LFP signal from olfactory bulb\nLFP.conversion # (float64) 1.0\nLFP.offset # (float64) 0.0\nLFP.unit # (str) volts\nLFP.data # (Dataset) shape (1969184, 16); dtype float64\n# LFP.data[:, :] # Access all data\n# LFP.data[0:n, :] # Access first n rows\n# LFP.data[:, 0:n] # Access first n columns\nLFP.starting_time_unit # (str) seconds\nLFP.electrodes # (DynamicTableRegion)\nLFP.electrodes.description # (str) All LFP electrodes\nLFP.electrodes.table # (DynamicTable)\nLFP.electrodes.table.description # (str) metadata about extracellular electrodes\nLFP.electrodes.table.colnames # (tuple) ['location', 'group', 'group_name', 'filtering']\nLFP.electrodes.table.columns # (tuple)\nLFP.electrodes.table.id # (ElementIdentifiers)\n# LFP.electrodes.table.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 16 rows and 4 columns\n# LFP.electrodes.table.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nLFP.electrodes.table.location # (VectorData) the location of channel within the subject e.g. brain region\nLFP.electrodes.table.group # (VectorData) a reference to the ElectrodeGroup this electrode is a part of\nLFP.electrodes.table.group_name # (VectorData) the name of the ElectrodeGroup this electrode is a part of\nLFP.electrodes.table.filtering # (VectorData) description of hardware filtering, including the filter name and frequency cutoffs\nSniffSignal = acquisition[\"SniffSignal\"]\nSniffSignal # (TimeSeries)\nSniffSignal.starting_time # (float64) 0.0\nSniffSignal.rate # (float64) 1000.0\nSniffSignal.resolution # (float64) -1.0\nSniffSignal.comments # (str) no comments\nSniffSignal.description # (str) Raw sniff thermistor voltage\nSniffSignal.conversion # (float64) 1.0\nSniffSignal.offset # (float64) 0.0\nSniffSignal.unit # (str) volts\nSniffSignal.data # (Dataset) shape (1969184,); dtype float64\n# SniffSignal.data[:] # Access all data\n# SniffSignal.data[0:n] # Access first n elements\nSniffSignal.starting_time_unit # (str) seconds\nnwb.keywords # (StrDataset) shape (5,); dtype object\n# nwb.keywords[:] # Access all data\n# nwb.keywords[0:n] # Access first n elements\n# First few values of nwb.keywords: ['olfactory bulb' 'LFP' 'sniffing' 'mouse' 'neuroscience']\nnwb.processing # (LabelledDict)\nprocessing = nwb.processing\nbehavior = processing[\"behavior\"]\nbehavior # (ProcessingModule)\nbehavior.description # (str) Sniff event features\nbehavior.data_interfaces # (LabelledDict)\ndata_interfaces = behavior.data_interfaces\nexhalation_time = data_interfaces[\"exhalation_time\"]\nexhalation_time # (TimeSeries)\nexhalation_time.resolution # (float64) -1.0\nexhalation_time.comments # (str) no comments\nexhalation_time.description # (str) exhalation_time (s)\nexhalation_time.conversion # (float64) 1.0\nexhalation_time.offset # (float64) 0.0\nexhalation_time.unit # (str) NA\nexhalation_time.data # (Dataset) shape (10030,); dtype int64\n# exhalation_time.data[:] # Access all data\n# exhalation_time.data[0:n] # Access first n elements\nexhalation_time.timestamps # (Dataset) shape (10030,); dtype float64\n# exhalation_time.timestamps[:] # Access all data\n# exhalation_time.timestamps[0:n] # Access first n elements\nexhalation_time.timestamps_unit # (str) seconds\nexhalation_time.interval # (int) 1\ninhalation_time = data_interfaces[\"inhalation_time\"]\ninhalation_time # (TimeSeries)\ninhalation_time.resolution # (float64) -1.0\ninhalation_time.comments # (str) no comments\ninhalation_time.description # (str) inhalation_time (s)\ninhalation_time.conversion # (float64) 1.0\ninhalation_time.offset # (float64) 0.0\ninhalation_time.unit # (str) NA\ninhalation_time.data # (Dataset) shape (10030,); dtype int64\n# inhalation_time.data[:] # Access all data\n# inhalation_time.data[0:n] # Access first n elements\ninhalation_time.timestamps # (Dataset) shape (10030,); dtype float64\n# inhalation_time.timestamps[:] # Access all data\n# inhalation_time.timestamps[0:n] # Access first n elements\ninhalation_time.timestamps_unit # (str) seconds\ninhalation_time.interval # (int) 1\nnwb.electrode_groups # (LabelledDict)\nelectrode_groups = nwb.electrode_groups\nLFPGroup = electrode_groups[\"LFPGroup\"]\nLFPGroup # (ElectrodeGroup)\nLFPGroup.description # (str) LFP recording electrodes\nLFPGroup.location # (str) Olfactory Bulb\nLFPGroup.device # (Device)\nLFPGroup.device.description # (str) OpenEphys recording system\nnwb.devices # (LabelledDict)\ndevices = nwb.devices\nOpenEphys = devices[\"OpenEphys\"]\nOpenEphys # (Device)\nOpenEphys.description # (str) OpenEphys recording system\nnwb.experiment_description # (str) LFP and sniff behavior recording\nnwb.lab # (str) Smear lab\nnwb.institution # (str) University of Oregon\nnwb.electrodes # (DynamicTable)\nnwb.electrodes.description # (str) metadata about extracellular electrodes\nnwb.electrodes.colnames # (tuple) ['location', 'group', 'group_name', 'filtering']\nnwb.electrodes.columns # (tuple)\nnwb.electrodes.id # (ElementIdentifiers)\n# nwb.electrodes.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 16 rows and 4 columns\n# nwb.electrodes.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nnwb.electrodes.location # (VectorData) the location of channel within the subject e.g. brain region\nnwb.electrodes.group # (VectorData) a reference to the ElectrodeGroup this electrode is a part of\nnwb.electrodes.group_name # (VectorData) the name of the ElectrodeGroup this electrode is a part of\nnwb.electrodes.filtering # (VectorData) description of hardware filtering, including the filter name and frequency cutoffs\nnwb.subject # (Subject)\nnwb.subject.age # (str) P90D\nnwb.subject.age__reference # (str) birth\nnwb.subject.description # (str) Lab mouse used for sniffing + LFP experiment\nnwb.subject.sex # (str) M\nnwb.subject.species # (str) Mus musculus\nnwb.subject.subject_id # (str) 4122"
      }
    ]
  },
  {
    "role": "user",
    "content": "On the basis of the above information, please create a jupytext notebook that introduces dandiset 001433 using the format described below.\n\nThe purpose of the notebook is to help researchers explore the dandiset and get started with a reanalysis.\n\nStart with an appropriate title for the notebook, such as \"Exploring Dandiset 001433: ...\" (that should be a markdown heading).\n\nInform the user that the notebook was generated with the assistance of AI, and that they should be cautious when interpreting the code or results.\n\nProvide an overview of the Dandiset. Include a link to the Dandiset of the form https://dandiarchive.org/dandiset/001433/0.250507.2356.\n\nSummarize what the notebook covers.\n\nList the packages that are required to run the notebook. Assume that these are already installed on the user's system. Do not include any pip install commands in the notebook.\n\nShow how to use the DANDI API to load assets.\n\nShow how to load and visualize data from the dandiset based on the above information. Feel free to organize things differently from how they are in the above information, but do not make up new information.\n\nGenerate good quality plots (without being redundant).\n\nLoad NWB data by streaming the remote file (as done in the above information) rather than downloading it.\n\nDo not use any functionality of pynwb or dandi that is not covered in the above information.\n\nYou should stick to material that is covered in the above information and do not hallucinate.\n\nThroughout the notebook, include explanatory markdown cells that guide the user through the process.\n\nThe notebook should be well-documented, and follow best practices Include comments in code cells to explain what each step does.\n\nThe Jupytext should use `# %% [markdown]` for markdown cells and `# %%` delimiters for the code cells.\n\nIf any NWB have units objects, you should know the following:\nunits.spike_times_index[i] provides the vector of spike times for the i^th unit. It is actually not an index. Do not use units.spike_times.\n\nYour notebook will be evaluated based on the following criteria:\n1. How well did the notebook help you understand the purpose and content of the Dandiset?\n2. After reviewing the notebook, do you feel confident in how to access the different types of data from this Dandiset?\n3. Did the notebook help you understand the structure of the NWB file(s) and how to work with them?\n4. Did the visualizations in the notebook generally help you understand key aspects of the data?\n5. Did any of the visualizations make it harder to understand the data (e.g., due to poor formatting, unclear axes, or misleading displays)?\n6. Do you feel more confident creating your own visualizations of the data after seeing the examples in the notebook?\n7. How well did the visualizations show the structure or complexity of the data?\n8. Were there any interpretations or conclusions in the notebook that felt unclear or not well supported by the data shown?\n9. Did any of the plots or examples feel unnecessarily repetitive or redundant?\n10. Did the notebook help you understand what kinds of questions or analyses you could do next with this Dandiset?\n11. How clear and easy was the notebook to follow?\n12. Did the notebook provide code you could easily reuse or adapt to explore the Dandiset yourself?\n13. Did the notebook help you understand what kinds of questions or analyses you could do next with this Dandiset?\n14. Overall, how helpful was this notebook for getting started with this Dandiset?\n\nYour output should be in the format:\n\n<notebook>\nThe text of the jupytext notebook should appear here.\n</notebook>\n\nNo other text should be included in the response.\n"
  },
  {
    "role": "assistant",
    "content": "<notebook>\n# %% [markdown]\n# # Exploring Dandiset 001433: Breathing Rhythm and Place Dataset\n#\n# *This notebook was generated with the assistance of AI. Please exercise caution when interpreting the code or derived results, and verify outputs for your own analyses.*\n#\n# ## Overview\n# \n# This notebook introduces the Dandiset [001433: Breathing rhythm and place dataset](https://dandiarchive.org/dandiset/001433/0.250507.2356), which contains behavioral and electrophysiological data from recordings of sniffing, video, and olfactory bulb (OB) electrophysiology in freely-behaving mice. Mice in this dataset were not subjected to stimulus, reward, or explicit task.\n# \n# The package includes:\n# - Extracellular electrophysiology (multi-electrode LFP recordings) from the olfactory bulb\n# - Raw sniff thermistor voltage recordings\n# - Annotated inhalation and exhalation event times\n# - Metadata and electrode information\n#\n# All data are stored in Neurodata Without Borders (NWB) format and can be accessed using the DANDI API, streamed directly without a full download.\n#\n# ## What does this notebook cover?\n# - How to access and browse the Dandiset using the DANDI API\n# - How to stream and load NWB files from the archive\n# - Overview of key data structures within the NWB files\n# - Simple visualizations of LFP and sniffing data\n# - Guidance on accessing behavioral event times and electrode metadata\n# \n# ## Required Packages\n# To execute the notebook, please ensure the following packages are available (assumed to be already installed):\n# - `pynwb`\n# - `h5py`\n# - `remfile`\n# - `dandi`\n# - `matplotlib`\n# - `numpy`\n# - `pandas`\n#\n# ---\n#\n# Let's get started!\n\n# %%\n# Import necessary packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom dandi.dandiapi import DandiAPIClient\nimport remfile\nimport h5py\nimport pynwb\n\n# %% [markdown]\n# ## Accessing Dandiset 001433 via the DANDI API\n#\n# We'll begin by querying the Dandiset and displaying available NWB assets.\n\n# %%\n# Connect to DANDI and get the dandiset object (version 0.250507.2356)\ndandiset_id = \"001433\"\ndandiset_version = \"0.250507.2356\"\n\nclient = DandiAPIClient()\ndandiset = client.get_dandiset(dandiset_id, dandiset_version)\n\n# List up to 5 assets in the Dandiset for demonstration\nprint(\"Listing sample assets in Dandiset 001433:\")\nfor asset in dandiset.get_assets():\n    print(asset.path)\n    # Limit printout for demonstration\n    if \"sub-4127\" in asset.path:\n        break\n\n# %% [markdown]\n# ## Loading and Streaming an Example NWB File\n#\n# Instead of downloading files, we will stream data directly from a remote NWB file. Here we select one session from subject `sub-4122`.\n\n# %%\n# Choose a specific NWB asset to work with\nnwb_path = \"sub-4122/sub-4122_ses-20250507T152927_ecephys.nwb\"\n\n# Fetch the remote download URL\nasset = next(dandiset.get_assets_by_glob(nwb_path))\nurl = asset.download_url\n\n# Open a remote file handle for streaming access\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\n# Open with pynwb for further inspection\nio = pynwb.NWBHDF5IO(file=h5_file, load_namespaces=True)\nnwb = io.read()\n\nprint(f\"Session description: {nwb.session_description}\")\nprint(f\"Session start time: {nwb.session_start_time}\")\nprint(f\"Experimenter: {nwb.experimenter}\")\n\n# %% [markdown]\n# ## What's Inside the NWB File?\n#\n# Let's quickly summarize the types of data and metadata in the file:\n# - Electrophysiological LFP recordings from 16 electrodes (`acquisition['LFP']`)\n# - Sniffing (thermistor voltage) time series (`acquisition['SniffSignal']`)\n# - Annotated inhalation/exhalation times (`processing['behavior']`)\n# - Electrode location and group metadata\n# - Subject and experiment information\n#\n# We'll next explore the contents interactively.\n\n# %%\n# List available acquisitions and processing modules\nprint(\"Acquisition keys:\", list(nwb.acquisition.keys()))\nprint(\"Processing modules:\", list(nwb.processing.keys()))\n\n# %% [markdown]\n# ## Electrode Metadata Overview\n#\n# Electrode location, filtering, and group information are stored in the `electrodes` table.\n# Let's display this information as a DataFrame.\n\n# %%\n# Convert electrodes table to a pandas DataFrame\nelectrodes_df = nwb.electrodes.to_dataframe()\nelectrodes_df.head()\n\n# %% [markdown]\n# ## Visualizing LFP Data\n#\n# The LFP recordings are sampled at 1000 Hz from 16 electrodes. Each column in the LFP data array represents an electrode.\n#\n# Let's plot a brief segment of the LFP signals from a subset of electrodes.\n\n# %%\n# Access LFP ElectricalSeries object and its data\nLFP = nwb.acquisition['LFP']\nlfp_rate = LFP.rate                  # Hz\nlfp_data = LFP.data                  # shape (time, channels)\nn_channels = lfp_data.shape[1]\n\n# Select a short segment (first 5 seconds)\nsegment_sec = 5\nsegment_len = int(segment_sec * lfp_rate)\nlfp_segment = lfp_data[:segment_len, :4]  # First 4 channels for clarity\n\ntime = np.arange(segment_len) / lfp_rate\n\nplt.figure(figsize=(10, 6))\nfor i in range(lfp_segment.shape[1]):\n    plt.plot(time, lfp_segment[:, i]*1e3 + i*2, label=f'Ch {i}')  # Offset for clarity, scale to mV\nplt.xlabel('Time (s)')\nplt.ylabel('LFP (mV, offset)')\nplt.title('LFP signals from first 4 channels (first 5 s)')\nplt.legend(loc='upper right')\nplt.tight_layout()\nplt.show()\n\n# %% [markdown]\n# ## Visualizing Sniff Signal\n#\n# The sniff signal records the raw thermistor voltage representing breathing dynamics.\n# Let's plot the same 5-second segment.\n\n# %%\n# Access sniff signal data\nSniffSignal = nwb.acquisition['SniffSignal']\nsniff_data = SniffSignal.data[:segment_len]\nsniff_time = np.arange(segment_len) / SniffSignal.rate\n\nplt.figure(figsize=(10, 3))\nplt.plot(sniff_time, sniff_data, color='slateblue')\nplt.xlabel('Time (s)')\nplt.ylabel('Thermistor (V)')\nplt.title('Sniff (breathing) signal (first 5 s)')\nplt.tight_layout()\nplt.show()\n\n# %% [markdown]\n# ## Annotated Inhalation and Exhalation Events\n#\n# The file provides timestamps for inhalation and exhalation events (as detected from the sniff signal). Let's visualize inhalation and exhalation times superimposed on the sniff trace.\n\n# %%\n# Access inhalation and exhalation event times\nbehavior = nwb.processing['behavior']\ninhale = behavior.data_interfaces['inhalation_time']\nexhale = behavior.data_interfaces['exhalation_time']\n\n# Get event times within our plotted segment\ninhale_ts = inhale.timestamps[:]\nexhale_ts = exhale.timestamps[:]\n# Filter to first 5 s\ninhale_ts_plot = inhale_ts[(inhale_ts >= 0) & (inhale_ts < segment_sec)]\nexhale_ts_plot = exhale_ts[(exhale_ts >= 0) & (exhale_ts < segment_sec)]\n\nplt.figure(figsize=(10, 3))\nplt.plot(sniff_time, sniff_data, color='gray', label='Sniff signal')\nplt.vlines(inhale_ts_plot, ymin=min(sniff_data), ymax=max(sniff_data), color='blue', alpha=0.7, linewidth=1, label='Inhalation')\nplt.vlines(exhale_ts_plot, ymin=min(sniff_data), ymax=max(sniff_data), color='red', alpha=0.7, linewidth=1, label='Exhalation')\nplt.xlabel('Time (s)')\nplt.ylabel('Thermistor (V)')\nplt.title('Sniff signal with inhalation/exhalation events (first 5 s)')\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n# %% [markdown]\n# ## Accessing Subject and Experimental Metadata\n#\n# Each NWB file contains descriptive metadata. Let's show subject and experiment details.\n\n# %%\nsubject = nwb.subject\nprint(f\"Subject ID: {subject.subject_id}\")\nprint(f\"Species: {subject.species}\")\nprint(f\"Sex: {subject.sex}\")\nprint(f\"Age: {subject.age} (reference: {subject.age__reference})\")\nprint(f\"Subject Description: {subject.description}\")\n\nprint(f\"\\nExperiment description: {nwb.experiment_description}\")\nprint(f\"Lab: {nwb.lab}\")\nprint(f\"Institution: {nwb.institution}\")\n\n# %% [markdown]\n# ## Summary and Next Steps\n#\n# - This Dandiset is a rich resource for olfactory bulb electrophysiology and breathing rhythm in unrestrained mice.\n# - You can stream large NWB files directly with remfile/h5py/pynwb, and access both raw and processed signals.\n# - Use metadata tables to relate signal channels to brain regions, groups, and filtering patterns.\n# - Many other sessions and subjects are available in this Dandiset; adapt these examples to explore further.\n#\n# **Potential reanalysis directions:**\n# - Relate OB LFP oscillations to the phase of the sniff cycle\n# - Compute event-triggered averages of LFP signals\n# - Compare breathing dynamics across different sessions or animals\n#\n# ---\n#\n# *Refer to the [Dandi Archive page](https://dandiarchive.org/dandiset/001433/0.250507.2356) or consult the NWB standard documentation for more advanced data access and manipulation methods.*\n</notebook>\n"
  }
]