[
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata about Dandiset 001174 version 0.250331.2218."
      },
      {
        "type": "text",
        "text": "{\n  \"id\": \"DANDI:001174/0.250331.2218\",\n  \"doi\": \"10.48324/dandi.001174/0.250331.2218\",\n  \"url\": \"https://dandiarchive.org/dandiset/001174/0.250331.2218\",\n  \"name\": \"Calcium imaging in SMA and M1 of macaques\",\n  \"about\": [\n    {\n      \"name\": \"Publication associated with this dataset\",\n      \"schemaKey\": \"GenericType\"\n    }\n  ],\n  \"access\": [\n    {\n      \"status\": \"dandi:OpenAccess\",\n      \"schemaKey\": \"AccessRequirements\"\n    }\n  ],\n  \"license\": [\n    \"spdx:CC-BY-4.0\"\n  ],\n  \"version\": \"0.250331.2218\",\n  \"@context\": \"https://raw.githubusercontent.com/dandi/schema/master/releases/0.6.8/context.json\",\n  \"citation\": \"Galvan, Adriana; Martel, Anne-Caroline; Pittard, Damien; Devergnas, Annaelle; Risk, Benjamin; Nassi, Jonathan J.; Yu, Waylin; Downer, Joshua D. ; Wichmann, Thomas (2025) Calcium imaging in SMA and M1 of macaques (Version 0.250331.2218) [Data set]. DANDI Archive. https://doi.org/10.48324/dandi.001174/0.250331.2218\",\n  \"keywords\": [\n    \"One-photon calcium imaging, non-human primates, microendoscope, reaching task, neuronal coactivation, calcium sensors, GCaMP, GRIN lens\"\n  ],\n  \"protocol\": [],\n  \"schemaKey\": \"Dandiset\",\n  \"identifier\": \"DANDI:001174\",\n  \"repository\": \"https://dandiarchive.org\",\n  \"contributor\": [\n    {\n      \"name\": \"Galvan, Adriana\",\n      \"email\": \"agalvan@emory.edu\",\n      \"roleName\": [\n        \"dcite:ContactPerson\",\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0001-9939-0130\",\n      \"affiliation\": [],\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Martel, Anne-Caroline\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0001-6590-0323\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Pittard, Damien\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-1169-8964\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Devergnas, Annaelle\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-0461-6422\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Risk, Benjamin\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0003-1090-0777\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Nassi, Jonathan J.\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-3144-3846\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Yu, Waylin\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0001-5489-3260\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Downer, Joshua D. \",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0003-3817-6733\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Wichmann, Thomas\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-2751-9545\",\n      \"includeInCitation\": true\n    },\n    {\n      \"url\": \"https://parkinsonsroadmap.org\",\n      \"name\": \"Aligning Science Across Parkinson's\",\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/03zj4c476\",\n      \"awardNumber\": \"ASAP-020572\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"NIH ORIP\",\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/01jdyfj45\",\n      \"awardNumber\": \"P51-OD011132 \",\n      \"includeInCitation\": false\n    }\n  ],\n  \"dateCreated\": \"2024-08-14T21:48:01.209431+00:00\",\n  \"description\": \"The study of motor cortices in non-human primates is relevant to our understanding of human motor control, both in healthy conditions and in movement disorders. Calcium imaging and miniature microscopes allow the study of multiple genetically identified neurons with excellent spatial resolution. We used this method to examine activity patterns of projection neurons in deep layers of the supplementary motor (SMA) and primary motor areas (M1) in four rhesus macaques. We implanted gradient index lenses and expressed GCaMP6f to image calcium transients while the animals were at rest or engaged in an arm reaching task. We tracked the activity of SMA and M1 neurons across conditions, examined cell pairs for synchronous activity, and assessed whether SMA and M1 neuronal activation followed specific sequential activation patterns. We demonstrate the value of in vivo calcium imaging for studying patterns of activity in groups of corticofugal neurons in SMA and M1.\",\n  \"publishedBy\": {\n    \"id\": \"urn:uuid:4a1af918-c265-4e4d-b3b9-54062413803e\",\n    \"name\": \"DANDI publish\",\n    \"endDate\": \"2025-03-31T22:18:19.390100+00:00\",\n    \"schemaKey\": \"PublishActivity\",\n    \"startDate\": \"2025-03-31T22:18:19.390100+00:00\",\n    \"wasAssociatedWith\": [\n      {\n        \"id\": \"urn:uuid:8ca8388b-e44f-45d4-8040-2f19511e9bff\",\n        \"name\": \"DANDI API\",\n        \"version\": \"0.1.0\",\n        \"schemaKey\": \"Software\",\n        \"identifier\": \"RRID:SCR_017571\"\n      }\n    ]\n  },\n  \"studyTarget\": [\n    \"To track the calcium activity of SMA and M1 neurons at rest and during arm reaches.\"\n  ],\n  \"assetsSummary\": {\n    \"species\": [\n      {\n        \"name\": \"Macaca mulatta - Rhesus monkey\",\n        \"schemaKey\": \"SpeciesType\",\n        \"identifier\": \"http://purl.obolibrary.org/obo/NCBITaxon_9544\"\n      }\n    ],\n    \"approach\": [\n      {\n        \"name\": \"microscopy approach; cell population imaging\",\n        \"schemaKey\": \"ApproachType\"\n      }\n    ],\n    \"schemaKey\": \"AssetsSummary\",\n    \"dataStandard\": [\n      {\n        \"name\": \"Neurodata Without Borders (NWB)\",\n        \"schemaKey\": \"StandardsType\",\n        \"identifier\": \"RRID:SCR_015242\"\n      }\n    ],\n    \"numberOfBytes\": 687623485560,\n    \"numberOfFiles\": 45,\n    \"numberOfSubjects\": 4,\n    \"variableMeasured\": [\n      \"ProcessingModule\",\n      \"PlaneSegmentation\",\n      \"OpticalChannel\",\n      \"ImagingPlane\",\n      \"OnePhotonSeries\"\n    ],\n    \"measurementTechnique\": [\n      {\n        \"name\": \"analytical technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"surgical technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"one-photon microscopy technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      }\n    ]\n  },\n  \"datePublished\": \"2025-03-31T22:18:19.390100+00:00\",\n  \"schemaVersion\": \"0.6.8\",\n  \"ethicsApproval\": [\n    {\n      \"schemaKey\": \"EthicsApproval\",\n      \"identifier\": \"Emory IACUC protocol PROTO202100149\",\n      \"contactPoint\": {\n        \"schemaKey\": \"ContactPoint\"\n      }\n    }\n  ],\n  \"wasGeneratedBy\": [],\n  \"relatedResource\": [\n    {\n      \"url\": \"https://zenodo.org/uploads/14727695\",\n      \"name\": \"Descriptors of calcium cell activities\",\n      \"relation\": \"dcite:Describes\",\n      \"schemaKey\": \"Resource\",\n      \"identifier\": \"10.5281/zenodo.14727695\",\n      \"repository\": \"Zenodo\",\n      \"resourceType\": \"dcite:Dataset\"\n    },\n    {\n      \"url\": \"https://www.biorxiv.org/content/10.1101/2024.06.20.599918v3\",\n      \"name\": \"MICROENDOSCOPIC CALCIUM IMAGING IN SUPPLEMENTARY MOTOR AREA AND PRIMARY MOTOR CORTEX OF RHESUS MACAQUES AT REST AND DURING ARM MOVEMENT\",\n      \"relation\": \"dcite:Describes\",\n      \"schemaKey\": \"Resource\",\n      \"identifier\": \"doi.org/10.1101/2024.06.20.599918\",\n      \"repository\": \"BioRxiv\",\n      \"resourceType\": \"dcite:Preprint\"\n    }\n  ],\n  \"manifestLocation\": [\n    \"https://dandiarchive.s3.amazonaws.com/dandisets/001174/0.250331.2218/assets.yaml\"\n  ]\n}"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is a listing of some of the files in the Dandiset."
      },
      {
        "type": "text",
        "text": "sub-V/sub-V_ses-20230309T110929_ophys.nwb\nsub-Q/sub-Q_ophys.nwb\nsub-Q/sub-Q_ses-20220922T131747_ophys.nwb\nsub-Q/sub-Q_ses-20221003T131952_ophys.nwb\nsub-Q/sub-Q_ses-20221028T121142_ophys.nwb\nsub-Q/sub-Q_ses-20221201T132256_ophys.nwb\nsub-Q/sub-Q_ses-20221202T122907_ophys.nwb\nsub-Q/sub-Q_ses-20221206T121002_ophys.nwb\nsub-Q/sub-Q_ses-20220915T133954_ophys.nwb\nsub-Q/sub-Q_ses-20221201T134628_ophys.nwb"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata and usage information about the file sub-V/sub-V_ses-20230309T110929_ophys.nwb."
      },
      {
        "type": "text",
        "text": "\nimport pynwb\nimport h5py\nimport remfile\n\n# Load\nfrom dandi.dandiapi import DandiAPIClient\n\nclient = DandiAPIClient()\ndandiset = client.get_dandiset(\"001174\", \"0.250331.2218\")\nurl = next(dandiset.get_assets_by_glob(\"sub-V/sub-V_ses-20230309T110929_ophys.nwb\")).download_url\n\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file)\nnwb = io.read()\n\nnwb # (NWBFile)\nnwb.session_description # (str) Calcium imaging in M1 during the arm reaching condition\nnwb.identifier # (str) ef45b76c-6097-4571-bfef-7f9cc2e9c3bb\nnwb.session_start_time # (datetime) 2023-03-09T11:09:29.585000+00:00\nnwb.timestamps_reference_time # (datetime) 2023-03-09T11:09:29.585000+00:00\nnwb.file_create_date # (list) [datetime.datetime(2024, 11, 21, 21, 30, 50, 335652, tzinfo=tzutc())]\nnwb.acquisition # (LabelledDict)\nacquisition = nwb.acquisition\nOnePhotonSeries = acquisition[\"OnePhotonSeries\"]\nOnePhotonSeries # (OnePhotonSeries)\nOnePhotonSeries.starting_time # (float64) 0.0\nOnePhotonSeries.rate # (float64) 10.0\nOnePhotonSeries.resolution # (float64) -1.0\nOnePhotonSeries.comments # (str) no comments\nOnePhotonSeries.description # (str) Miniscope imaging data\nOnePhotonSeries.conversion # (float64) 1.0\nOnePhotonSeries.offset # (float64) 0.0\nOnePhotonSeries.unit # (str) fluorescence\nOnePhotonSeries.data # (Dataset) shape (5185, 1280, 800); dtype uint16\n# OnePhotonSeries.data[:, :, :] # Access all data\n# OnePhotonSeries.data[0, :, :] # Access first plane\nOnePhotonSeries.starting_time_unit # (str) seconds\nOnePhotonSeries.imaging_plane # (ImagingPlane)\nOnePhotonSeries.imaging_plane.optical_channel # (list)\nOnePhotonSeries.imaging_plane.description # (str) The plane being imaged by the miniscope\nOnePhotonSeries.imaging_plane.excitation_lambda # (float64) 475.0\nOnePhotonSeries.imaging_plane.imaging_rate # (float64) 10.0\nOnePhotonSeries.imaging_plane.indicator # (str) N/A\nOnePhotonSeries.imaging_plane.location # (str) N/A\nOnePhotonSeries.imaging_plane.conversion # (float) 1.0\nOnePhotonSeries.imaging_plane.unit # (str) meters\nOnePhotonSeries.imaging_plane.origin_coords_unit # (str) meters\nOnePhotonSeries.imaging_plane.grid_spacing_unit # (str) meters\nOnePhotonSeries.imaging_plane.device # (Device)\nOnePhotonSeries.imaging_plane.device.description # (str) NVista3\nOnePhotonSeries.imaging_plane.device.manufacturer # (str) Inscopix, Inc.\nnwb.processing # (LabelledDict)\nprocessing = nwb.processing\nophys = processing[\"ophys\"]\nophys # (ProcessingModule)\nophys.description # (str) Optical physiology data obtained by processing raw calcium imaging data\nophys.data_interfaces # (LabelledDict)\ndata_interfaces = ophys.data_interfaces\nEventAmplitude = data_interfaces[\"EventAmplitude\"]\nEventAmplitude # (RoiResponseSeries)\nEventAmplitude.starting_time # (float64) 0.0\nEventAmplitude.rate # (float64) 10.003749302576672\nEventAmplitude.resolution # (float64) -1.0\nEventAmplitude.comments # (str) no comments\nEventAmplitude.description # (str) Amplitude of neural events associated with spatial footprints\nEventAmplitude.conversion # (float64) 1.0\nEventAmplitude.offset # (float64) 0.0\nEventAmplitude.unit # (str) fluorescence\nEventAmplitude.data # (Dataset) shape (5185, 11); dtype float64\n# EventAmplitude.data[:, :] # Access all data\n# EventAmplitude.data[0:n, :] # Access first n rows\n# EventAmplitude.data[:, 0:n] # Access first n columns\nEventAmplitude.starting_time_unit # (str) seconds\nEventAmplitude.rois # (DynamicTableRegion)\nEventAmplitude.rois.description # (str) ROIs\nEventAmplitude.rois.table # (PlaneSegmentation)\nEventAmplitude.rois.table.description # (str) Footprints of individual cells obtained by segmenting the field of view\nEventAmplitude.rois.table.colnames # (tuple) ['image_mask']\nEventAmplitude.rois.table.columns # (tuple)\nEventAmplitude.rois.table.reference_images # (list)\nEventAmplitude.rois.table.id # (ElementIdentifiers)\nEventAmplitude.rois.table.imaging_plane # (ImagingPlane)\nEventAmplitude.rois.table.imaging_plane.optical_channel # (list)\nEventAmplitude.rois.table.imaging_plane.description # (str) The plane being imaged by the miniscope\nEventAmplitude.rois.table.imaging_plane.excitation_lambda # (float64) 475.0\nEventAmplitude.rois.table.imaging_plane.imaging_rate # (float64) 10.0\nEventAmplitude.rois.table.imaging_plane.indicator # (str) N/A\nEventAmplitude.rois.table.imaging_plane.location # (str) N/A\nEventAmplitude.rois.table.imaging_plane.conversion # (float) 1.0\nEventAmplitude.rois.table.imaging_plane.unit # (str) meters\nEventAmplitude.rois.table.imaging_plane.origin_coords_unit # (str) meters\nEventAmplitude.rois.table.imaging_plane.grid_spacing_unit # (str) meters\nEventAmplitude.rois.table.imaging_plane.device # (Device)\nEventAmplitude.rois.table.imaging_plane.device.description # (str) NVista3\nEventAmplitude.rois.table.imaging_plane.device.manufacturer # (str) Inscopix, Inc.\n# EventAmplitude.rois.table.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 11 rows and 1 columns\n# EventAmplitude.rois.table.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nEventAmplitude.rois.table.image_mask # (VectorData) Image masks for each ROI\nFluorescence = data_interfaces[\"Fluorescence\"]\nFluorescence # (Fluorescence)\nFluorescence.roi_response_series # (LabelledDict)\nroi_response_series = Fluorescence.roi_response_series\nRoiResponseSeries = roi_response_series[\"RoiResponseSeries\"]\nRoiResponseSeries # (RoiResponseSeries)\nRoiResponseSeries.starting_time # (float64) 0.0\nRoiResponseSeries.rate # (float64) 10.0\nRoiResponseSeries.resolution # (float64) -1.0\nRoiResponseSeries.comments # (str) no comments\nRoiResponseSeries.description # (str) Fluorescence data associated with spatial footprints\nRoiResponseSeries.conversion # (float64) 1.0\nRoiResponseSeries.offset # (float64) 0.0\nRoiResponseSeries.unit # (str) fluorescence\nRoiResponseSeries.data # (Dataset) shape (5185, 11); dtype float32\n# RoiResponseSeries.data[:, :] # Access all data\n# RoiResponseSeries.data[0:n, :] # Access first n rows\n# RoiResponseSeries.data[:, 0:n] # Access first n columns\nRoiResponseSeries.starting_time_unit # (str) seconds\nRoiResponseSeries.rois # (DynamicTableRegion)\nRoiResponseSeries.rois.description # (str) ROIs\nRoiResponseSeries.rois.table # (PlaneSegmentation)\nRoiResponseSeries.rois.table.description # (str) Footprints of individual cells obtained by segmenting the field of view\nRoiResponseSeries.rois.table.colnames # (tuple) ['image_mask']\nRoiResponseSeries.rois.table.columns # (tuple)\nRoiResponseSeries.rois.table.reference_images # (list)\nRoiResponseSeries.rois.table.id # (ElementIdentifiers)\nRoiResponseSeries.rois.table.imaging_plane # (ImagingPlane)\nRoiResponseSeries.rois.table.imaging_plane.optical_channel # (list)\nRoiResponseSeries.rois.table.imaging_plane.description # (str) The plane being imaged by the miniscope\nRoiResponseSeries.rois.table.imaging_plane.excitation_lambda # (float64) 475.0\nRoiResponseSeries.rois.table.imaging_plane.imaging_rate # (float64) 10.0\nRoiResponseSeries.rois.table.imaging_plane.indicator # (str) N/A\nRoiResponseSeries.rois.table.imaging_plane.location # (str) N/A\nRoiResponseSeries.rois.table.imaging_plane.conversion # (float) 1.0\nRoiResponseSeries.rois.table.imaging_plane.unit # (str) meters\nRoiResponseSeries.rois.table.imaging_plane.origin_coords_unit # (str) meters\nRoiResponseSeries.rois.table.imaging_plane.grid_spacing_unit # (str) meters\nRoiResponseSeries.rois.table.imaging_plane.device # (Device)\nRoiResponseSeries.rois.table.imaging_plane.device.description # (str) NVista3\nRoiResponseSeries.rois.table.imaging_plane.device.manufacturer # (str) Inscopix, Inc.\n# RoiResponseSeries.rois.table.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 11 rows and 1 columns\n# RoiResponseSeries.rois.table.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nRoiResponseSeries.rois.table.image_mask # (VectorData) Image masks for each ROI\nImageSegmentation = data_interfaces[\"ImageSegmentation\"]\nImageSegmentation # (ImageSegmentation)\nImageSegmentation.plane_segmentations # (LabelledDict)\nplane_segmentations = ImageSegmentation.plane_segmentations\nPlaneSegmentation = plane_segmentations[\"PlaneSegmentation\"]\nPlaneSegmentation # (PlaneSegmentation)\nPlaneSegmentation.description # (str) Footprints of individual cells obtained by segmenting the field of view\nPlaneSegmentation.colnames # (tuple) ['image_mask']\nPlaneSegmentation.columns # (tuple)\nPlaneSegmentation.reference_images # (list)\nPlaneSegmentation.id # (ElementIdentifiers)\nPlaneSegmentation.imaging_plane # (ImagingPlane)\nPlaneSegmentation.imaging_plane.optical_channel # (list)\nPlaneSegmentation.imaging_plane.description # (str) The plane being imaged by the miniscope\nPlaneSegmentation.imaging_plane.excitation_lambda # (float64) 475.0\nPlaneSegmentation.imaging_plane.imaging_rate # (float64) 10.0\nPlaneSegmentation.imaging_plane.indicator # (str) N/A\nPlaneSegmentation.imaging_plane.location # (str) N/A\nPlaneSegmentation.imaging_plane.conversion # (float) 1.0\nPlaneSegmentation.imaging_plane.unit # (str) meters\nPlaneSegmentation.imaging_plane.origin_coords_unit # (str) meters\nPlaneSegmentation.imaging_plane.grid_spacing_unit # (str) meters\nPlaneSegmentation.imaging_plane.device # (Device)\nPlaneSegmentation.imaging_plane.device.description # (str) NVista3\nPlaneSegmentation.imaging_plane.device.manufacturer # (str) Inscopix, Inc.\n# PlaneSegmentation.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 11 rows and 1 columns\n# PlaneSegmentation.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nPlaneSegmentation.image_mask # (VectorData) Image masks for each ROI\nnwb.devices # (LabelledDict)\ndevices = nwb.devices\nMiniscope = devices[\"Miniscope\"]\nMiniscope # (Device)\nMiniscope.description # (str) NVista3\nMiniscope.manufacturer # (str) Inscopix, Inc.\nnwb.imaging_planes # (LabelledDict)\nimaging_planes = nwb.imaging_planes\nImagingPlane = imaging_planes[\"ImagingPlane\"]\nImagingPlane # (ImagingPlane)\nImagingPlane.optical_channel # (list)\nImagingPlane.description # (str) The plane being imaged by the miniscope\nImagingPlane.excitation_lambda # (float64) 475.0\nImagingPlane.imaging_rate # (float64) 10.0\nImagingPlane.indicator # (str) N/A\nImagingPlane.location # (str) N/A\nImagingPlane.conversion # (float) 1.0\nImagingPlane.unit # (str) meters\nImagingPlane.origin_coords_unit # (str) meters\nImagingPlane.grid_spacing_unit # (str) meters\nImagingPlane.device # (Device)\nImagingPlane.device.description # (str) NVista3\nImagingPlane.device.manufacturer # (str) Inscopix, Inc.\nnwb.subject # (Subject)\nnwb.subject.age # (str) P4Y\nnwb.subject.age__reference # (str) birth\nnwb.subject.sex # (str) M\nnwb.subject.species # (str) Macaca mulatta\nnwb.subject.subject_id # (str) V"
      }
    ]
  },
  {
    "role": "user",
    "content": "On the basis of the above information, please create a jupytext notebook that introduces dandiset 001174 using the format described below.\n\nThe purpose of the notebook is to help researchers explore the dandiset and get started with a reanalysis.\n\nStart with an appropriate title for the notebook, such as \"Exploring Dandiset 001174: ...\" (that should be a markdown heading).\n\nInform the user that the notebook was generated with the assistance of AI, and that they should be cautious when interpreting the code or results.\n\nProvide an overview of the Dandiset. Include a link to the Dandiset of the form https://dandiarchive.org/dandiset/001174/0.250331.2218.\n\nSummarize what the notebook covers.\n\nList the packages that are required to run the notebook. Assume that these are already installed on the user's system. Do not include any pip install commands in the notebook.\n\nShow how to use the DANDI API to load assets.\n\nShow how to load and visualize data from the dandiset based on the above information. Feel free to organize things differently from how they are in the above information, but do not make up new information.\n\nGenerate good quality plots (without being redundant).\n\nLoad NWB data by streaming the remote file (as done in the above information) rather than downloading it.\n\nDo not use any functionality of pynwb or dandi that is not covered in the above information.\n\nYou should stick to material that is covered in the above information and do not hallucinate.\n\nThroughout the notebook, include explanatory markdown cells that guide the user through the process.\n\nThe notebook should be well-documented, and follow best practices Include comments in code cells to explain what each step does.\n\nThe Jupytext should use `# %% [markdown]` for markdown cells and `# %%` delimiters for the code cells.\n\nIf any NWB have units objects, you should know the following:\nunits.spike_times_index[i] provides the vector of spike times for the i^th unit. It is actually not an index. Do not use units.spike_times.\n\nYour notebook will be evaluated based on the following criteria:\n1. How well did the notebook help you understand the purpose and content of the Dandiset?\n2. After reviewing the notebook, do you feel confident in how to access the different types of data from this Dandiset?\n3. Did the notebook help you understand the structure of the NWB file(s) and how to work with them?\n4. Did the visualizations in the notebook generally help you understand key aspects of the data?\n5. Did any of the visualizations make it harder to understand the data (e.g., due to poor formatting, unclear axes, or misleading displays)?\n6. Do you feel more confident creating your own visualizations of the data after seeing the examples in the notebook?\n7. How well did the visualizations show the structure or complexity of the data?\n8. Were there any interpretations or conclusions in the notebook that felt unclear or not well supported by the data shown?\n9. Did any of the plots or examples feel unnecessarily repetitive or redundant?\n10. Did the notebook help you understand what kinds of questions or analyses you could do next with this Dandiset?\n11. How clear and easy was the notebook to follow?\n12. Did the notebook provide code you could easily reuse or adapt to explore the Dandiset yourself?\n13. Did the notebook help you understand what kinds of questions or analyses you could do next with this Dandiset?\n14. Overall, how helpful was this notebook for getting started with this Dandiset?\n\nYour output should be in the format:\n\n<notebook>\nThe text of the jupytext notebook should appear here.\n</notebook>\n\nNo other text should be included in the response.\n"
  },
  {
    "role": "assistant",
    "content": "<notebook>\n# %% [markdown]\n# # Exploring Dandiset 001174: Calcium Imaging in SMA and M1 of Macaques\n#\n# *This notebook was generated with the assistance of AI. Please use caution when interpreting the code or results, and consult the official documentation for the most up-to-date practices.*\n#\n# ## Overview\n#\n# [Dandiset 001174: Calcium imaging in SMA and M1 of macaques](https://dandiarchive.org/dandiset/001174/0.250331.2218) contains calcium imaging data acquired from rhesus macaque motor cortices. Specifically, neuronal population activity was recorded in the Supplementary Motor Area (SMA) and Primary Motor Cortex (M1) using one-photon miniature endoscopic microscopy during rest and arm-reaching tasks.\n#\n# The dataset provides:\n# - High-resolution in vivo imaging data for populations of individually identified projection neurons.\n# - Segmented regions of interest (ROIs) corresponding to single cells and their spatial footprints.\n# - Processed fluorescence traces and neural event amplitudes for each cell.\n#\n# ## This Notebook Covers:\n#\n# 1. **Getting started with the DANDI API**: Finding and loading assets.\n# 2. **Accessing data remotely via streaming**: Opening NWB files without downloading.\n# 3. **Understanding the NWB file structure**: Exploring imaging, ROI, and fluorescence data.\n# 4. **Basic visualization**: Thumbnail images, ROI masks, and single-cell fluorescence traces.\n#\n# ## Required Packages\n# - `dandi`\n# - `remfile`\n# - `pynwb`\n# - `h5py`\n# - `numpy`\n# - `matplotlib`\n# - `pandas`\n#\n# *All needed packages are assumed to be pre-installed.*\n\n# %% [markdown]\n# ## 1. Using the DANDI API to List and Access Assets\n#\n# This section demonstrates how to use the DANDI API to list the files associated with Dandiset 001174 and retrieve streaming URLs for NWB files of interest.\n\n# %%\nfrom dandi.dandiapi import DandiAPIClient\n\n# Initialize the DANDI API client and select the dandiset version\ndandiset_id = \"001174\"\ndandiset_version = \"0.250331.2218\"\n\nwith DandiAPIClient() as client:\n    dandiset = client.get_dandiset(dandiset_id, dandiset_version)\n    # List the available NWB files\n    asset_paths = [a.path for a in dandiset.get_assets()]\n    print(f\"Found {len(asset_paths)} assets in Dandiset {dandiset_id}:\")\n    for path in asset_paths:\n        if path.endswith('.nwb'):\n            print(\"-\", path)\n\n# %% [markdown]\n# For the purpose of this demonstration, we will work with one NWB file:\n#\n# ```\n# sub-V/sub-V_ses-20230309T110929_ophys.nwb\n# ```\n#\n# This file contains calcium imaging data from the M1 region during an arm reaching condition.\n\n# %% [markdown]\n# ## 2. Streaming and Loading an NWB File from DANDI\n#\n# We will now access the NWB file remotely and explore its contents. This approach avoids having to download large files before analysis.\n\n# %%\nimport remfile\nimport h5py\nimport pynwb\n\n# Select a specific asset/file of interest\ntarget_nwb_path = \"sub-V/sub-V_ses-20230309T110929_ophys.nwb\"\n\n# Get the download URL for the remote NWB file\nwith DandiAPIClient() as client:\n    dandiset = client.get_dandiset(dandiset_id, dandiset_version)\n    asset = next(dandiset.get_assets_by_glob(target_nwb_path))\n    url = asset.download_url\n\n# Open the remote file via remfile and h5py\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\n\n# Load NWB using pynwb\nio = pynwb.NWBHDF5IO(file=h5_file, load_namespaces=True)\nnwbfile = io.read()\n\nprint(f\"Session description: {nwbfile.session_description}\")\nprint(f\"Session start time: {nwbfile.session_start_time}\")\nprint(f\"Subject ID: {nwbfile.subject.subject_id}, Age: {nwbfile.subject.age}, Species: {nwbfile.subject.species}\")\n\n# %% [markdown]\n# ## 3. Exploring NWB File Structure\n#\n# The file contains the following main elements of interest:\n#\n# - **Acquisition \u2192 OnePhotonSeries**: Raw miniscope imaging data (fluorescence movies).\n# - **Processing \u2192 ophys**: \n#     - **Fluorescence \u2192 RoiResponseSeries**: Processed fluorescence traces for each ROI (cell).\n#     - **EventAmplitude**: Amplitude of detected neural events for each ROI.\n#     - **ImageSegmentation \u2192 PlaneSegmentation**: Image masks (spatial footprints) for each ROI/cell.\n#\n# Let's explore the structure more closely.\n\n# %%\n# Show acquisition keys and some metadata from the OnePhotonSeries\nacq = nwbfile.acquisition\nprint(\"Acquisition keys:\", list(acq.keys()))\n\nophys_series = acq[\"OnePhotonSeries\"]\nprint(\"\\nOnePhotonSeries:\")\nprint(\"  Data shape (frames, height, width):\", ophys_series.data.shape)\nprint(\"  Imaging rate (Hz):\", ophys_series.rate)\nprint(\"  Unit:\", ophys_series.unit)\nprint(\"  Description:\", ophys_series.description)\n\n# %% [markdown]\n# ## 4. Summarizing ROIs and Fluorescence Data\n#\n# We now inspect the processed data structure, which includes ROI masks and fluorescence traces.\n\n# %%\n# Access processing module and ophys data\nophys_module = nwbfile.processing[\"ophys\"]\nfluorescence = ophys_module.data_interfaces[\"Fluorescence\"]\nevent_amplitude = ophys_module.data_interfaces[\"EventAmplitude\"]\n\n# Get ROI information\nroi_table = fluorescence.roi_response_series[\"RoiResponseSeries\"].rois.table\nroi_df = roi_table.to_dataframe()\nprint(f\"Number of segmented ROIs (cells): {len(roi_df)}\")\n\n# Show the first few ROI indices\nprint(roi_df.head())\n\n# %% [markdown]\n# ## 5. Plotting a Thumbnail and Example ROI Masks\n#\n# We'll plot a single movie frame as a thumbnail, overlaying ROI masks on top to show cell locations.\n\n# %%\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\n\n# Read the first frame of the imaging data\nframe0 = np.array(ophys_series.data[0])\n\nfig, ax = plt.subplots(figsize=(8,6))\nax.imshow(frame0, cmap='gray')\nax.set_title(\"Movie Frame 0 with ROI Masks\")\nax.axis('off')\n\n# Overlay the ROI masks outlines\n# Some NWB image_mask arrays are [height, width], here each ROI is likely a binary mask\nfor idx, row in roi_df.iterrows():\n    mask = np.array(row['image_mask'])\n    # contour: plot mask outline if not empty\n    if mask.sum() > 0:\n        y,x = np.where(mask)\n        ax.scatter(x, y, s=0.5, alpha=0.8, label=f\"ROI {idx}\" if idx < 1 else \"\", c='r')\n\n# Only label the first ROI in legend to avoid clutter\nax.legend(loc='lower right')\nplt.tight_layout()\nplt.show()\n\n# %% [markdown]\n# ## 6. Visualizing Fluorescence Traces from Multiple Cells\n#\n# Each ROI/cell is associated with a time series of fluorescence intensities. Let's plot traces from the first few cells.\n\n# %%\n# Extract fluorescence data for all ROIs\nfluor = fluorescence.roi_response_series[\"RoiResponseSeries\"].data[:]\ntimes = np.arange(fluor.shape[0]) / fluorescence.roi_response_series[\"RoiResponseSeries\"].rate\n\n# Plot fluorescence for first 5 ROIs\nn_plot = min(5, fluor.shape[1])\nfig, ax = plt.subplots(figsize=(10,6))\nfor i in range(n_plot):\n    ax.plot(times, fluor[:,i] + i*np.nanmax(fluor[:, :n_plot]), label=f\"ROI {i}\")\n\nax.set_xlabel(\"Time (s)\")\nax.set_ylabel(\"Fluorescence (offset for clarity)\")\nax.set_title(\"Fluorescence Traces for First 5 ROIs\")\nax.legend()\nplt.tight_layout()\nplt.show()\n\n# %% [markdown]\n# ## 7. Event Amplitude Traces\n#\n# The NWB also provides event amplitudes, reflecting the intensity of detected calcium events (peaks) in each cell.\n\n# %%\n# Extract event amplitude data for same ROIs as above\nevent_amp = event_amplitude.data[:]\ntimes_evt = np.arange(event_amp.shape[0]) / event_amplitude.rate\n\nfig, ax = plt.subplots(figsize=(10,6))\nfor i in range(n_plot):\n    ax.plot(times_evt, event_amp[:,i] + i*np.nanmax(event_amp[:, :n_plot]), label=f\"ROI {i}\")\n\nax.set_xlabel(\"Time (s)\")\nax.set_ylabel(\"Event Amplitude (offset for clarity)\")\nax.set_title(\"Event Amplitudes for First 5 ROIs\")\nax.legend()\nplt.tight_layout()\nplt.show()\n\n# %% [markdown]\n# ## 8. Tips for Further Exploration\n#\n# - Each NWB file in the Dandiset follows a similar structure; you can easily adapt the above code to select other sessions or subjects.\n# - The full movie is accessible as `OnePhotonSeries.data` (large, be mindful of memory use).\n# - The spatial footprint masks of ROIs are 2D arrays; you can use them to extract morphological statistics, overlap, or anatomical placements.\n# - The `EventAmplitude` and `RoiResponseSeries` offer different approaches to analyzing cellular activity.\n#\n# **Example questions to explore:**\n# - How do cell activity patterns vary across behavioral conditions or cortical areas?\n# - What is the spatial arrangement and correlation structure among ROIs?\n# - Can you extract population events or sequences from the activity traces?\n#\n# See [the associated BioRxiv preprint](https://www.biorxiv.org/content/10.1101/2024.06.20.599918v3) for more information on the acquisition and analysis performed.\n#\n# ---\n#\n# *You are now set up to begin your own exploration and reanalysis of Dandiset 001174!*\n</notebook>"
  }
]