[
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata about Dandiset 001174 version 0.250331.2218."
      },
      {
        "type": "text",
        "text": "{\n  \"id\": \"DANDI:001174/0.250331.2218\",\n  \"doi\": \"10.48324/dandi.001174/0.250331.2218\",\n  \"url\": \"https://dandiarchive.org/dandiset/001174/0.250331.2218\",\n  \"name\": \"Calcium imaging in SMA and M1 of macaques\",\n  \"about\": [\n    {\n      \"name\": \"Publication associated with this dataset\",\n      \"schemaKey\": \"GenericType\"\n    }\n  ],\n  \"access\": [\n    {\n      \"status\": \"dandi:OpenAccess\",\n      \"schemaKey\": \"AccessRequirements\"\n    }\n  ],\n  \"license\": [\n    \"spdx:CC-BY-4.0\"\n  ],\n  \"version\": \"0.250331.2218\",\n  \"@context\": \"https://raw.githubusercontent.com/dandi/schema/master/releases/0.6.8/context.json\",\n  \"citation\": \"Galvan, Adriana; Martel, Anne-Caroline; Pittard, Damien; Devergnas, Annaelle; Risk, Benjamin; Nassi, Jonathan J.; Yu, Waylin; Downer, Joshua D. ; Wichmann, Thomas (2025) Calcium imaging in SMA and M1 of macaques (Version 0.250331.2218) [Data set]. DANDI Archive. https://doi.org/10.48324/dandi.001174/0.250331.2218\",\n  \"keywords\": [\n    \"One-photon calcium imaging, non-human primates, microendoscope, reaching task, neuronal coactivation, calcium sensors, GCaMP, GRIN lens\"\n  ],\n  \"protocol\": [],\n  \"schemaKey\": \"Dandiset\",\n  \"identifier\": \"DANDI:001174\",\n  \"repository\": \"https://dandiarchive.org\",\n  \"contributor\": [\n    {\n      \"name\": \"Galvan, Adriana\",\n      \"email\": \"agalvan@emory.edu\",\n      \"roleName\": [\n        \"dcite:ContactPerson\",\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0001-9939-0130\",\n      \"affiliation\": [],\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Martel, Anne-Caroline\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0001-6590-0323\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Pittard, Damien\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-1169-8964\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Devergnas, Annaelle\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-0461-6422\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Risk, Benjamin\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0003-1090-0777\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Nassi, Jonathan J.\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-3144-3846\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Yu, Waylin\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0001-5489-3260\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Downer, Joshua D. \",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0003-3817-6733\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Wichmann, Thomas\",\n      \"roleName\": [\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-2751-9545\",\n      \"includeInCitation\": true\n    },\n    {\n      \"url\": \"https://parkinsonsroadmap.org\",\n      \"name\": \"Aligning Science Across Parkinson's\",\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/03zj4c476\",\n      \"awardNumber\": \"ASAP-020572\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"NIH ORIP\",\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/01jdyfj45\",\n      \"awardNumber\": \"P51-OD011132 \",\n      \"includeInCitation\": false\n    }\n  ],\n  \"dateCreated\": \"2024-08-14T21:48:01.209431+00:00\",\n  \"description\": \"The study of motor cortices in non-human primates is relevant to our understanding of human motor control, both in healthy conditions and in movement disorders. Calcium imaging and miniature microscopes allow the study of multiple genetically identified neurons with excellent spatial resolution. We used this method to examine activity patterns of projection neurons in deep layers of the supplementary motor (SMA) and primary motor areas (M1) in four rhesus macaques. We implanted gradient index lenses and expressed GCaMP6f to image calcium transients while the animals were at rest or engaged in an arm reaching task. We tracked the activity of SMA and M1 neurons across conditions, examined cell pairs for synchronous activity, and assessed whether SMA and M1 neuronal activation followed specific sequential activation patterns. We demonstrate the value of in vivo calcium imaging for studying patterns of activity in groups of corticofugal neurons in SMA and M1.\",\n  \"publishedBy\": {\n    \"id\": \"urn:uuid:4a1af918-c265-4e4d-b3b9-54062413803e\",\n    \"name\": \"DANDI publish\",\n    \"endDate\": \"2025-03-31T22:18:19.390100+00:00\",\n    \"schemaKey\": \"PublishActivity\",\n    \"startDate\": \"2025-03-31T22:18:19.390100+00:00\",\n    \"wasAssociatedWith\": [\n      {\n        \"id\": \"urn:uuid:8ca8388b-e44f-45d4-8040-2f19511e9bff\",\n        \"name\": \"DANDI API\",\n        \"version\": \"0.1.0\",\n        \"schemaKey\": \"Software\",\n        \"identifier\": \"RRID:SCR_017571\"\n      }\n    ]\n  },\n  \"studyTarget\": [\n    \"To track the calcium activity of SMA and M1 neurons at rest and during arm reaches.\"\n  ],\n  \"assetsSummary\": {\n    \"species\": [\n      {\n        \"name\": \"Macaca mulatta - Rhesus monkey\",\n        \"schemaKey\": \"SpeciesType\",\n        \"identifier\": \"http://purl.obolibrary.org/obo/NCBITaxon_9544\"\n      }\n    ],\n    \"approach\": [\n      {\n        \"name\": \"microscopy approach; cell population imaging\",\n        \"schemaKey\": \"ApproachType\"\n      }\n    ],\n    \"schemaKey\": \"AssetsSummary\",\n    \"dataStandard\": [\n      {\n        \"name\": \"Neurodata Without Borders (NWB)\",\n        \"schemaKey\": \"StandardsType\",\n        \"identifier\": \"RRID:SCR_015242\"\n      }\n    ],\n    \"numberOfBytes\": 687623485560,\n    \"numberOfFiles\": 45,\n    \"numberOfSubjects\": 4,\n    \"variableMeasured\": [\n      \"ProcessingModule\",\n      \"PlaneSegmentation\",\n      \"OpticalChannel\",\n      \"ImagingPlane\",\n      \"OnePhotonSeries\"\n    ],\n    \"measurementTechnique\": [\n      {\n        \"name\": \"analytical technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"surgical technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"one-photon microscopy technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      }\n    ]\n  },\n  \"datePublished\": \"2025-03-31T22:18:19.390100+00:00\",\n  \"schemaVersion\": \"0.6.8\",\n  \"ethicsApproval\": [\n    {\n      \"schemaKey\": \"EthicsApproval\",\n      \"identifier\": \"Emory IACUC protocol PROTO202100149\",\n      \"contactPoint\": {\n        \"schemaKey\": \"ContactPoint\"\n      }\n    }\n  ],\n  \"wasGeneratedBy\": [],\n  \"relatedResource\": [\n    {\n      \"url\": \"https://zenodo.org/uploads/14727695\",\n      \"name\": \"Descriptors of calcium cell activities\",\n      \"relation\": \"dcite:Describes\",\n      \"schemaKey\": \"Resource\",\n      \"identifier\": \"10.5281/zenodo.14727695\",\n      \"repository\": \"Zenodo\",\n      \"resourceType\": \"dcite:Dataset\"\n    },\n    {\n      \"url\": \"https://www.biorxiv.org/content/10.1101/2024.06.20.599918v3\",\n      \"name\": \"MICROENDOSCOPIC CALCIUM IMAGING IN SUPPLEMENTARY MOTOR AREA AND PRIMARY MOTOR CORTEX OF RHESUS MACAQUES AT REST AND DURING ARM MOVEMENT\",\n      \"relation\": \"dcite:Describes\",\n      \"schemaKey\": \"Resource\",\n      \"identifier\": \"doi.org/10.1101/2024.06.20.599918\",\n      \"repository\": \"BioRxiv\",\n      \"resourceType\": \"dcite:Preprint\"\n    }\n  ],\n  \"manifestLocation\": [\n    \"https://dandiarchive.s3.amazonaws.com/dandisets/001174/0.250331.2218/assets.yaml\"\n  ]\n}"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is a listing of some of the files in the Dandiset."
      },
      {
        "type": "text",
        "text": "sub-V/sub-V_ses-20230309T110929_ophys.nwb\nsub-Q/sub-Q_ophys.nwb\nsub-Q/sub-Q_ses-20220922T131747_ophys.nwb\nsub-Q/sub-Q_ses-20221003T131952_ophys.nwb\nsub-Q/sub-Q_ses-20221028T121142_ophys.nwb\nsub-Q/sub-Q_ses-20221201T132256_ophys.nwb\nsub-Q/sub-Q_ses-20221202T122907_ophys.nwb\nsub-Q/sub-Q_ses-20221206T121002_ophys.nwb\nsub-Q/sub-Q_ses-20220915T133954_ophys.nwb\nsub-Q/sub-Q_ses-20221201T134628_ophys.nwb"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata and usage information about the file sub-V/sub-V_ses-20230309T110929_ophys.nwb."
      },
      {
        "type": "text",
        "text": "\nimport pynwb\nimport h5py\nimport remfile\n\n# Load\nfrom dandi.dandiapi import DandiAPIClient\n\nclient = DandiAPIClient()\ndandiset = client.get_dandiset(\"001174\", \"0.250331.2218\")\nurl = next(dandiset.get_assets_by_glob(\"sub-V/sub-V_ses-20230309T110929_ophys.nwb\")).download_url\n\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file)\nnwb = io.read()\n\nnwb # (NWBFile)\nnwb.session_description # (str) Calcium imaging in M1 during the arm reaching condition\nnwb.identifier # (str) ef45b76c-6097-4571-bfef-7f9cc2e9c3bb\nnwb.session_start_time # (datetime) 2023-03-09T11:09:29.585000+00:00\nnwb.timestamps_reference_time # (datetime) 2023-03-09T11:09:29.585000+00:00\nnwb.file_create_date # (list) [datetime.datetime(2024, 11, 21, 21, 30, 50, 335652, tzinfo=tzutc())]\nnwb.acquisition # (LabelledDict)\nacquisition = nwb.acquisition\nOnePhotonSeries = acquisition[\"OnePhotonSeries\"]\nOnePhotonSeries # (OnePhotonSeries)\nOnePhotonSeries.starting_time # (float64) 0.0\nOnePhotonSeries.rate # (float64) 10.0\nOnePhotonSeries.resolution # (float64) -1.0\nOnePhotonSeries.comments # (str) no comments\nOnePhotonSeries.description # (str) Miniscope imaging data\nOnePhotonSeries.conversion # (float64) 1.0\nOnePhotonSeries.offset # (float64) 0.0\nOnePhotonSeries.unit # (str) fluorescence\nOnePhotonSeries.data # (Dataset) shape (5185, 1280, 800); dtype uint16\n# OnePhotonSeries.data[:, :, :] # Access all data\n# OnePhotonSeries.data[0, :, :] # Access first plane\nOnePhotonSeries.starting_time_unit # (str) seconds\nOnePhotonSeries.imaging_plane # (ImagingPlane)\nOnePhotonSeries.imaging_plane.optical_channel # (list)\nOnePhotonSeries.imaging_plane.description # (str) The plane being imaged by the miniscope\nOnePhotonSeries.imaging_plane.excitation_lambda # (float64) 475.0\nOnePhotonSeries.imaging_plane.imaging_rate # (float64) 10.0\nOnePhotonSeries.imaging_plane.indicator # (str) N/A\nOnePhotonSeries.imaging_plane.location # (str) N/A\nOnePhotonSeries.imaging_plane.conversion # (float) 1.0\nOnePhotonSeries.imaging_plane.unit # (str) meters\nOnePhotonSeries.imaging_plane.origin_coords_unit # (str) meters\nOnePhotonSeries.imaging_plane.grid_spacing_unit # (str) meters\nOnePhotonSeries.imaging_plane.device # (Device)\nOnePhotonSeries.imaging_plane.device.description # (str) NVista3\nOnePhotonSeries.imaging_plane.device.manufacturer # (str) Inscopix, Inc.\nnwb.processing # (LabelledDict)\nprocessing = nwb.processing\nophys = processing[\"ophys\"]\nophys # (ProcessingModule)\nophys.description # (str) Optical physiology data obtained by processing raw calcium imaging data\nophys.data_interfaces # (LabelledDict)\ndata_interfaces = ophys.data_interfaces\nEventAmplitude = data_interfaces[\"EventAmplitude\"]\nEventAmplitude # (RoiResponseSeries)\nEventAmplitude.starting_time # (float64) 0.0\nEventAmplitude.rate # (float64) 10.003749302576672\nEventAmplitude.resolution # (float64) -1.0\nEventAmplitude.comments # (str) no comments\nEventAmplitude.description # (str) Amplitude of neural events associated with spatial footprints\nEventAmplitude.conversion # (float64) 1.0\nEventAmplitude.offset # (float64) 0.0\nEventAmplitude.unit # (str) fluorescence\nEventAmplitude.data # (Dataset) shape (5185, 11); dtype float64\n# EventAmplitude.data[:, :] # Access all data\n# EventAmplitude.data[0:n, :] # Access first n rows\n# EventAmplitude.data[:, 0:n] # Access first n columns\nEventAmplitude.starting_time_unit # (str) seconds\nEventAmplitude.rois # (DynamicTableRegion)\nEventAmplitude.rois.description # (str) ROIs\nEventAmplitude.rois.table # (PlaneSegmentation)\nEventAmplitude.rois.table.description # (str) Footprints of individual cells obtained by segmenting the field of view\nEventAmplitude.rois.table.colnames # (tuple) ['image_mask']\nEventAmplitude.rois.table.columns # (tuple)\nEventAmplitude.rois.table.reference_images # (list)\nEventAmplitude.rois.table.id # (ElementIdentifiers)\nEventAmplitude.rois.table.imaging_plane # (ImagingPlane)\nEventAmplitude.rois.table.imaging_plane.optical_channel # (list)\nEventAmplitude.rois.table.imaging_plane.description # (str) The plane being imaged by the miniscope\nEventAmplitude.rois.table.imaging_plane.excitation_lambda # (float64) 475.0\nEventAmplitude.rois.table.imaging_plane.imaging_rate # (float64) 10.0\nEventAmplitude.rois.table.imaging_plane.indicator # (str) N/A\nEventAmplitude.rois.table.imaging_plane.location # (str) N/A\nEventAmplitude.rois.table.imaging_plane.conversion # (float) 1.0\nEventAmplitude.rois.table.imaging_plane.unit # (str) meters\nEventAmplitude.rois.table.imaging_plane.origin_coords_unit # (str) meters\nEventAmplitude.rois.table.imaging_plane.grid_spacing_unit # (str) meters\nEventAmplitude.rois.table.imaging_plane.device # (Device)\nEventAmplitude.rois.table.imaging_plane.device.description # (str) NVista3\nEventAmplitude.rois.table.imaging_plane.device.manufacturer # (str) Inscopix, Inc.\n# EventAmplitude.rois.table.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 11 rows and 1 columns\n# EventAmplitude.rois.table.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nEventAmplitude.rois.table.image_mask # (VectorData) Image masks for each ROI\nFluorescence = data_interfaces[\"Fluorescence\"]\nFluorescence # (Fluorescence)\nFluorescence.roi_response_series # (LabelledDict)\nroi_response_series = Fluorescence.roi_response_series\nRoiResponseSeries = roi_response_series[\"RoiResponseSeries\"]\nRoiResponseSeries # (RoiResponseSeries)\nRoiResponseSeries.starting_time # (float64) 0.0\nRoiResponseSeries.rate # (float64) 10.0\nRoiResponseSeries.resolution # (float64) -1.0\nRoiResponseSeries.comments # (str) no comments\nRoiResponseSeries.description # (str) Fluorescence data associated with spatial footprints\nRoiResponseSeries.conversion # (float64) 1.0\nRoiResponseSeries.offset # (float64) 0.0\nRoiResponseSeries.unit # (str) fluorescence\nRoiResponseSeries.data # (Dataset) shape (5185, 11); dtype float32\n# RoiResponseSeries.data[:, :] # Access all data\n# RoiResponseSeries.data[0:n, :] # Access first n rows\n# RoiResponseSeries.data[:, 0:n] # Access first n columns\nRoiResponseSeries.starting_time_unit # (str) seconds\nRoiResponseSeries.rois # (DynamicTableRegion)\nRoiResponseSeries.rois.description # (str) ROIs\nRoiResponseSeries.rois.table # (PlaneSegmentation)\nRoiResponseSeries.rois.table.description # (str) Footprints of individual cells obtained by segmenting the field of view\nRoiResponseSeries.rois.table.colnames # (tuple) ['image_mask']\nRoiResponseSeries.rois.table.columns # (tuple)\nRoiResponseSeries.rois.table.reference_images # (list)\nRoiResponseSeries.rois.table.id # (ElementIdentifiers)\nRoiResponseSeries.rois.table.imaging_plane # (ImagingPlane)\nRoiResponseSeries.rois.table.imaging_plane.optical_channel # (list)\nRoiResponseSeries.rois.table.imaging_plane.description # (str) The plane being imaged by the miniscope\nRoiResponseSeries.rois.table.imaging_plane.excitation_lambda # (float64) 475.0\nRoiResponseSeries.rois.table.imaging_plane.imaging_rate # (float64) 10.0\nRoiResponseSeries.rois.table.imaging_plane.indicator # (str) N/A\nRoiResponseSeries.rois.table.imaging_plane.location # (str) N/A\nRoiResponseSeries.rois.table.imaging_plane.conversion # (float) 1.0\nRoiResponseSeries.rois.table.imaging_plane.unit # (str) meters\nRoiResponseSeries.rois.table.imaging_plane.origin_coords_unit # (str) meters\nRoiResponseSeries.rois.table.imaging_plane.grid_spacing_unit # (str) meters\nRoiResponseSeries.rois.table.imaging_plane.device # (Device)\nRoiResponseSeries.rois.table.imaging_plane.device.description # (str) NVista3\nRoiResponseSeries.rois.table.imaging_plane.device.manufacturer # (str) Inscopix, Inc.\n# RoiResponseSeries.rois.table.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 11 rows and 1 columns\n# RoiResponseSeries.rois.table.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nRoiResponseSeries.rois.table.image_mask # (VectorData) Image masks for each ROI\nImageSegmentation = data_interfaces[\"ImageSegmentation\"]\nImageSegmentation # (ImageSegmentation)\nImageSegmentation.plane_segmentations # (LabelledDict)\nplane_segmentations = ImageSegmentation.plane_segmentations\nPlaneSegmentation = plane_segmentations[\"PlaneSegmentation\"]\nPlaneSegmentation # (PlaneSegmentation)\nPlaneSegmentation.description # (str) Footprints of individual cells obtained by segmenting the field of view\nPlaneSegmentation.colnames # (tuple) ['image_mask']\nPlaneSegmentation.columns # (tuple)\nPlaneSegmentation.reference_images # (list)\nPlaneSegmentation.id # (ElementIdentifiers)\nPlaneSegmentation.imaging_plane # (ImagingPlane)\nPlaneSegmentation.imaging_plane.optical_channel # (list)\nPlaneSegmentation.imaging_plane.description # (str) The plane being imaged by the miniscope\nPlaneSegmentation.imaging_plane.excitation_lambda # (float64) 475.0\nPlaneSegmentation.imaging_plane.imaging_rate # (float64) 10.0\nPlaneSegmentation.imaging_plane.indicator # (str) N/A\nPlaneSegmentation.imaging_plane.location # (str) N/A\nPlaneSegmentation.imaging_plane.conversion # (float) 1.0\nPlaneSegmentation.imaging_plane.unit # (str) meters\nPlaneSegmentation.imaging_plane.origin_coords_unit # (str) meters\nPlaneSegmentation.imaging_plane.grid_spacing_unit # (str) meters\nPlaneSegmentation.imaging_plane.device # (Device)\nPlaneSegmentation.imaging_plane.device.description # (str) NVista3\nPlaneSegmentation.imaging_plane.device.manufacturer # (str) Inscopix, Inc.\n# PlaneSegmentation.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 11 rows and 1 columns\n# PlaneSegmentation.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nPlaneSegmentation.image_mask # (VectorData) Image masks for each ROI\nnwb.devices # (LabelledDict)\ndevices = nwb.devices\nMiniscope = devices[\"Miniscope\"]\nMiniscope # (Device)\nMiniscope.description # (str) NVista3\nMiniscope.manufacturer # (str) Inscopix, Inc.\nnwb.imaging_planes # (LabelledDict)\nimaging_planes = nwb.imaging_planes\nImagingPlane = imaging_planes[\"ImagingPlane\"]\nImagingPlane # (ImagingPlane)\nImagingPlane.optical_channel # (list)\nImagingPlane.description # (str) The plane being imaged by the miniscope\nImagingPlane.excitation_lambda # (float64) 475.0\nImagingPlane.imaging_rate # (float64) 10.0\nImagingPlane.indicator # (str) N/A\nImagingPlane.location # (str) N/A\nImagingPlane.conversion # (float) 1.0\nImagingPlane.unit # (str) meters\nImagingPlane.origin_coords_unit # (str) meters\nImagingPlane.grid_spacing_unit # (str) meters\nImagingPlane.device # (Device)\nImagingPlane.device.description # (str) NVista3\nImagingPlane.device.manufacturer # (str) Inscopix, Inc.\nnwb.subject # (Subject)\nnwb.subject.age # (str) P4Y\nnwb.subject.age__reference # (str) birth\nnwb.subject.sex # (str) M\nnwb.subject.species # (str) Macaca mulatta\nnwb.subject.subject_id # (str) V"
      }
    ]
  },
  {
    "role": "user",
    "content": "Please summarize the above information in a jupytext notebook that introduces dandiset 001174 using the format described below.\n\nThe purpose of the notebook is to help researchers explore the dandiset and get started with a reanalysis.\n\nStart with an appropriate title for the notebook, such as \"Exploring Dandiset 001174: ...\" (that should be a markdown heading).\n\nInform the user that the notebook was generated with the assistance of AI, and that they should be cautious when interpreting the code or results.\n\nProvide an overview of the Dandiset. Include a link to the Dandiset of the form https://dandiarchive.org/dandiset/001174/0.250331.2218.\n\nSummarize what the notebook covers.\n\nList the packages that are required to run the notebook. Assume that these are already installed on the user's system. Do not include any pip install commands in the notebook.\n\nShow how to use the DANDI API to load assets.\n\nShow how to load and visualize data from the dandiset based on the above chat.\n\nGenerate all the good quality plots (without being redundant).\n\nLoad NWB data by streaming the remote file (as done in the chat) rather than downloading it.\n\nDo not use any functionality of pynwb or dandi that is not covered in the chat.\n\nYou should stick to material that is covered in the chat and do not hallucinate.\n\nThroughout the notebook, include explanatory markdown cells that guide the user through the process.\n\nThe notebook should be well-documented, and follow best practices Include comments in code cells to explain what each step does.\n\nThe Jupytext should use `# %% [markdown]` for markdown cells and `# %%` delimiters for the code cells.\n\nYour output should be in the format:\n\n<notebook>\nThe text of the jupytext notebook should appear here.\n</notebook>\n\nNo other text should be included in the response.\n"
  },
  {
    "role": "assistant",
    "content": "<notebook>\n# %% [markdown]\n# # Exploring Dandiset 001174: Calcium Imaging in SMA and M1 of Macaques\n#\n# *Notebook generated with AI assistance. Please use caution and verify findings.*\n#\n# Welcome! This notebook introduces [Dandiset 001174, version 0.250331.2218](https://dandiarchive.org/dandiset/001174/0.250331.2218), a data collection featuring one-photon calcium imaging recorded from the supplementary motor area (SMA) and primary motor cortex (M1) of rhesus macaques (Macaca mulatta). The imaging was conducted during rest and arm-reaching tasks.\n#\n# **What does this notebook cover?**\n# - An overview of Dandiset 001174 and its metadata\n# - How to programmatically explore assets in the Dandiset using the DANDI API\n# - How to stream and access imaging data from a remote NWB file using `remfile`, `h5py`, and `pynwb`\n# - Basic exploration and visualization of:\n#   - Raw fluorescence imaging data (first frame)\n#   - Segmented ROIs (cell masks)\n#   - Extracted fluorescence traces for individual cells\n#\n# **Required Packages:**  \n# - `dandi`  \n# - `remfile`  \n# - `h5py`  \n# - `pynwb`  \n# - `matplotlib`  \n# - `pandas`  \n# - `numpy`\n#\n# **Note:** No package installation is included; it is assumed you have the packages installed.\n#\n# Let's get started!\n\n# %% [markdown]\n# ## 1. Dandiset Overview\n#\n# - **DOI:** [10.48324/dandi.001174/0.250331.2218](https://doi.org/10.48324/dandi.001174/0.250331.2218)\n# - **Title:** Calcium imaging in SMA and M1 of macaques\n# - **Species:** Macaca mulatta (Rhesus monkey)\n# - **Data Type:** One-photon calcium imaging, NWB format\n# - **Description:** Imaging was performed in deep layers of motor cortices while animals were at rest or engaged in an arm-reaching task. Data contains raw imaging movies, spatial masks for cell segmentation (ROIs), and extracted fluorescence signals per cell.\n#\n# Associated resources and protocols can be found [here](https://dandiarchive.org/dandiset/001174/0.250331.2218).\n\n# %% [markdown]\n# ## 2. Import Packages and Set Up DANDI API Client\n#\n# We'll use the DANDI API to list available files (\"assets\") and obtain streaming links.\n\n# %%\nfrom dandi.dandiapi import DandiAPIClient\nimport remfile\nimport h5py\nimport pynwb\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# %% [markdown]\n# ## 3. List Assets in the Dandiset\n#\n# Here, we list files for a particular subject/session. The filenames encode subject IDs and session timestamps.\n\n# %%\n# Initialize the DANDI API client and fetch the dandiset\ndandiset_id = \"001174\"\nversion = \"0.250331.2218\"\n\nwith DandiAPIClient() as client:\n    dandiset = client.get_dandiset(dandiset_id, version)\n    # List all files in the dandiset for illustration\n    asset_list = list(dandiset.get_assets())\n    print(f\"Total files in Dandiset {dandiset_id} (v{version}):\", len(asset_list))\n    # Show the first 5 assets\n    for asset in asset_list[:5]:\n        print(\"-\", asset.path)\n\n# %% [markdown]\n# ## 4. Select an Example NWB File and Prepare for Streaming Access\n#\n# Let's pick a session: `sub-V/sub-V_ses-20230309T110929_ophys.nwb`, corresponding to imaging in M1 during an arm-reaching task (subject V, male, age ~4 years).\n\n# %%\n# Select one asset (file) for analysis\nselected_filename = \"sub-V/sub-V_ses-20230309T110929_ophys.nwb\"\n\nwith DandiAPIClient() as client:\n    dandiset = client.get_dandiset(dandiset_id, version)\n    asset = next(dandiset.get_assets_by_glob(selected_filename))\n    url = asset.download_url\n\nprint(\"Remote NWB file download URL:\", url)\n\n# %% [markdown]\n# ## 5. Stream NWB Data and Open with pynwb\n#\n# We'll use `remfile` + `h5py` to stream the file, and open it with `pynwb.NWBHDF5IO` for reading.\n\n# %%\n# Stream the NWB file remotely (do not download entire file)\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file, load_namespaces=True)\nnwb = io.read()\nprint(\"Loaded NWB file:\", nwb)\n\n# %% [markdown]\n# ## 6. Basic NWB File Metadata\n#\n# Let's display some information about the session, subject, and imaging settings.\n\n# %%\nprint(\"Session description:\", nwb.session_description)\nprint(\"Session start time:\", nwb.session_start_time)\nprint(\"Subject ID:\", nwb.subject.subject_id)\nprint(\"Subject age:\", nwb.subject.age)\nprint(\"Subject sex:\", nwb.subject.sex)\nprint(\"Species:\", nwb.subject.species)\n\n# %% [markdown]\n# ## 7. Explore Imaging Data: OnePhotonSeries\n#\n# The main imaging movie is stored in `acquisition['OnePhotonSeries']`.\n# - Shape: `(time, height, width)`  \n# - For this file: (5185, 1280, 800)\n#\n# We'll plot the first frame to visualize the raw calcium imaging data.\n\n# %%\n# Access the OnePhotonSeries object\none_photon = nwb.acquisition[\"OnePhotonSeries\"]\nimg_shape = one_photon.data.shape\nprint(\"Imaging movie shape (frames, h, w):\", img_shape)\n\n# Fetch and plot the first imaging frame\nfirst_frame = one_photon.data[0, :, :]  # shape (1280, 800)\n\nplt.figure(figsize=(8, 10))\nplt.imshow(first_frame, cmap=\"gray\")\nplt.title(\"First Imaging Frame (Raw Fluorescence)\\nsub-V, M1, Arm Reaching Session\")\nplt.axis(\"off\")\nplt.show()\n\n# %% [markdown]\n# ## 8. Cell Segmentation Masks (ROIs)\n#\n# Segmented cell masks (ROIs) are stored in the `processing['ophys']` module in the `ImageSegmentation > PlaneSegmentation`.\n# - Each ROI corresponds to an individual cell.\n# - Let's display all cell masks overlayed on the first imaging frame.\n\n# %%\n# Access PlaneSegmentation for masks\nplane_seg = nwb.processing[\"ophys\"].data_interfaces[\"ImageSegmentation\"].plane_segmentations[\"PlaneSegmentation\"]\nnum_rois = len(plane_seg)\nprint(f\"Number of segmented cell ROIs: {num_rois}\")\n\n# Each mask is a boolean numpy array, same shape as imaging frame\noverlay = np.zeros(first_frame.shape, dtype=np.float32)\ncolors = plt.cm.jet(np.linspace(0, 1, num_rois))\n\nplt.figure(figsize=(8, 10))\nplt.imshow(first_frame, cmap=\"gray\", alpha=0.7)\nfor idx in range(num_rois):\n    mask = plane_seg.image_mask[idx]\n    # Outline mask\n    contour = np.where(mask > 0)\n    plt.scatter(contour[1], contour[0], color=colors[idx], s=0.1, label=f\"Cell {idx+1}\" if idx<1 else None)\n\nplt.title(\"Cell ROIs Overlayed on First Imaging Frame\")\nplt.axis(\"off\")\nplt.show()\n\n# %% [markdown]\n# ## 9. Extracted Fluorescence Traces for Each Cell\n#\n# Fluorescence traces for each cell over time are found in `processing['ophys'].data_interfaces['Fluorescence']['RoiResponseSeries']`.\n# Let's plot these for all cells in this session.\n\n# %%\n# Access ROI fluorescence traces (dF/F)\nroi_response = nwb.processing[\"ophys\"].data_interfaces[\"Fluorescence\"].roi_response_series[\"RoiResponseSeries\"]\ntraces = roi_response.data[:]  # shape (5185, 11)\ntime = np.arange(traces.shape[0]) / roi_response.rate  # seconds\n\nplt.figure(figsize=(12, 6))\noffset = 5  # Vertical offset for clarity\nfor i in range(traces.shape[1]):\n    plt.plot(time, traces[:, i] + i*offset, label=f'Cell {i+1}')\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Fluorescence (offset per cell)\")\nplt.title(\"Extracted Fluorescence Traces per Cell (Raw dF/F)\")\nplt.yticks([])\nplt.show()\n\n# %% [markdown]\n# ## 10. Amplitude of Detected Neural Events\n#\n# Optionally, inspect the amplitude of detected events in each cell (from `EventAmplitude`). This can help highlight detected calcium transients (e.g., putative spikes or bursts).\n\n# %%\nevent_amp = nwb.processing[\"ophys\"].data_interfaces[\"EventAmplitude\"]\nevent_traces = event_amp.data[:]  # shape (5185, 11)\n\nplt.figure(figsize=(12, 6))\nfor i in range(event_traces.shape[1]):\n    plt.plot(time, event_traces[:, i] + i*offset, label=f'Cell {i+1}')\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Event Amplitude (offset per cell)\")\nplt.title(\"Neural Event Amplitude Traces per Cell\")\nplt.yticks([])\nplt.show()\n\n# %% [markdown]\n# ## 11. Summary and Next Steps\n#\n# You've now loaded a remote NWB calcium imaging dataset, visualized cell masks, and plotted fluorescence traces for all segmented cells in a session from Dandiset 001174!\n#\n# **To explore further, you might:**\n# - Repeat these steps on other sessions or subjects\n# - Analyze co-activation or correlations between cells\n# - Relate neural activity to behavioral events (if available in metadata)\n#\n# For more details about this Dandiset, see the [official DANDI Archive page](https://dandiarchive.org/dandiset/001174/0.250331.2218) and associated publications.\n#\n# ---\n#\n# *Remember: This notebook was produced with AI assistance. Please verify code, visualizations, and scientific interpretations for your use case.*\n</notebook>\n"
  }
]