[
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata about Dandiset 001354 version 0.250312.0036."
      },
      {
        "type": "text",
        "text": "{\n  \"id\": \"DANDI:001354/0.250312.0036\",\n  \"doi\": \"10.48324/dandi.001354/0.250312.0036\",\n  \"url\": \"https://dandiarchive.org/dandiset/001354/0.250312.0036\",\n  \"name\": \"Hippocampal neuronal responses to programmable antigen-gated G-protein-coupled engineered receptor activation\",\n  \"about\": [],\n  \"access\": [\n    {\n      \"status\": \"dandi:OpenAccess\",\n      \"schemaKey\": \"AccessRequirements\"\n    }\n  ],\n  \"license\": [\n    \"spdx:CC-BY-4.0\"\n  ],\n  \"version\": \"0.250312.0036\",\n  \"@context\": \"https://raw.githubusercontent.com/dandi/schema/master/releases/0.6.9/context.json\",\n  \"citation\": \"Klein, Peter (2025) Hippocampal neuronal responses to programmable antigen-gated G-protein-coupled engineered receptor activation (Version 0.250312.0036) [Data set]. DANDI Archive. https://doi.org/10.48324/dandi.001354/0.250312.0036\",\n  \"keywords\": [\n    \"CA1\",\n    \"PAGER\",\n    \"Chemogenetics\",\n    \"Antigen-gated\"\n  ],\n  \"protocol\": [\n    \"https://doi.org/10.1038/s41586-024-08282-3\"\n  ],\n  \"schemaKey\": \"Dandiset\",\n  \"identifier\": \"DANDI:001354\",\n  \"repository\": \"https://dandiarchive.org\",\n  \"contributor\": [\n    {\n      \"name\": \"Klein, Peter\",\n      \"email\": \"kleinp@stanford.edu\",\n      \"roleName\": [\n        \"dcite:ContactPerson\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"affiliation\": [],\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"National Institute of Mental Health\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"awardNumber\": \"1R01MH135934\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"Phil and Penny Knight Initiative for Brain Resilience\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"awardNumber\": \"KIG-104\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"National Cancer Institute\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"awardNumber\": \"F32CA257159\",\n      \"includeInCitation\": false\n    }\n  ],\n  \"dateCreated\": \"2025-03-06T01:32:11.648954+00:00\",\n  \"description\": \"This dataset contains single cell electrophysiological recordings of mouse hippocampal CA1 neurons in response to activation of programmable antigen-gated G-protein-coupled engineered receptors. Recorded neurons were transfected with an AAV1/2-hSyn-a-mCherry-PAGER-Gi-P2A-mEGFP and responses were then recorded in response to DCZ (100 nM) or DCZ + soluble mCherry (1 uM) application.\\n\\nThe authors are grateful to the St Jude Children\\u2019s Research Hospital Collaborative Research Consortium on GPCRs, the Chan Zuckerberg Biohub\\u2013San Francisco, Phil and Penny Knight Initiative for Brain Resilience (KIG-104), Stanford Cancer Institute, Wu Tsai Neurosciences Institute of Stanford University and the NIH (MH135934 to A.Y.T. and I.S., F32CA257159 to N.A.K., NS121106 to I.S.) for funding this work. R.T. was supported by the Life Sciences Research Foundation Fellowship (sponsored by Astellas Pharma) and JSPS Overseas Research Fellowship.\",\n  \"publishedBy\": {\n    \"id\": \"urn:uuid:0e8459e8-63c3-4770-bf55-154527ec08c1\",\n    \"name\": \"DANDI publish\",\n    \"endDate\": \"2025-03-12T00:36:29.554905+00:00\",\n    \"schemaKey\": \"PublishActivity\",\n    \"startDate\": \"2025-03-12T00:36:29.554905+00:00\",\n    \"wasAssociatedWith\": [\n      {\n        \"id\": \"urn:uuid:853ca711-3d9a-494a-989b-60c6ace9e25f\",\n        \"name\": \"DANDI API\",\n        \"version\": \"0.1.0\",\n        \"schemaKey\": \"Software\",\n        \"identifier\": \"RRID:SCR_017571\"\n      }\n    ]\n  },\n  \"studyTarget\": [\n    \"To validate the use of programmable antigen-gated G-protein-coupled engineered receptors to allow targeted modulation of neuronal activity.\"\n  ],\n  \"assetsSummary\": {\n    \"species\": [\n      {\n        \"name\": \"Mus musculus - House mouse\",\n        \"schemaKey\": \"SpeciesType\",\n        \"identifier\": \"http://purl.obolibrary.org/obo/NCBITaxon_10090\"\n      }\n    ],\n    \"approach\": [\n      {\n        \"name\": \"electrophysiological approach\",\n        \"schemaKey\": \"ApproachType\"\n      }\n    ],\n    \"schemaKey\": \"AssetsSummary\",\n    \"dataStandard\": [\n      {\n        \"name\": \"Neurodata Without Borders (NWB)\",\n        \"schemaKey\": \"StandardsType\",\n        \"identifier\": \"RRID:SCR_015242\"\n      }\n    ],\n    \"numberOfBytes\": 1676840284,\n    \"numberOfCells\": 50,\n    \"numberOfFiles\": 50,\n    \"numberOfSamples\": 50,\n    \"numberOfSubjects\": 8,\n    \"variableMeasured\": [\n      \"CurrentClampSeries\",\n      \"CurrentClampStimulusSeries\"\n    ],\n    \"measurementTechnique\": [\n      {\n        \"name\": \"current clamp technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      }\n    ]\n  },\n  \"datePublished\": \"2025-03-12T00:36:29.554905+00:00\",\n  \"schemaVersion\": \"0.6.9\",\n  \"ethicsApproval\": [],\n  \"wasGeneratedBy\": [],\n  \"acknowledgement\": \"The authors are grateful to the St Jude Children\\u2019s Research Hospital Collaborative Research Consortium on GPCRs, the Chan Zuckerberg Biohub\\u2013San Francisco, Phil and Penny Knight Initiative for Brain Resilience (KIG-104), Stanford Cancer Institute, Wu Tsai Neurosciences Institute of Stanford University and the NIH (MH135934 to A.Y.T. and I.S., F32CA257159 to N.A.K., NS121106 to I.S.) for funding this work. R.T. was supported by the Life Sciences Research Foundation Fellowship (sponsored by Astellas Pharma) and JSPS Overseas Research Fellowship.\",\n  \"relatedResource\": [\n    {\n      \"url\": \"https://www.nature.com/articles/s41586-024-08282-3\",\n      \"name\": \"Synthetic GPCRs for programmable sensing and control of cell behaviour\",\n      \"relation\": \"dcite:IsPublishedIn\",\n      \"schemaKey\": \"Resource\",\n      \"identifier\": \"https://doi.org/10.1038/s41586-024-08282-3\",\n      \"repository\": \"Nature\",\n      \"resourceType\": \"dcite:JournalArticle\"\n    }\n  ],\n  \"manifestLocation\": [\n    \"https://dandiarchive.s3.amazonaws.com/dandisets/001354/0.250312.0036/assets.yaml\"\n  ]\n}"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is a listing of some of the files in the Dandiset."
      },
      {
        "type": "text",
        "text": "sub-PK-109/sub-PK-109_ses-20240717T180719_slice-2024-07-17-0009_cell-2024-07-17-0009_icephys.nwb\nsub-PK-109/sub-PK-109_ses-20240717T150830_slice-2024-07-17-0001_cell-2024-07-17-0001_icephys.nwb\nsub-PK-109/sub-PK-109_ses-20240717T184616_slice-2024-07-17-0011_cell-2024-07-17-0011_icephys.nwb\nsub-PK-109/sub-PK-109_ses-20240717T164239_slice-2024-07-17-0005_cell-2024-07-17-0005_icephys.nwb\nsub-PK-109/sub-PK-109_ses-20240717T155714_slice-2024-07-17-0003_cell-2024-07-17-0003_icephys.nwb\nsub-PK-110/sub-PK-110_ses-20240723T173444_slice-2024-07-23-0010_cell-2024-07-23-0010_icephys.nwb\nsub-PK-110/sub-PK-110_ses-20240723T195515_slice-2024-07-23-0017_cell-2024-07-23-0017_icephys.nwb\nsub-PK-110/sub-PK-110_ses-20240723T143352_slice-2024-07-23-0003_cell-2024-07-23-0003_icephys.nwb\nsub-PK-110/sub-PK-110_ses-20240723T185020_slice-2024-07-23-0014_cell-2024-07-23-0014_icephys.nwb\nsub-PK-110/sub-PK-110_ses-20240723T160020_slice-2024-07-23-0006_cell-2024-07-23-0006_icephys.nwb"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata and usage information about the file sub-PK-109/sub-PK-109_ses-20240717T180719_slice-2024-07-17-0009_cell-2024-07-17-0009_icephys.nwb."
      },
      {
        "type": "text",
        "text": "\nimport pynwb\nimport h5py\nimport remfile\n\n# Load\nfrom dandi.dandiapi import DandiAPIClient\n\nclient = DandiAPIClient()\ndandiset = client.get_dandiset(\"001354\", \"0.250312.0036\")\nurl = next(dandiset.get_assets_by_glob(\"sub-PK-109/sub-PK-109_ses-20240717T180719_slice-2024-07-17-0009_cell-2024-07-17-0009_icephys.nwb\")).download_url\n\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file)\nnwb = io.read()\n\nnwb # (NWBFile)\nnwb.session_description # (str) Intracellular electrophysiology experiment.\nnwb.identifier # (str) pk2024_07_17_0009\nnwb.session_start_time # (datetime) 2024-07-17T18:07:19-07:00\nnwb.timestamps_reference_time # (datetime) 2024-07-17T18:07:19-07:00\nnwb.file_create_date # (list) [datetime.datetime(2025, 3, 7, 17, 42, 47, 161274, tzinfo=tzoffset(None, -28800))]\nnwb.experimenter # (tuple) ['_']\nnwb.icephys_electrodes # (LabelledDict)\nicephys_electrodes = nwb.icephys_electrodes\nelectrode_0 = icephys_electrodes[\"electrode-0\"]\nelectrode_0 # (IntracellularElectrode)\nelectrode_0.description # (str) no description\nelectrode_0.device # (Device)\nelectrode_0.device.description # (str) no description\nelectrode_1 = icephys_electrodes[\"electrode-1\"]\nelectrode_1 # (IntracellularElectrode)\nelectrode_1.description # (str) no description\nelectrode_1.device # (Device)\nelectrode_1.device.description # (str) no description\nnwb.acquisition # (LabelledDict)\nacquisition = nwb.acquisition\ncurrent_clamp_response_01_ch_0 = acquisition[\"current_clamp-response-01-ch-0\"]\ncurrent_clamp_response_01_ch_0 # (CurrentClampSeries)\ncurrent_clamp_response_01_ch_0.starting_time # (float64) 0.0\ncurrent_clamp_response_01_ch_0.rate # (float64) 20000.0\ncurrent_clamp_response_01_ch_0.resolution # (float64) -1.0\ncurrent_clamp_response_01_ch_0.comments # (str) no comments\ncurrent_clamp_response_01_ch_0.description # (str) Response to: ramp\ncurrent_clamp_response_01_ch_0.conversion # (float64) 3.051757880712104e-05\ncurrent_clamp_response_01_ch_0.offset # (float64) 0.0\ncurrent_clamp_response_01_ch_0.unit # (str) volts\ncurrent_clamp_response_01_ch_0.data # (Dataset) shape (100000,); dtype int16\n# current_clamp_response_01_ch_0.data[:] # Access all data\n# current_clamp_response_01_ch_0.data[0:n] # Access first n elements\ncurrent_clamp_response_01_ch_0.starting_time_unit # (str) seconds\ncurrent_clamp_response_01_ch_0.gain # (float64) nan\ncurrent_clamp_response_01_ch_0.stimulus_description # (str) N/A\ncurrent_clamp_response_01_ch_0.electrode # (IntracellularElectrode)\ncurrent_clamp_response_01_ch_0.electrode.description # (str) no description\ncurrent_clamp_response_01_ch_0.electrode.device # (Device)\ncurrent_clamp_response_01_ch_0.electrode.device.description # (str) no description\ncurrent_clamp_response_01_ch_1 = acquisition[\"current_clamp-response-01-ch-1\"]\ncurrent_clamp_response_01_ch_1 # (CurrentClampSeries)\ncurrent_clamp_response_01_ch_1.starting_time # (float64) 0.0\ncurrent_clamp_response_01_ch_1.rate # (float64) 20000.0\ncurrent_clamp_response_01_ch_1.resolution # (float64) -1.0\ncurrent_clamp_response_01_ch_1.comments # (str) no comments\ncurrent_clamp_response_01_ch_1.description # (str) Response to: ramp\ncurrent_clamp_response_01_ch_1.conversion # (float64) 1.2241307445453604e-13\ncurrent_clamp_response_01_ch_1.offset # (float64) 0.0\ncurrent_clamp_response_01_ch_1.unit # (str) volts\ncurrent_clamp_response_01_ch_1.data # (Dataset) shape (100000,); dtype int16\n# current_clamp_response_01_ch_1.data[:] # Access all data\n# current_clamp_response_01_ch_1.data[0:n] # Access first n elements\ncurrent_clamp_response_01_ch_1.starting_time_unit # (str) seconds\ncurrent_clamp_response_01_ch_1.gain # (float64) nan\ncurrent_clamp_response_01_ch_1.stimulus_description # (str) N/A\ncurrent_clamp_response_01_ch_1.electrode # (IntracellularElectrode)\ncurrent_clamp_response_01_ch_1.electrode.description # (str) no description\ncurrent_clamp_response_01_ch_1.electrode.device # (Device)\ncurrent_clamp_response_01_ch_1.electrode.device.description # (str) no description\ncurrent_clamp_response_02_ch_0 = acquisition[\"current_clamp-response-02-ch-0\"]\ncurrent_clamp_response_02_ch_0 # (CurrentClampSeries)\ncurrent_clamp_response_02_ch_0.starting_time # (float64) 5.0\ncurrent_clamp_response_02_ch_0.rate # (float64) 20000.0\ncurrent_clamp_response_02_ch_0.resolution # (float64) -1.0\ncurrent_clamp_response_02_ch_0.comments # (str) no comments\ncurrent_clamp_response_02_ch_0.description # (str) Response to: ramp\ncurrent_clamp_response_02_ch_0.conversion # (float64) 3.051757880712104e-05\ncurrent_clamp_response_02_ch_0.offset # (float64) 0.0\ncurrent_clamp_response_02_ch_0.unit # (str) volts\ncurrent_clamp_response_02_ch_0.data # (Dataset) shape (100000,); dtype int16\n# current_clamp_response_02_ch_0.data[:] # Access all data\n# current_clamp_response_02_ch_0.data[0:n] # Access first n elements\ncurrent_clamp_response_02_ch_0.starting_time_unit # (str) seconds\ncurrent_clamp_response_02_ch_0.gain # (float64) nan\ncurrent_clamp_response_02_ch_0.stimulus_description # (str) N/A\ncurrent_clamp_response_02_ch_0.electrode # (IntracellularElectrode)\ncurrent_clamp_response_02_ch_0.electrode.description # (str) no description\ncurrent_clamp_response_02_ch_0.electrode.device # (Device)\ncurrent_clamp_response_02_ch_0.electrode.device.description # (str) no description\ncurrent_clamp_response_02_ch_1 = acquisition[\"current_clamp-response-02-ch-1\"]\ncurrent_clamp_response_02_ch_1 # (CurrentClampSeries)\ncurrent_clamp_response_02_ch_1.starting_time # (float64) 5.0\ncurrent_clamp_response_02_ch_1.rate # (float64) 20000.0\ncurrent_clamp_response_02_ch_1.resolution # (float64) -1.0\ncurrent_clamp_response_02_ch_1.comments # (str) no comments\ncurrent_clamp_response_02_ch_1.description # (str) Response to: ramp\ncurrent_clamp_response_02_ch_1.conversion # (float64) 1.2241307445453604e-13\ncurrent_clamp_response_02_ch_1.offset # (float64) 0.0\ncurrent_clamp_response_02_ch_1.unit # (str) volts\ncurrent_clamp_response_02_ch_1.data # (Dataset) shape (100000,); dtype int16\n# current_clamp_response_02_ch_1.data[:] # Access all data\n# current_clamp_response_02_ch_1.data[0:n] # Access first n elements\ncurrent_clamp_response_02_ch_1.starting_time_unit # (str) seconds\ncurrent_clamp_response_02_ch_1.gain # (float64) nan\ncurrent_clamp_response_02_ch_1.stimulus_description # (str) N/A\ncurrent_clamp_response_02_ch_1.electrode # (IntracellularElectrode)\ncurrent_clamp_response_02_ch_1.electrode.description # (str) no description\ncurrent_clamp_response_02_ch_1.electrode.device # (Device)\ncurrent_clamp_response_02_ch_1.electrode.device.description # (str) no description\ncurrent_clamp_response_03_ch_0 = acquisition[\"current_clamp-response-03-ch-0\"]\ncurrent_clamp_response_03_ch_0 # (CurrentClampSeries)\ncurrent_clamp_response_03_ch_0.starting_time # (float64) 10.0\ncurrent_clamp_response_03_ch_0.rate # (float64) 20000.0\ncurrent_clamp_response_03_ch_0.resolution # (float64) -1.0\ncurrent_clamp_response_03_ch_0.comments # (str) no comments\ncurrent_clamp_response_03_ch_0.description # (str) Response to: ramp\ncurrent_clamp_response_03_ch_0.conversion # (float64) 3.051757880712104e-05\ncurrent_clamp_response_03_ch_0.offset # (float64) 0.0\ncurrent_clamp_response_03_ch_0.unit # (str) volts\ncurrent_clamp_response_03_ch_0.data # (Dataset) shape (100000,); dtype int16\n# current_clamp_response_03_ch_0.data[:] # Access all data\n# current_clamp_response_03_ch_0.data[0:n] # Access first n elements\ncurrent_clamp_response_03_ch_0.starting_time_unit # (str) seconds\ncurrent_clamp_response_03_ch_0.gain # (float64) nan\ncurrent_clamp_response_03_ch_0.stimulus_description # (str) N/A\ncurrent_clamp_response_03_ch_0.electrode # (IntracellularElectrode)\ncurrent_clamp_response_03_ch_0.electrode.description # (str) no description\ncurrent_clamp_response_03_ch_0.electrode.device # (Device)\ncurrent_clamp_response_03_ch_0.electrode.device.description # (str) no description\ncurrent_clamp_response_03_ch_1 = acquisition[\"current_clamp-response-03-ch-1\"]\ncurrent_clamp_response_03_ch_1 # (CurrentClampSeries)\ncurrent_clamp_response_03_ch_1.starting_time # (float64) 10.0\ncurrent_clamp_response_03_ch_1.rate # (float64) 20000.0\ncurrent_clamp_response_03_ch_1.resolution # (float64) -1.0\ncurrent_clamp_response_03_ch_1.comments # (str) no comments\ncurrent_clamp_response_03_ch_1.description # (str) Response to: ramp\ncurrent_clamp_response_03_ch_1.conversion # (float64) 1.2241307445453604e-13\ncurrent_clamp_response_03_ch_1.offset # (float64) 0.0\ncurrent_clamp_response_03_ch_1.unit # (str) volts\ncurrent_clamp_response_03_ch_1.data # (Dataset) shape (100000,); dtype int16\n# current_clamp_response_03_ch_1.data[:] # Access all data\n# current_clamp_response_03_ch_1.data[0:n] # Access first n elements\ncurrent_clamp_response_03_ch_1.starting_time_unit # (str) seconds\ncurrent_clamp_response_03_ch_1.gain # (float64) nan\ncurrent_clamp_response_03_ch_1.stimulus_description # (str) N/A\ncurrent_clamp_response_03_ch_1.electrode # (IntracellularElectrode)\ncurrent_clamp_response_03_ch_1.electrode.description # (str) no description\ncurrent_clamp_response_03_ch_1.electrode.device # (Device)\ncurrent_clamp_response_03_ch_1.electrode.device.description # (str) no description\ncurrent_clamp_response_04_ch_0 = acquisition[\"current_clamp-response-04-ch-0\"]\ncurrent_clamp_response_04_ch_0 # (CurrentClampSeries)\ncurrent_clamp_response_04_ch_0.starting_time # (float64) 15.0\ncurrent_clamp_response_04_ch_0.rate # (float64) 20000.0\ncurrent_clamp_response_04_ch_0.resolution # (float64) -1.0\ncurrent_clamp_response_04_ch_0.comments # (str) no comments\ncurrent_clamp_response_04_ch_0.description # (str) Response to: ramp\ncurrent_clamp_response_04_ch_0.conversion # (float64) 3.051757880712104e-05\ncurrent_clamp_response_04_ch_0.offset # (float64) 0.0\ncurrent_clamp_response_04_ch_0.unit # (str) volts\ncurrent_clamp_response_04_ch_0.data # (Dataset) shape (100000,); dtype int16\n# current_clamp_response_04_ch_0.data[:] # Access all data\n# current_clamp_response_04_ch_0.data[0:n] # Access first n elements\ncurrent_clamp_response_04_ch_0.starting_time_unit # (str) seconds\ncurrent_clamp_response_04_ch_0.gain # (float64) nan\ncurrent_clamp_response_04_ch_0.stimulus_description # (str) N/A\ncurrent_clamp_response_04_ch_0.electrode # (IntracellularElectrode)\ncurrent_clamp_response_04_ch_0.electrode.description # (str) no description\ncurrent_clamp_response_04_ch_0.electrode.device # (Device)\ncurrent_clamp_response_04_ch_0.electrode.device.description # (str) no description\ncurrent_clamp_response_04_ch_1 = acquisition[\"current_clamp-response-04-ch-1\"]\ncurrent_clamp_response_04_ch_1 # (CurrentClampSeries)\ncurrent_clamp_response_04_ch_1.starting_time # (float64) 15.0\ncurrent_clamp_response_04_ch_1.rate # (float64) 20000.0\ncurrent_clamp_response_04_ch_1.resolution # (float64) -1.0\ncurrent_clamp_response_04_ch_1.comments # (str) no comments\ncurrent_clamp_response_04_ch_1.description # (str) Response to: ramp\ncurrent_clamp_response_04_ch_1.conversion # (float64) 1.2241307445453604e-13\ncurrent_clamp_response_04_ch_1.offset # (float64) 0.0\ncurrent_clamp_response_04_ch_1.unit # (str) volts\ncurrent_clamp_response_04_ch_1.data # (Dataset) shape (100000,); dtype int16\n# current_clamp_response_04_ch_1.data[:] # Access all data\n# current_clamp_response_04_ch_1.data[0:n] # Access first n elements\ncurrent_clamp_response_04_ch_1.starting_time_unit # (str) seconds\ncurrent_clamp_response_04_ch_1.gain # (float64) nan\ncurrent_clamp_response_04_ch_1.stimulus_description # (str) N/A\ncurrent_clamp_response_04_ch_1.electrode # (IntracellularElectrode)\ncurrent_clamp_response_04_ch_1.electrode.description # (str) no description\ncurrent_clamp_response_04_ch_1.electrode.device # (Device)\ncurrent_clamp_response_04_ch_1.electrode.device.description # (str) no description\n# ...\n# Other fields: current_clamp-response-05-ch-0, current_clamp-response-05-ch-1, current_clamp-response-06-ch-0, current_clamp-response-06-ch-1, current_clamp-response-07-ch-0, current_clamp-response-07-ch-1, current_clamp-response-08-ch-0, current_clamp-response-08-ch-1, current_clamp-response-09-ch-0, current_clamp-response-09-ch-1, current_clamp-response-10-ch-0, current_clamp-response-10-ch-1, current_clamp-response-100-ch-0, current_clamp-response-100-ch-1, current_clamp-response-101-ch-0\n# ... and 601 more fields\nnwb.stimulus # (LabelledDict)\nstimulus = nwb.stimulus\nstimulus_01_ch_0 = stimulus[\"stimulus-01-ch-0\"]\nstimulus_01_ch_0 # (CurrentClampStimulusSeries)\nstimulus_01_ch_0.starting_time # (float64) 0.0\nstimulus_01_ch_0.rate # (float64) 20000.0\nstimulus_01_ch_0.resolution # (float64) -1.0\nstimulus_01_ch_0.comments # (str) no comments\nstimulus_01_ch_0.description # (str) Stim type: ramp\nstimulus_01_ch_0.conversion # (float64) 1e-12\nstimulus_01_ch_0.offset # (float64) 0.0\nstimulus_01_ch_0.unit # (str) amperes\nstimulus_01_ch_0.data # (Dataset) shape (100000,); dtype float64\n# stimulus_01_ch_0.data[:] # Access all data\n# stimulus_01_ch_0.data[0:n] # Access first n elements\nstimulus_01_ch_0.starting_time_unit # (str) seconds\nstimulus_01_ch_0.gain # (float64) nan\nstimulus_01_ch_0.stimulus_description # (str) N/A\nstimulus_01_ch_0.electrode # (IntracellularElectrode)\nstimulus_01_ch_0.electrode.description # (str) no description\nstimulus_01_ch_0.electrode.device # (Device)\nstimulus_01_ch_0.electrode.device.description # (str) no description\nstimulus_01_ch_1 = stimulus[\"stimulus-01-ch-1\"]\nstimulus_01_ch_1 # (CurrentClampStimulusSeries)\nstimulus_01_ch_1.starting_time # (float64) 0.0\nstimulus_01_ch_1.rate # (float64) 20000.0\nstimulus_01_ch_1.resolution # (float64) -1.0\nstimulus_01_ch_1.comments # (str) no comments\nstimulus_01_ch_1.description # (str) Stim type: ramp\nstimulus_01_ch_1.conversion # (float64) 1e-12\nstimulus_01_ch_1.offset # (float64) 0.0\nstimulus_01_ch_1.unit # (str) amperes\nstimulus_01_ch_1.data # (Dataset) shape (100000,); dtype float64\n# stimulus_01_ch_1.data[:] # Access all data\n# stimulus_01_ch_1.data[0:n] # Access first n elements\nstimulus_01_ch_1.starting_time_unit # (str) seconds\nstimulus_01_ch_1.gain # (float64) nan\nstimulus_01_ch_1.stimulus_description # (str) N/A\nstimulus_01_ch_1.electrode # (IntracellularElectrode)\nstimulus_01_ch_1.electrode.description # (str) no description\nstimulus_01_ch_1.electrode.device # (Device)\nstimulus_01_ch_1.electrode.device.description # (str) no description\nstimulus_02_ch_0 = stimulus[\"stimulus-02-ch-0\"]\nstimulus_02_ch_0 # (CurrentClampStimulusSeries)\nstimulus_02_ch_0.starting_time # (float64) 5.0\nstimulus_02_ch_0.rate # (float64) 20000.0\nstimulus_02_ch_0.resolution # (float64) -1.0\nstimulus_02_ch_0.comments # (str) no comments\nstimulus_02_ch_0.description # (str) Stim type: ramp\nstimulus_02_ch_0.conversion # (float64) 1e-12\nstimulus_02_ch_0.offset # (float64) 0.0\nstimulus_02_ch_0.unit # (str) amperes\nstimulus_02_ch_0.data # (Dataset) shape (100000,); dtype float64\n# stimulus_02_ch_0.data[:] # Access all data\n# stimulus_02_ch_0.data[0:n] # Access first n elements\nstimulus_02_ch_0.starting_time_unit # (str) seconds\nstimulus_02_ch_0.gain # (float64) nan\nstimulus_02_ch_0.stimulus_description # (str) N/A\nstimulus_02_ch_0.electrode # (IntracellularElectrode)\nstimulus_02_ch_0.electrode.description # (str) no description\nstimulus_02_ch_0.electrode.device # (Device)\nstimulus_02_ch_0.electrode.device.description # (str) no description\nstimulus_02_ch_1 = stimulus[\"stimulus-02-ch-1\"]\nstimulus_02_ch_1 # (CurrentClampStimulusSeries)\nstimulus_02_ch_1.starting_time # (float64) 5.0\nstimulus_02_ch_1.rate # (float64) 20000.0\nstimulus_02_ch_1.resolution # (float64) -1.0\nstimulus_02_ch_1.comments # (str) no comments\nstimulus_02_ch_1.description # (str) Stim type: ramp\nstimulus_02_ch_1.conversion # (float64) 1e-12\nstimulus_02_ch_1.offset # (float64) 0.0\nstimulus_02_ch_1.unit # (str) amperes\nstimulus_02_ch_1.data # (Dataset) shape (100000,); dtype float64\n# stimulus_02_ch_1.data[:] # Access all data\n# stimulus_02_ch_1.data[0:n] # Access first n elements\nstimulus_02_ch_1.starting_time_unit # (str) seconds\nstimulus_02_ch_1.gain # (float64) nan\nstimulus_02_ch_1.stimulus_description # (str) N/A\nstimulus_02_ch_1.electrode # (IntracellularElectrode)\nstimulus_02_ch_1.electrode.description # (str) no description\nstimulus_02_ch_1.electrode.device # (Device)\nstimulus_02_ch_1.electrode.device.description # (str) no description\nstimulus_03_ch_0 = stimulus[\"stimulus-03-ch-0\"]\nstimulus_03_ch_0 # (CurrentClampStimulusSeries)\nstimulus_03_ch_0.starting_time # (float64) 10.0\nstimulus_03_ch_0.rate # (float64) 20000.0\nstimulus_03_ch_0.resolution # (float64) -1.0\nstimulus_03_ch_0.comments # (str) no comments\nstimulus_03_ch_0.description # (str) Stim type: ramp\nstimulus_03_ch_0.conversion # (float64) 1e-12\nstimulus_03_ch_0.offset # (float64) 0.0\nstimulus_03_ch_0.unit # (str) amperes\nstimulus_03_ch_0.data # (Dataset) shape (100000,); dtype float64\n# stimulus_03_ch_0.data[:] # Access all data\n# stimulus_03_ch_0.data[0:n] # Access first n elements\nstimulus_03_ch_0.starting_time_unit # (str) seconds\nstimulus_03_ch_0.gain # (float64) nan\nstimulus_03_ch_0.stimulus_description # (str) N/A\nstimulus_03_ch_0.electrode # (IntracellularElectrode)\nstimulus_03_ch_0.electrode.description # (str) no description\nstimulus_03_ch_0.electrode.device # (Device)\nstimulus_03_ch_0.electrode.device.description # (str) no description\nstimulus_03_ch_1 = stimulus[\"stimulus-03-ch-1\"]\nstimulus_03_ch_1 # (CurrentClampStimulusSeries)\nstimulus_03_ch_1.starting_time # (float64) 10.0\nstimulus_03_ch_1.rate # (float64) 20000.0\nstimulus_03_ch_1.resolution # (float64) -1.0\nstimulus_03_ch_1.comments # (str) no comments\nstimulus_03_ch_1.description # (str) Stim type: ramp\nstimulus_03_ch_1.conversion # (float64) 1e-12\nstimulus_03_ch_1.offset # (float64) 0.0\nstimulus_03_ch_1.unit # (str) amperes\nstimulus_03_ch_1.data # (Dataset) shape (100000,); dtype float64\n# stimulus_03_ch_1.data[:] # Access all data\n# stimulus_03_ch_1.data[0:n] # Access first n elements\nstimulus_03_ch_1.starting_time_unit # (str) seconds\nstimulus_03_ch_1.gain # (float64) nan\nstimulus_03_ch_1.stimulus_description # (str) N/A\nstimulus_03_ch_1.electrode # (IntracellularElectrode)\nstimulus_03_ch_1.electrode.description # (str) no description\nstimulus_03_ch_1.electrode.device # (Device)\nstimulus_03_ch_1.electrode.device.description # (str) no description\nstimulus_04_ch_0 = stimulus[\"stimulus-04-ch-0\"]\nstimulus_04_ch_0 # (CurrentClampStimulusSeries)\nstimulus_04_ch_0.starting_time # (float64) 15.0\nstimulus_04_ch_0.rate # (float64) 20000.0\nstimulus_04_ch_0.resolution # (float64) -1.0\nstimulus_04_ch_0.comments # (str) no comments\nstimulus_04_ch_0.description # (str) Stim type: ramp\nstimulus_04_ch_0.conversion # (float64) 1e-12\nstimulus_04_ch_0.offset # (float64) 0.0\nstimulus_04_ch_0.unit # (str) amperes\nstimulus_04_ch_0.data # (Dataset) shape (100000,); dtype float64\n# stimulus_04_ch_0.data[:] # Access all data\n# stimulus_04_ch_0.data[0:n] # Access first n elements\nstimulus_04_ch_0.starting_time_unit # (str) seconds\nstimulus_04_ch_0.gain # (float64) nan\nstimulus_04_ch_0.stimulus_description # (str) N/A\nstimulus_04_ch_0.electrode # (IntracellularElectrode)\nstimulus_04_ch_0.electrode.description # (str) no description\nstimulus_04_ch_0.electrode.device # (Device)\nstimulus_04_ch_0.electrode.device.description # (str) no description\nstimulus_04_ch_1 = stimulus[\"stimulus-04-ch-1\"]\nstimulus_04_ch_1 # (CurrentClampStimulusSeries)\nstimulus_04_ch_1.starting_time # (float64) 15.0\nstimulus_04_ch_1.rate # (float64) 20000.0\nstimulus_04_ch_1.resolution # (float64) -1.0\nstimulus_04_ch_1.comments # (str) no comments\nstimulus_04_ch_1.description # (str) Stim type: ramp\nstimulus_04_ch_1.conversion # (float64) 1e-12\nstimulus_04_ch_1.offset # (float64) 0.0\nstimulus_04_ch_1.unit # (str) amperes\nstimulus_04_ch_1.data # (Dataset) shape (100000,); dtype float64\n# stimulus_04_ch_1.data[:] # Access all data\n# stimulus_04_ch_1.data[0:n] # Access first n elements\nstimulus_04_ch_1.starting_time_unit # (str) seconds\nstimulus_04_ch_1.gain # (float64) nan\nstimulus_04_ch_1.stimulus_description # (str) N/A\nstimulus_04_ch_1.electrode # (IntracellularElectrode)\nstimulus_04_ch_1.electrode.description # (str) no description\nstimulus_04_ch_1.electrode.device # (Device)\nstimulus_04_ch_1.electrode.device.description # (str) no description\n# ...\n# Other fields: stimulus-05-ch-0, stimulus-05-ch-1, stimulus-06-ch-0, stimulus-06-ch-1, stimulus-07-ch-0, stimulus-07-ch-1, stimulus-08-ch-0, stimulus-08-ch-1, stimulus-09-ch-0, stimulus-09-ch-1, stimulus-10-ch-0, stimulus-10-ch-1, stimulus-100-ch-0, stimulus-100-ch-1, stimulus-101-ch-0\n# ... and 601 more fields\nnwb.devices # (LabelledDict)\ndevices = nwb.devices\nDeviceIcephys = devices[\"DeviceIcephys\"]\nDeviceIcephys # (Device)\nDeviceIcephys.description # (str) no description\nnwb.lab_meta_data # (LabelledDict)\nlab_meta_data = nwb.lab_meta_data\nDandiIcephysMetadata = lab_meta_data[\"DandiIcephysMetadata\"]\nDandiIcephysMetadata # (DandiIcephysMetadata)\nDandiIcephysMetadata.cell_id # (str) 2024_07_17_0009\nDandiIcephysMetadata.slice_id # (str) 2024_07_17_0009\nDandiIcephysMetadata.targeted_layer # (str) CA1\nDandiIcephysMetadata.inferred_layer # (str) \nnwb.lab # (str) _\nnwb.institution # (str) _\nnwb.source_script # (str) Created using NeuroConv v0.7.1\nnwb.source_script_file_name # (str) C:\\Users\\pklei\\anaconda3\\Lib\\site-packages\\neuroconv\\basedatainterface.py\nnwb.subject # (Subject)\nnwb.subject.age__reference # (str) birth\nnwb.subject.sex # (str) F\nnwb.subject.species # (str) Mus musculus\nnwb.subject.subject_id # (str) PK-109\nnwb.subject.date_of_birth # (datetime) 2024-04-07T00:00:00-07:00\nnwb.intracellular_recordings # (IntracellularRecordingsTable)\nnwb.intracellular_recordings.description # (str) A table to group together a stimulus and response from a single electrode and a single simultaneo...\nnwb.intracellular_recordings.colnames # (tuple) []\nnwb.intracellular_recordings.columns # (tuple) []\nnwb.intracellular_recordings.category_tables # (OrderedDict)\nnwb.intracellular_recordings.id # (ElementIdentifiers)\n# nwb.intracellular_recordings.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 624 rows and 0 columns\n# nwb.intracellular_recordings.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nnwb.icephys_simultaneous_recordings # (SimultaneousRecordingsTable)\nnwb.icephys_simultaneous_recordings.description # (str) A table for grouping different intracellular recordings from theIntracellularRecordingsTable tabl...\nnwb.icephys_simultaneous_recordings.colnames # (tuple) ['recordings']\nnwb.icephys_simultaneous_recordings.columns # (tuple)\nnwb.icephys_simultaneous_recordings.id # (ElementIdentifiers)\n# nwb.icephys_simultaneous_recordings.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 312 rows and 2 columns\n# nwb.icephys_simultaneous_recordings.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nnwb.icephys_simultaneous_recordings.recordings # (VectorIndex) Index for VectorData 'recordings'\n# nwb.icephys_simultaneous_recordings.recordings_index[0] # (DataFrame)\n# nwb.icephys_simultaneous_recordings.recordings_index[1] # (DataFrame)\n# nwb.icephys_simultaneous_recordings.recordings_index[2] # (DataFrame)\n# nwb.icephys_simultaneous_recordings.recordings_index[3] # (DataFrame)\n# ...\nnwb.icephys_sequential_recordings # (SequentialRecordingsTable)\nnwb.icephys_sequential_recordings.description # (str) A table for grouping different intracellular recording simultaneous_recordings from the Simultane...\nnwb.icephys_sequential_recordings.colnames # (tuple) ['simultaneous_recordings', 'stimulus_type']\nnwb.icephys_sequential_recordings.columns # (tuple)\nnwb.icephys_sequential_recordings.id # (ElementIdentifiers)\n# nwb.icephys_sequential_recordings.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 1 rows and 3 columns\n# nwb.icephys_sequential_recordings.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nnwb.icephys_sequential_recordings.simultaneous_recordings # (VectorIndex) Index for VectorData 'simultaneous_recordings'\n# nwb.icephys_sequential_recordings.simultaneous_recordings_index[0] # (DataFrame)\nnwb.icephys_sequential_recordings.stimulus_type # (VectorData) Column storing the type of stimulus used for the sequential recording"
      }
    ]
  },
  {
    "role": "user",
    "content": "Please summarize the above information in a jupytext notebook that introduces dandiset 001354 using the format described below.\n\nThe purpose of the notebook is to help researchers explore the dandiset and get started with a reanalysis.\n\nStart with an appropriate title for the notebook, such as \"Exploring Dandiset 001354: ...\" (that should be a markdown heading).\n\nInform the user that the notebook was generated with the assistance of AI, and that they should be cautious when interpreting the code or results.\n\nProvide an overview of the Dandiset. Include a link to the Dandiset of the form https://dandiarchive.org/dandiset/001354/0.250312.0036.\n\nSummarize what the notebook covers.\n\nList the packages that are required to run the notebook. Assume that these are already installed on the user's system. Do not include any pip install commands in the notebook.\n\nShow how to use the DANDI API to load assets.\n\nShow how to load and visualize data from the dandiset based on the above chat.\n\nGenerate all the good quality plots (without being redundant).\n\nLoad NWB data by streaming the remote file (as done in the chat) rather than downloading it.\n\nDo not use any functionality of pynwb or dandi that is not covered in the chat.\n\nYou should stick to material that is covered in the chat and do not hallucinate.\n\nThroughout the notebook, include explanatory markdown cells that guide the user through the process.\n\nThe notebook should be well-documented, and follow best practices Include comments in code cells to explain what each step does.\n\nThe Jupytext should use `# %% [markdown]` for markdown cells and `# %%` delimiters for the code cells.\n\nYour output should be in the format:\n\n<notebook>\nThe text of the jupytext notebook should appear here.\n</notebook>\n\nNo other text should be included in the response.\n"
  },
  {
    "role": "assistant",
    "content": "<notebook>\n# %% [markdown]\n# # Exploring Dandiset 001354: Hippocampal Neuronal Responses to Programmable Antigen-Gated GPCR Activation\n#\n# *This notebook was generated with the assistance of AI. Please exercise caution when interpreting the code or the results, and carefully check that data handling and visuals are suitable for your needs.*\n\n# %% [markdown]\n# ## Overview\n#\n# This notebook is designed to help researchers explore [Dandiset 001354 (version 0.250312.0036)](https://dandiarchive.org/dandiset/001354/0.250312.0036):\n#\n# **Title:** Hippocampal neuronal responses to programmable antigen-gated G-protein-coupled engineered receptor activation\n#\n# **Citation:**\n# > Klein, Peter (2025) Hippocampal neuronal responses to programmable antigen-gated G-protein-coupled engineered receptor activation (Version 0.250312.0036) [Data set]. DANDI Archive. https://doi.org/10.48324/dandi.001354/0.250312.0036\n#\n# The dataset comprises single cell whole-cell current clamp recordings from mouse hippocampal CA1 neurons expressing programmable antigen-gated engineered GPCRs. The data are stored in the NWB (Neurodata Without Borders) format.\n#\n# **Notebook Covers:**\n# - Required libraries\n# - How to connect to DANDI, list and select data files\n# - How to stream NWB files and load data for exploration\n# - Visualization of a few example electrophysiological traces and current stimuli\n# - Brief exploration of relevant metadata\n\n# %% [markdown]\n# ## Required Packages\n#\n# To run this notebook you need:\n# - `dandi` (DANDI API client)\n# - `remfile` (for remote file streaming)\n# - `h5py` (access HDF5/NWB file structures)\n# - `pynwb` (NWB loader)\n# - `matplotlib` (for visualization)\n#\n# These packages are assumed to be already installed in your Python environment.\n\n# %% [markdown]\n# ## 1. List Available Files and Assets in the Dandiset\n\n# %%\nfrom dandi.dandiapi import DandiAPIClient\n\n# Connect to the specified Dandiset (version as in chat)\ndandiset_id = \"001354\"\ndandiset_version = \"0.250312.0036\"\nwith DandiAPIClient() as client:\n    dandiset = client.get_dandiset(dandiset_id, dandiset_version)\n    # List the first few NWB asset filepaths\n    asset_paths = [a.path for a in dandiset.get_assets()]\n    print(\"Number of files in Dandiset:\", len(asset_paths))\n    print(\"First 5 file paths:\")\n    for p in asset_paths[:5]:\n        print(\" -\", p)\n\n# %% [markdown]\n# ## 2. Load an NWB File by Streaming from the Remote Archive\n#\n# The NWB files can be loaded directly by streaming\u2014no download required.\n# In this example, we'll explore data from `sub-PK-109_ses-20240717T180719_slice-2024-07-17-0009_cell-2024-07-17-0009_icephys.nwb`.\n\n# %%\nimport remfile\nimport h5py\nimport pynwb\n\nselect_relpath = \"sub-PK-109/sub-PK-109_ses-20240717T180719_slice-2024-07-17-0009_cell-2024-07-17-0009_icephys.nwb\"\n\n# Use DANDI API to get download URL for the remote file\nwith DandiAPIClient() as client:\n    dandiset = client.get_dandiset(dandiset_id, dandiset_version)\n    url = next(dandiset.get_assets_by_glob(select_relpath)).download_url\n\n# Stream and open as an h5py file, load with pynwb\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file)\nnwb = io.read()\n\n# %% [markdown]\n# ## 3. Inspect Main Metadata Fields\n#\n# Let's look at some of the most important metadata to contextualize the recording.\n\n# %%\nfrom pprint import pprint\n\nprint(\"NWB session description:\", nwb.session_description)\nprint(\"Session start time:\", nwb.session_start_time)\nprint(\"Subject info:\")\nprint(\"  ID:\", getattr(nwb.subject, 'subject_id', None))\nprint(\"  Sex:\", getattr(nwb.subject, 'sex', None))\nprint(\"  Age reference:\", getattr(nwb.subject, 'age__reference', None))\nprint(\"  Date of birth:\", getattr(nwb.subject, 'date_of_birth', None))\nprint(\"  Species:\", getattr(nwb.subject, 'species', None))\nprint(\"Targeted layer:\", nwb.lab_meta_data[\"DandiIcephysMetadata\"].targeted_layer)\nprint(\"File identifier:\", nwb.identifier)\nprint(\"NWB file creation date:\", nwb.file_create_date)\nprint(\"Source script:\", nwb.source_script)\n\n# %% [markdown]\n# ## 4. List Available Data Series\n#\n# Each \"CurrentClampSeries\" contains a response to a stimulus protocol; here we briefly show the series available in `.acquisition` and `.stimulus`.\n\n# %%\n# List a few response and stimulus series\nprint(\"Number of acquisition (response) series:\", len(nwb.acquisition))\nprint(\"First 5 acquisition keys:\", list(nwb.acquisition.keys())[:5])\nprint(\"Number of stimulus series:\", len(nwb.stimulus))\nprint(\"First 5 stimulus keys:\", list(nwb.stimulus.keys())[:5])\n\n# %% [markdown]\n# ## 5. Visualize Example Traces\n#\n# Let's plot several example traces from this experiment. We'll show:\n# - The current clamp stimulus (command current)\n# - The corresponding membrane potential response\n#\n# We'll plot both channels for a given \"sweep\", for the first few sweeps.\n\n# %%\nimport matplotlib.pyplot as plt\n\n# Helper to plot stimulus-response for a given sweep index\ndef plot_sweep(sweep_idx):\n    stim_key_0 = f\"stimulus-0{sweep_idx+1}-ch-0\"\n    stim_key_1 = f\"stimulus-0{sweep_idx+1}-ch-1\"\n    resp_key_0 = f\"current_clamp-response-0{sweep_idx+1}-ch-0\"\n    resp_key_1 = f\"current_clamp-response-0{sweep_idx+1}-ch-1\"\n    \n    # Get objects\n    stim0 = nwb.stimulus[stim_key_0]\n    stim1 = nwb.stimulus[stim_key_1]\n    resp0 = nwb.acquisition[resp_key_0]\n    resp1 = nwb.acquisition[resp_key_1]\n\n    # Pull data for ch 0\n    t0 = stim0.starting_time + (np.arange(stim0.data.shape[0]) / stim0.rate)\n    t1 = stim1.starting_time + (np.arange(stim1.data.shape[0]) / stim1.rate)\n\n    fig, axs = plt.subplots(2, 2, figsize=(11, 5), sharex='col')\n    fig.suptitle(f\"Sweep {sweep_idx+1:02d}: stimulus & response, both channels\")\n    \n    # Channel 0\n    axs[0,0].plot(t0, stim0.data[:]*1e12)  # show in pA\n    axs[0,0].set_ylabel(\"Current (pA)\")\n    axs[0,0].set_title(stim_key_0)\n    \n    axs[1,0].plot(\n        t0,\n        resp0.data[:]*resp0.conversion*1e3\n    )  # show in mV\n    axs[1,0].set_xlabel(\"Time (s)\")\n    axs[1,0].set_ylabel(\"Voltage (mV)\")\n    axs[1,0].set_title(resp_key_0)\n\n    # Channel 1\n    axs[0,1].plot(t1, stim1.data[:]*1e12)\n    axs[0,1].set_ylabel(\"Current (pA)\")\n    axs[0,1].set_title(stim_key_1)\n    \n    axs[1,1].plot(\n        t1,\n        resp1.data[:]*resp1.conversion*1e3\n    )\n    axs[1,1].set_xlabel(\"Time (s)\")\n    axs[1,1].set_ylabel(\"Voltage (mV)\")\n    axs[1,1].set_title(resp_key_1)\n\n    plt.tight_layout()\n    plt.show()\n\nimport numpy as np\n\n# Plot sweeps 0, 1, 2, and 3 as demonstrators\nfor j in range(4):\n    plot_sweep(j)\n\n# %% [markdown]\n# ## 6. Explore Additional Sweeps and Metadata\n#\n# The NWB file contains data from many more sweeps and can be programmatically explored. You can also convert the tables from `nwb.intracellular_recordings`, `nwb.icephys_simultaneous_recordings`, and `nwb.icephys_sequential_recordings` to Pandas DataFrames for batch analysis (e.g., nwb.intracellular_recordings.to_dataframe()).\n#\n# See the DANDI documentation and NWB documentation for further ideas for reanalysis.\n\n# %% [markdown]\n# ## References and Further Information\n#\n# - [Dandiset 001354 on DANDI Archive](https://dandiarchive.org/dandiset/001354/0.250312.0036)\n# - [Related Nature Article](https://www.nature.com/articles/s41586-024-08282-3)\n# - [Neurodata Without Borders](https://www.nwb.org/)\n#\n# ---\n#\n# *This notebook offers a starting point for streaming and exploring single-cell electrophysiology data from programmable, antigen-gated receptor experiments.*\n</notebook>\n"
  }
]