[
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata about Dandiset 001195 version 0.250408.1733."
      },
      {
        "type": "text",
        "text": "{\n  \"id\": \"DANDI:001195/0.250408.1733\",\n  \"doi\": \"10.48324/dandi.001195/0.250408.1733\",\n  \"url\": \"https://dandiarchive.org/dandiset/001195/0.250408.1733\",\n  \"name\": \"Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State\",\n  \"about\": [\n    {\n      \"name\": \"dorsal raphe nucleus (DRN)\",\n      \"schemaKey\": \"Anatomy\",\n      \"identifier\": \"UBERON:0001950\"\n    },\n    {\n      \"name\": \"Central Amygdala (CeA)\",\n      \"schemaKey\": \"Anatomy\",\n      \"identifier\": \"UBERON:0001876\"\n    },\n    {\n      \"name\": \"Bed Nucleus of the Stria Terminalis (BNST)\",\n      \"schemaKey\": \"Anatomy\",\n      \"identifier\": \"UBERON:0001880\"\n    },\n    {\n      \"name\": \"Posterior Basolateral Amygdala (BLP)\",\n      \"schemaKey\": \"Anatomy\",\n      \"identifier\": \"UBERON:0006107\"\n    },\n    {\n      \"name\": \"social isolation\",\n      \"schemaKey\": \"GenericType\",\n      \"identifier\": \"http://purl.obolibrary.org/obo/GSSO_003702\"\n    }\n  ],\n  \"access\": [\n    {\n      \"status\": \"dandi:OpenAccess\",\n      \"schemaKey\": \"AccessRequirements\"\n    }\n  ],\n  \"license\": [\n    \"spdx:CC-BY-4.0\"\n  ],\n  \"version\": \"0.250408.1733\",\n  \"@context\": \"https://raw.githubusercontent.com/dandi/schema/master/releases/0.6.8/context.json\",\n  \"citation\": \"Keyes, Laurel; Lee, Christopher R.; Wichmann, Romy; Matthews, Gillian A. ; Tye, Kay M.  (2025) Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State (Version 0.250408.1733) [Data set]. DANDI Archive. https://doi.org/10.48324/dandi.001195/0.250408.1733\",\n  \"keywords\": [\n    \"optogenetics\",\n    \"behavior videos\",\n    \"calcium imaging\",\n    \"electrophysiology\",\n    \"Social Isolation\",\n    \"Social Motivation\",\n    \"mouse behavior\",\n    \"behavioral neuroscience\",\n    \"mouse model\",\n    \"Dorsal Raphe Nucleus (DRN)\",\n    \"Dopamine neurons\"\n  ],\n  \"protocol\": [],\n  \"schemaKey\": \"Dandiset\",\n  \"identifier\": \"DANDI:001195\",\n  \"repository\": \"https://dandiarchive.org\",\n  \"contributor\": [\n    {\n      \"name\": \"Keyes, Laurel\",\n      \"email\": \"lkeyes@salk.edu\",\n      \"roleName\": [\n        \"dcite:ContactPerson\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0001-5433-9948\",\n      \"affiliation\": [],\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Lee, Christopher R.\",\n      \"email\": \"chrlee@salk.edu\",\n      \"roleName\": [\n        \"dcite:Author\",\n        \"dcite:Conceptualization\",\n        \"dcite:DataCollector\",\n        \"dcite:FormalAnalysis\",\n        \"dcite:Researcher\",\n        \"dcite:DataCurator\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Wichmann, Romy\",\n      \"roleName\": [\n        \"dcite:Researcher\",\n        \"dcite:DataCurator\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-4506-8813\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Matthews, Gillian A. \",\n      \"roleName\": [\n        \"dcite:Author\",\n        \"dcite:Conceptualization\",\n        \"dcite:DataCollector\",\n        \"dcite:DataCurator\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Tye, Kay M. \",\n      \"roleName\": [\n        \"dcite:Conceptualization\",\n        \"dcite:Supervision\",\n        \"dcite:Author\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-2435-0182\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"The JPB Foundation\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/05nzwyq50\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"New York Stem Cell Foundation\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/03n2a3p06\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"Klingenstein Third Generation Foundation\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/00cxc2y95\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"McKnight Foundation\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/003ghvj67\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"Clayton Foundation\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/00qw4ms08\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"Alfred P Sloan Foundation\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/052csg198\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"National Institute of Mental Health\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/05xj56w78\",\n      \"awardNumber\": \"R01-MH115920\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"National Institute of Diabetes and Digestive and Kidney Diseases: NIH Director's New Innovator Award\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/00adh9b73\",\n      \"awardNumber\": \"DP2-DK102256\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"National Center for Complementary and Integrative Health Pioneer Award (NCCIH)\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/00190t495\",\n      \"awardNumber\": \"DP1-AT009925\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"Charles A. King Trust Postdoctoral Research Fellowship Program\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"MIT Summer Research Program, supported by the Center for Brains, Minds and Machines (CBMM)\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"National Science Foundation Science and Technology Centers Award\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"identifier\": \"https://ror.org/021nxhr62\",\n      \"awardNumber\": \"CCF-1231216\",\n      \"includeInCitation\": false\n    },\n    {\n      \"name\": \"Dolby Family Fund\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"includeInCitation\": false\n    }\n  ],\n  \"dateCreated\": \"2024-09-18T17:50:14.994221+00:00\",\n  \"description\": \"Supporting data for the publication \\\"Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State\\\" by Christopher R. Lee, Gillian A. Matthews, Mackenzie E. Lemieux, Elizabeth M. Wasserlein, Matilde Borio, Raymundo L. Miranda, Laurel R. Keyes, Gates P. Schneider, Caroline Jia, Andrea Tran, Faith Aloboudi, May G. Chan, Enzo Peroni, Grace S. Pereira, Alba L\\u00f3pez-Moraga, Anna Pall\\u00e9, Eyal Y. Kimchi, Nancy Padilla-Coreano, Romy Wichmann, Kay M. Tye.  bioRxiv 2025.02.03.636224; doi: https://doi.org/10.1101/2025.02.03.636224.  \\nThis dataset includes both in vivo calcium imaging data with supporting behavioral videos and ex vivo patch-clamp electrophysiology recordings.\\n\\nEphys Patching data also used in earlier pre-print under the title: \\\"Separable Dorsal Raphe Dopamine Projections Mediate Sociability and Valence\\\" by Gillian A. Matthews, Mackenzie E. Lemieux, Elizabeth M. Brewer, Matilde Borio, Raymundo Miranda, Laurel R. Keyes, Enzo Peroni, Grace S. Pereira, Alba Lopez-Moraga, Anna Pall\\u00e9, Christopher R. Lee, Eyal Y. Kimchi, Nancy Padilla-Coreano, Romy Wichmann, Kay M. Tye.  Research Square. 2021 Dec 3. doi: 10.21203/rs.3.rs-1025403/v1.\",\n  \"publishedBy\": {\n    \"id\": \"urn:uuid:e7b589a6-9018-44fd-8e71-5cba081330b2\",\n    \"name\": \"DANDI publish\",\n    \"endDate\": \"2025-04-08T17:33:12.753743+00:00\",\n    \"schemaKey\": \"PublishActivity\",\n    \"startDate\": \"2025-04-08T17:33:12.753743+00:00\",\n    \"wasAssociatedWith\": [\n      {\n        \"id\": \"urn:uuid:b6817d41-1f9c-4e4a-8e13-227e799e96c4\",\n        \"name\": \"DANDI API\",\n        \"version\": \"0.1.0\",\n        \"schemaKey\": \"Software\",\n        \"identifier\": \"RRID:SCR_017571\"\n      }\n    ]\n  },\n  \"studyTarget\": [\n    \"Affiliative social connections facilitate well-being and survival in numerous species. Engaging in social interactions requires positive or negative motivational drive, elicited through coordinated activity across neural circuits. However, the identity, interconnectivity, and functional encoding of social information within these circuits remains poorly understood. Here, we focus on downstream projections of dorsal raphe nucleus (DRN) dopamine neurons (DRNDAT), which we previously implicated in social motivation alongside an aversive affective state. We show that three prominent DRNDAT projections \\u2013 to the bed nucleus of the stria terminalis (BNST), central amygdala (CeA), and posterior basolateral amygdala (BLP) \\u2013 play separable roles in behavior, despite substantial collateralization. Photoactivation of the DRNDAT-CeA projection promoted social behavior and photostimulation of the DRNDAT-BNST projection promoted exploratory behavior, while the DRNDAT-BLP projection supported place avoidance, suggesting a negative affective state. Downstream regions showed diverse receptor expression, poising DRNDAT neurons to act through dopamine, neuropeptide, and glutamate transmission. Furthermore, we show ex vivo that the effect of DRNDAT photostimulation on downstream neuron excitability depended on region and baseline cell properties, resulting in excitatory responses in BNST cells and diverse responses in CeA and BLP. Finally, in vivo microendoscopic cellular-resolution recordings in the CeA with DRNDAT photostimulation revealed a correlation between social behavior and neurons excited by social stimuli\\u2013 suggesting that increased dopamine tone may recruit different CeA neurons to social ensembles. Collectively, these circuit features may facilitate a coordinated, but flexible, response in the presence of social stimuli that can be flexibly guided based on the internal social homeostatic need state of the individual.\"\n  ],\n  \"assetsSummary\": {\n    \"species\": [\n      {\n        \"name\": \"Mus musculus - House mouse\",\n        \"schemaKey\": \"SpeciesType\",\n        \"identifier\": \"http://purl.obolibrary.org/obo/NCBITaxon_10090\"\n      }\n    ],\n    \"approach\": [\n      {\n        \"name\": \"electrophysiological approach\",\n        \"schemaKey\": \"ApproachType\"\n      },\n      {\n        \"name\": \"microscopy approach; cell population imaging\",\n        \"schemaKey\": \"ApproachType\"\n      }\n    ],\n    \"schemaKey\": \"AssetsSummary\",\n    \"dataStandard\": [\n      {\n        \"name\": \"Neurodata Without Borders (NWB)\",\n        \"schemaKey\": \"StandardsType\",\n        \"identifier\": \"RRID:SCR_015242\"\n      }\n    ],\n    \"numberOfBytes\": 69986574127,\n    \"numberOfCells\": 131,\n    \"numberOfFiles\": 230,\n    \"numberOfSamples\": 8,\n    \"numberOfSubjects\": 34,\n    \"variableMeasured\": [\n      \"CurrentClampStimulusSeries\",\n      \"VoltageClampSeries\",\n      \"VoltageClampStimulusSeries\",\n      \"CurrentClampSeries\",\n      \"OpticalChannel\",\n      \"ImagingPlane\",\n      \"PlaneSegmentation\",\n      \"ProcessingModule\",\n      \"OnePhotonSeries\"\n    ],\n    \"measurementTechnique\": [\n      {\n        \"name\": \"voltage clamp technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"current clamp technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"one-photon microscopy technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"analytical technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"surgical technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      }\n    ]\n  },\n  \"datePublished\": \"2025-04-08T17:33:12.753743+00:00\",\n  \"schemaVersion\": \"0.6.8\",\n  \"ethicsApproval\": [\n    {\n      \"schemaKey\": \"EthicsApproval\",\n      \"identifier\": \"All procedures involving animals were conducted in accordance with NIH guidelines and approved by the MIT Committee on Animal Care or the Salk Institute Institutional Animal Care and Use Committee\",\n      \"contactPoint\": {\n        \"email\": \"rwichmann@salk.edu\",\n        \"schemaKey\": \"ContactPoint\"\n      }\n    }\n  ],\n  \"wasGeneratedBy\": [\n    {\n      \"name\": \"Separable Dorsal Raphe Dopamine Projections Mediate Sociability and Valence\",\n      \"schemaKey\": \"Project\",\n      \"identifier\": \"https://www.researchsquare.com/article/rs-1025403/v1\",\n      \"description\": \"Affiliative social connections facilitate well-being and survival in numerous species. Engaging in social interactions requires positive and negative motivational drive, elicited through coordinated activity across neural circuits. However, the identity, interconnectivity, and functional encoding of social information within these circuits remains poorly understood. Here, we focused on downstream projections of dorsal raphe nucleus (DRN) dopamine neurons (DRNDAT), which we previously implicated in \\u2018negative drive\\u2019-induced social motivation. We show that three prominent DRNDAT projections \\u2013 to the bed nucleus of the stria terminalis (BNST), central amygdala (CeA), and posterior basolateral amygdala (BLP) \\u2013 play separable roles in behavior, despite substantial collateralization. Photoactivation of the DRNDAT-CeA projection promoted social behavior and photoactivation of the DRNDAT-BNST projection promoted exploratory behavior, while the DRNDAT-BLP projection supported place avoidance, suggesting a negative affective state. Downstream regions showed diverse, region-specific, receptor expression, poising DRNDAT neurons to act through dopamine, neuropeptide, and glutamate transmission. Furthermore, we show ex vivo that the effect of DRNDAT photostimulation on downstream neuron excitability was predicted by baseline cell properties, suggesting cell-type-specific modulation. Collectively, these data indicate that DRNDAT neurons may bias behavior via precise modulation of cellular activity in broadly-distributed target structures.\"\n    }\n  ],\n  \"acknowledgement\": \"K.M.T. is the Wylie Vale Chair at the Salk Institute for Biological Studies, a New York Stem Cell Foundation - Robertson Investigator, and a McKnight Scholar. This work was supported by funding from the JPB Foundation, Alfred P Sloan Foundation, New York Stem Cell Foundation, Klingenstein Foundation, McKnight Foundation, Clayton Foundation, Dolby Family Fund, R01-MH115920 (NIMH), the NIH Director\\u2019s New Innovator Award DP2-DK102256 (NIDDK), and Pioneer Award DP1-AT009925 (NCCIH). G.A.M was supported by a Postdoctoral Research Fellowship from the Charles A. King Trust.  R.L.M. was funded through the MSRP program in the Brains & Cognitive Sciences Department at MIT, supported by the Center for Brains, Minds and Machines (CBMM), and funded by NSF STC award CCF\\u0002 1231216. E.M.W was supported by a summer scholarship from Johnson & Johnson. We thank C. Leppla, J. Olsen, P. Namburi, V. Barth, J. Wang, K. Batra, A. Brown, and A. Libster for technical advice, all members of the Tye Lab for helpful discussion, and advice from the CellProfiler team at the Broad Institute. We also thank Rachel Neve for the HSV construct, and Charu Ramakrishnan & Karl Deisseroth for AAV5-fDIO-eYFP. \",\n  \"relatedResource\": [\n    {\n      \"url\": \"https://doi.org/10.7554/eLife.105955.1\",\n      \"name\": \"Separable Dorsal Raphe Dopamine Projections mediate the Facets of Loneliness-like state\",\n      \"relation\": \"dcite:Describes\",\n      \"schemaKey\": \"Resource\",\n      \"identifier\": \"https://doi.org/10.7554/eLife.105955.1\",\n      \"repository\": \"eLife\",\n      \"resourceType\": \"dcite:JournalArticle\"\n    },\n    {\n      \"url\": \"https://doi.org/10.21203/rs.3.rs-1025403/v1\",\n      \"name\": \"Separable Dorsal Raphe Dopamine Projections Mediate Sociability and Valence\",\n      \"relation\": \"dcite:Describes\",\n      \"schemaKey\": \"Resource\",\n      \"identifier\": \"https://doi.org/10.21203/rs.3.rs-1025403/v1\",\n      \"repository\": \"Research Square\",\n      \"resourceType\": \"dcite:Preprint\"\n    }\n  ],\n  \"manifestLocation\": [\n    \"https://dandiarchive.s3.amazonaws.com/dandisets/001195/0.250408.1733/assets.yaml\"\n  ]\n}"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is a listing of some of the files in the Dandiset."
      },
      {
        "type": "text",
        "text": "sub-23/sub-23_ses-20150324T134114_slice-slice-1_cell-C1_icephys.nwb\nsub-23/sub-23_ses-20150324T161217_slice-slice-2_cell-B3_icephys.nwb\nsub-235/sub-235_ses-20200921T142415_slice-slice-1_cell-C3_icephys.nwb\nsub-23/sub-23_ses-20150324T154615_slice-slice-2_cell-B2_icephys.nwb\nsub-23/sub-23_ses-20150324T152016_slice-slice-2_cell-B1_icephys.nwb\nsub-235/sub-235_ses-20200921T150553_slice-slice-1_cell-C5_icephys.nwb\nsub-235/sub-235_ses-20200921T131057_slice-slice-1_cell-C1_icephys.nwb\nsub-235/sub-235_ses-20200921T164032_slice-slice-2_cell-C8_icephys.nwb\nsub-235/sub-235_ses-20200921T134852_slice-slice-1_cell-C2_icephys.nwb\nsub-235/sub-235_ses-20200921T172736_slice-slice-2_cell-C10_icephys.nwb"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata and usage information about the file sub-23/sub-23_ses-20150324T134114_slice-slice-1_cell-C1_icephys.nwb."
      },
      {
        "type": "text",
        "text": "\nimport pynwb\nimport h5py\nimport remfile\n\n# Load\nfrom dandi.dandiapi import DandiAPIClient\n\nclient = DandiAPIClient()\ndandiset = client.get_dandiset(\"001195\", \"0.250408.1733\")\nurl = next(dandiset.get_assets_by_glob(\"sub-23/sub-23_ses-20150324T134114_slice-slice-1_cell-C1_icephys.nwb\")).download_url\n\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file)\nnwb = io.read()\n\nnwb # (NWBFile)\nnwb.session_description # (str) episodic stimulation\nnwb.identifier # (str) a18b081c-3b63-45df-b702-fc3640aef3de\nnwb.session_start_time # (datetime) 2015-03-24T13:41:14-07:00\nnwb.timestamps_reference_time # (datetime) 2015-03-24T13:41:14-07:00\nnwb.file_create_date # (list) [datetime.datetime(2025, 4, 3, 16, 56, 47, 408514, tzinfo=tzoffset(None, -25200))]\nnwb.experimenter # (tuple) ['Matthews, Gillian']\nnwb.icephys_electrodes # (LabelledDict)\nicephys_electrodes = nwb.icephys_electrodes\nelectrode_0 = icephys_electrodes[\"electrode-0\"]\nelectrode_0 # (IntracellularElectrode)\nelectrode_0.description # (str) no description\nelectrode_0.device # (Device)\nelectrode_0.device.description # (str) no description\nelectrode_1 = icephys_electrodes[\"electrode-1\"]\nelectrode_1 # (IntracellularElectrode)\nelectrode_1.description # (str) no description\nelectrode_1.device # (Device)\nelectrode_1.device.description # (str) no description\nnwb.acquisition # (LabelledDict)\nacquisition = nwb.acquisition\ncurrent_clamp_response_01_ch_0 = acquisition[\"current_clamp-response-01-ch-0\"]\ncurrent_clamp_response_01_ch_0 # (CurrentClampSeries)\ncurrent_clamp_response_01_ch_0.starting_time # (float64) 0.0\ncurrent_clamp_response_01_ch_0.rate # (float64) 10000.0\ncurrent_clamp_response_01_ch_0.resolution # (float64) -1.0\ncurrent_clamp_response_01_ch_0.comments # (str) no comments\ncurrent_clamp_response_01_ch_0.description # (str) Response to: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\ncurrent_clamp_response_01_ch_0.conversion # (float64) 3.051757880712104e-05\ncurrent_clamp_response_01_ch_0.offset # (float64) 0.0\ncurrent_clamp_response_01_ch_0.unit # (str) volts\ncurrent_clamp_response_01_ch_0.data # (Dataset) shape (3000,); dtype int16\n# current_clamp_response_01_ch_0.data[:] # Access all data\n# current_clamp_response_01_ch_0.data[0:n] # Access first n elements\ncurrent_clamp_response_01_ch_0.starting_time_unit # (str) seconds\ncurrent_clamp_response_01_ch_0.gain # (float64) nan\ncurrent_clamp_response_01_ch_0.stimulus_description # (str) N/A\ncurrent_clamp_response_01_ch_0.electrode # (IntracellularElectrode)\ncurrent_clamp_response_01_ch_0.electrode.description # (str) no description\ncurrent_clamp_response_01_ch_0.electrode.device # (Device)\ncurrent_clamp_response_01_ch_0.electrode.device.description # (str) no description\ncurrent_clamp_response_01_ch_1 = acquisition[\"current_clamp-response-01-ch-1\"]\ncurrent_clamp_response_01_ch_1 # (CurrentClampSeries)\ncurrent_clamp_response_01_ch_1.starting_time # (float64) 0.0\ncurrent_clamp_response_01_ch_1.rate # (float64) 10000.0\ncurrent_clamp_response_01_ch_1.resolution # (float64) -1.0\ncurrent_clamp_response_01_ch_1.comments # (str) no comments\ncurrent_clamp_response_01_ch_1.description # (str) Response to: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\ncurrent_clamp_response_01_ch_1.conversion # (float64) 6.103515335098577e-13\ncurrent_clamp_response_01_ch_1.offset # (float64) 0.0\ncurrent_clamp_response_01_ch_1.unit # (str) volts\ncurrent_clamp_response_01_ch_1.data # (Dataset) shape (3000,); dtype int16\n# current_clamp_response_01_ch_1.data[:] # Access all data\n# current_clamp_response_01_ch_1.data[0:n] # Access first n elements\ncurrent_clamp_response_01_ch_1.starting_time_unit # (str) seconds\ncurrent_clamp_response_01_ch_1.gain # (float64) nan\ncurrent_clamp_response_01_ch_1.stimulus_description # (str) N/A\ncurrent_clamp_response_01_ch_1.electrode # (IntracellularElectrode)\ncurrent_clamp_response_01_ch_1.electrode.description # (str) no description\ncurrent_clamp_response_01_ch_1.electrode.device # (Device)\ncurrent_clamp_response_01_ch_1.electrode.device.description # (str) no description\ncurrent_clamp_response_02_ch_0 = acquisition[\"current_clamp-response-02-ch-0\"]\ncurrent_clamp_response_02_ch_0 # (CurrentClampSeries)\ncurrent_clamp_response_02_ch_0.starting_time # (float64) 1.0\ncurrent_clamp_response_02_ch_0.rate # (float64) 10000.0\ncurrent_clamp_response_02_ch_0.resolution # (float64) -1.0\ncurrent_clamp_response_02_ch_0.comments # (str) no comments\ncurrent_clamp_response_02_ch_0.description # (str) Response to: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\ncurrent_clamp_response_02_ch_0.conversion # (float64) 3.051757880712104e-05\ncurrent_clamp_response_02_ch_0.offset # (float64) 0.0\ncurrent_clamp_response_02_ch_0.unit # (str) volts\ncurrent_clamp_response_02_ch_0.data # (Dataset) shape (3000,); dtype int16\n# current_clamp_response_02_ch_0.data[:] # Access all data\n# current_clamp_response_02_ch_0.data[0:n] # Access first n elements\ncurrent_clamp_response_02_ch_0.starting_time_unit # (str) seconds\ncurrent_clamp_response_02_ch_0.gain # (float64) nan\ncurrent_clamp_response_02_ch_0.stimulus_description # (str) N/A\ncurrent_clamp_response_02_ch_0.electrode # (IntracellularElectrode)\ncurrent_clamp_response_02_ch_0.electrode.description # (str) no description\ncurrent_clamp_response_02_ch_0.electrode.device # (Device)\ncurrent_clamp_response_02_ch_0.electrode.device.description # (str) no description\ncurrent_clamp_response_02_ch_1 = acquisition[\"current_clamp-response-02-ch-1\"]\ncurrent_clamp_response_02_ch_1 # (CurrentClampSeries)\ncurrent_clamp_response_02_ch_1.starting_time # (float64) 1.0\ncurrent_clamp_response_02_ch_1.rate # (float64) 10000.0\ncurrent_clamp_response_02_ch_1.resolution # (float64) -1.0\ncurrent_clamp_response_02_ch_1.comments # (str) no comments\ncurrent_clamp_response_02_ch_1.description # (str) Response to: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\ncurrent_clamp_response_02_ch_1.conversion # (float64) 6.103515335098577e-13\ncurrent_clamp_response_02_ch_1.offset # (float64) 0.0\ncurrent_clamp_response_02_ch_1.unit # (str) volts\ncurrent_clamp_response_02_ch_1.data # (Dataset) shape (3000,); dtype int16\n# current_clamp_response_02_ch_1.data[:] # Access all data\n# current_clamp_response_02_ch_1.data[0:n] # Access first n elements\ncurrent_clamp_response_02_ch_1.starting_time_unit # (str) seconds\ncurrent_clamp_response_02_ch_1.gain # (float64) nan\ncurrent_clamp_response_02_ch_1.stimulus_description # (str) N/A\ncurrent_clamp_response_02_ch_1.electrode # (IntracellularElectrode)\ncurrent_clamp_response_02_ch_1.electrode.description # (str) no description\ncurrent_clamp_response_02_ch_1.electrode.device # (Device)\ncurrent_clamp_response_02_ch_1.electrode.device.description # (str) no description\ncurrent_clamp_response_03_ch_0 = acquisition[\"current_clamp-response-03-ch-0\"]\ncurrent_clamp_response_03_ch_0 # (CurrentClampSeries)\ncurrent_clamp_response_03_ch_0.starting_time # (float64) 2.0\ncurrent_clamp_response_03_ch_0.rate # (float64) 10000.0\ncurrent_clamp_response_03_ch_0.resolution # (float64) -1.0\ncurrent_clamp_response_03_ch_0.comments # (str) no comments\ncurrent_clamp_response_03_ch_0.description # (str) Response to: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\ncurrent_clamp_response_03_ch_0.conversion # (float64) 3.051757880712104e-05\ncurrent_clamp_response_03_ch_0.offset # (float64) 0.0\ncurrent_clamp_response_03_ch_0.unit # (str) volts\ncurrent_clamp_response_03_ch_0.data # (Dataset) shape (3000,); dtype int16\n# current_clamp_response_03_ch_0.data[:] # Access all data\n# current_clamp_response_03_ch_0.data[0:n] # Access first n elements\ncurrent_clamp_response_03_ch_0.starting_time_unit # (str) seconds\ncurrent_clamp_response_03_ch_0.gain # (float64) nan\ncurrent_clamp_response_03_ch_0.stimulus_description # (str) N/A\ncurrent_clamp_response_03_ch_0.electrode # (IntracellularElectrode)\ncurrent_clamp_response_03_ch_0.electrode.description # (str) no description\ncurrent_clamp_response_03_ch_0.electrode.device # (Device)\ncurrent_clamp_response_03_ch_0.electrode.device.description # (str) no description\ncurrent_clamp_response_03_ch_1 = acquisition[\"current_clamp-response-03-ch-1\"]\ncurrent_clamp_response_03_ch_1 # (CurrentClampSeries)\ncurrent_clamp_response_03_ch_1.starting_time # (float64) 2.0\ncurrent_clamp_response_03_ch_1.rate # (float64) 10000.0\ncurrent_clamp_response_03_ch_1.resolution # (float64) -1.0\ncurrent_clamp_response_03_ch_1.comments # (str) no comments\ncurrent_clamp_response_03_ch_1.description # (str) Response to: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\ncurrent_clamp_response_03_ch_1.conversion # (float64) 6.103515335098577e-13\ncurrent_clamp_response_03_ch_1.offset # (float64) 0.0\ncurrent_clamp_response_03_ch_1.unit # (str) volts\ncurrent_clamp_response_03_ch_1.data # (Dataset) shape (3000,); dtype int16\n# current_clamp_response_03_ch_1.data[:] # Access all data\n# current_clamp_response_03_ch_1.data[0:n] # Access first n elements\ncurrent_clamp_response_03_ch_1.starting_time_unit # (str) seconds\ncurrent_clamp_response_03_ch_1.gain # (float64) nan\ncurrent_clamp_response_03_ch_1.stimulus_description # (str) N/A\ncurrent_clamp_response_03_ch_1.electrode # (IntracellularElectrode)\ncurrent_clamp_response_03_ch_1.electrode.description # (str) no description\ncurrent_clamp_response_03_ch_1.electrode.device # (Device)\ncurrent_clamp_response_03_ch_1.electrode.device.description # (str) no description\ncurrent_clamp_response_04_ch_0 = acquisition[\"current_clamp-response-04-ch-0\"]\ncurrent_clamp_response_04_ch_0 # (CurrentClampSeries)\ncurrent_clamp_response_04_ch_0.starting_time # (float64) 3.0\ncurrent_clamp_response_04_ch_0.rate # (float64) 10000.0\ncurrent_clamp_response_04_ch_0.resolution # (float64) -1.0\ncurrent_clamp_response_04_ch_0.comments # (str) no comments\ncurrent_clamp_response_04_ch_0.description # (str) Response to: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\ncurrent_clamp_response_04_ch_0.conversion # (float64) 3.051757880712104e-05\ncurrent_clamp_response_04_ch_0.offset # (float64) 0.0\ncurrent_clamp_response_04_ch_0.unit # (str) volts\ncurrent_clamp_response_04_ch_0.data # (Dataset) shape (3000,); dtype int16\n# current_clamp_response_04_ch_0.data[:] # Access all data\n# current_clamp_response_04_ch_0.data[0:n] # Access first n elements\ncurrent_clamp_response_04_ch_0.starting_time_unit # (str) seconds\ncurrent_clamp_response_04_ch_0.gain # (float64) nan\ncurrent_clamp_response_04_ch_0.stimulus_description # (str) N/A\ncurrent_clamp_response_04_ch_0.electrode # (IntracellularElectrode)\ncurrent_clamp_response_04_ch_0.electrode.description # (str) no description\ncurrent_clamp_response_04_ch_0.electrode.device # (Device)\ncurrent_clamp_response_04_ch_0.electrode.device.description # (str) no description\ncurrent_clamp_response_04_ch_1 = acquisition[\"current_clamp-response-04-ch-1\"]\ncurrent_clamp_response_04_ch_1 # (CurrentClampSeries)\ncurrent_clamp_response_04_ch_1.starting_time # (float64) 3.0\ncurrent_clamp_response_04_ch_1.rate # (float64) 10000.0\ncurrent_clamp_response_04_ch_1.resolution # (float64) -1.0\ncurrent_clamp_response_04_ch_1.comments # (str) no comments\ncurrent_clamp_response_04_ch_1.description # (str) Response to: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\ncurrent_clamp_response_04_ch_1.conversion # (float64) 6.103515335098577e-13\ncurrent_clamp_response_04_ch_1.offset # (float64) 0.0\ncurrent_clamp_response_04_ch_1.unit # (str) volts\ncurrent_clamp_response_04_ch_1.data # (Dataset) shape (3000,); dtype int16\n# current_clamp_response_04_ch_1.data[:] # Access all data\n# current_clamp_response_04_ch_1.data[0:n] # Access first n elements\ncurrent_clamp_response_04_ch_1.starting_time_unit # (str) seconds\ncurrent_clamp_response_04_ch_1.gain # (float64) nan\ncurrent_clamp_response_04_ch_1.stimulus_description # (str) N/A\ncurrent_clamp_response_04_ch_1.electrode # (IntracellularElectrode)\ncurrent_clamp_response_04_ch_1.electrode.description # (str) no description\ncurrent_clamp_response_04_ch_1.electrode.device # (Device)\ncurrent_clamp_response_04_ch_1.electrode.device.description # (str) no description\n# ...\n# Other fields: current_clamp-response-05-ch-0, current_clamp-response-05-ch-1, current_clamp-response-06-ch-0, current_clamp-response-06-ch-1, current_clamp-response-07-ch-0, current_clamp-response-07-ch-1, current_clamp-response-08-ch-0, current_clamp-response-08-ch-1, current_clamp-response-09-ch-0, current_clamp-response-09-ch-1, current_clamp-response-10-ch-0, current_clamp-response-10-ch-1, current_clamp-response-11-ch-0, current_clamp-response-11-ch-1, current_clamp-response-12-ch-0\n# ... and 64 more fields\nnwb.stimulus # (LabelledDict)\nstimulus = nwb.stimulus\nstimulus_01_ch_0 = stimulus[\"stimulus-01-ch-0\"]\nstimulus_01_ch_0 # (CurrentClampStimulusSeries)\nstimulus_01_ch_0.starting_time # (float64) 0.0\nstimulus_01_ch_0.rate # (float64) 10000.0\nstimulus_01_ch_0.resolution # (float64) -1.0\nstimulus_01_ch_0.comments # (str) no comments\nstimulus_01_ch_0.description # (str) Stim type: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\nstimulus_01_ch_0.conversion # (float64) 1e-12\nstimulus_01_ch_0.offset # (float64) 0.0\nstimulus_01_ch_0.unit # (str) amperes\nstimulus_01_ch_0.data # (Dataset) shape (3000,); dtype float64\n# stimulus_01_ch_0.data[:] # Access all data\n# stimulus_01_ch_0.data[0:n] # Access first n elements\nstimulus_01_ch_0.starting_time_unit # (str) seconds\nstimulus_01_ch_0.gain # (float64) nan\nstimulus_01_ch_0.stimulus_description # (str) N/A\nstimulus_01_ch_0.electrode # (IntracellularElectrode)\nstimulus_01_ch_0.electrode.description # (str) no description\nstimulus_01_ch_0.electrode.device # (Device)\nstimulus_01_ch_0.electrode.device.description # (str) no description\nstimulus_01_ch_1 = stimulus[\"stimulus-01-ch-1\"]\nstimulus_01_ch_1 # (CurrentClampStimulusSeries)\nstimulus_01_ch_1.starting_time # (float64) 0.0\nstimulus_01_ch_1.rate # (float64) 10000.0\nstimulus_01_ch_1.resolution # (float64) -1.0\nstimulus_01_ch_1.comments # (str) no comments\nstimulus_01_ch_1.description # (str) Stim type: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\nstimulus_01_ch_1.conversion # (float64) 0.001\nstimulus_01_ch_1.offset # (float64) 0.0\nstimulus_01_ch_1.unit # (str) amperes\nstimulus_01_ch_1.data # (Dataset) shape (3000,); dtype float64\n# stimulus_01_ch_1.data[:] # Access all data\n# stimulus_01_ch_1.data[0:n] # Access first n elements\nstimulus_01_ch_1.starting_time_unit # (str) seconds\nstimulus_01_ch_1.gain # (float64) nan\nstimulus_01_ch_1.stimulus_description # (str) N/A\nstimulus_01_ch_1.electrode # (IntracellularElectrode)\nstimulus_01_ch_1.electrode.description # (str) no description\nstimulus_01_ch_1.electrode.device # (Device)\nstimulus_01_ch_1.electrode.device.description # (str) no description\nstimulus_02_ch_0 = stimulus[\"stimulus-02-ch-0\"]\nstimulus_02_ch_0 # (CurrentClampStimulusSeries)\nstimulus_02_ch_0.starting_time # (float64) 1.0\nstimulus_02_ch_0.rate # (float64) 10000.0\nstimulus_02_ch_0.resolution # (float64) -1.0\nstimulus_02_ch_0.comments # (str) no comments\nstimulus_02_ch_0.description # (str) Stim type: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\nstimulus_02_ch_0.conversion # (float64) 1e-12\nstimulus_02_ch_0.offset # (float64) 0.0\nstimulus_02_ch_0.unit # (str) amperes\nstimulus_02_ch_0.data # (Dataset) shape (3000,); dtype float64\n# stimulus_02_ch_0.data[:] # Access all data\n# stimulus_02_ch_0.data[0:n] # Access first n elements\nstimulus_02_ch_0.starting_time_unit # (str) seconds\nstimulus_02_ch_0.gain # (float64) nan\nstimulus_02_ch_0.stimulus_description # (str) N/A\nstimulus_02_ch_0.electrode # (IntracellularElectrode)\nstimulus_02_ch_0.electrode.description # (str) no description\nstimulus_02_ch_0.electrode.device # (Device)\nstimulus_02_ch_0.electrode.device.description # (str) no description\nstimulus_02_ch_1 = stimulus[\"stimulus-02-ch-1\"]\nstimulus_02_ch_1 # (CurrentClampStimulusSeries)\nstimulus_02_ch_1.starting_time # (float64) 1.0\nstimulus_02_ch_1.rate # (float64) 10000.0\nstimulus_02_ch_1.resolution # (float64) -1.0\nstimulus_02_ch_1.comments # (str) no comments\nstimulus_02_ch_1.description # (str) Stim type: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\nstimulus_02_ch_1.conversion # (float64) 0.001\nstimulus_02_ch_1.offset # (float64) 0.0\nstimulus_02_ch_1.unit # (str) amperes\nstimulus_02_ch_1.data # (Dataset) shape (3000,); dtype float64\n# stimulus_02_ch_1.data[:] # Access all data\n# stimulus_02_ch_1.data[0:n] # Access first n elements\nstimulus_02_ch_1.starting_time_unit # (str) seconds\nstimulus_02_ch_1.gain # (float64) nan\nstimulus_02_ch_1.stimulus_description # (str) N/A\nstimulus_02_ch_1.electrode # (IntracellularElectrode)\nstimulus_02_ch_1.electrode.description # (str) no description\nstimulus_02_ch_1.electrode.device # (Device)\nstimulus_02_ch_1.electrode.device.description # (str) no description\nstimulus_03_ch_0 = stimulus[\"stimulus-03-ch-0\"]\nstimulus_03_ch_0 # (CurrentClampStimulusSeries)\nstimulus_03_ch_0.starting_time # (float64) 2.0\nstimulus_03_ch_0.rate # (float64) 10000.0\nstimulus_03_ch_0.resolution # (float64) -1.0\nstimulus_03_ch_0.comments # (str) no comments\nstimulus_03_ch_0.description # (str) Stim type: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\nstimulus_03_ch_0.conversion # (float64) 1e-12\nstimulus_03_ch_0.offset # (float64) 0.0\nstimulus_03_ch_0.unit # (str) amperes\nstimulus_03_ch_0.data # (Dataset) shape (3000,); dtype float64\n# stimulus_03_ch_0.data[:] # Access all data\n# stimulus_03_ch_0.data[0:n] # Access first n elements\nstimulus_03_ch_0.starting_time_unit # (str) seconds\nstimulus_03_ch_0.gain # (float64) nan\nstimulus_03_ch_0.stimulus_description # (str) N/A\nstimulus_03_ch_0.electrode # (IntracellularElectrode)\nstimulus_03_ch_0.electrode.description # (str) no description\nstimulus_03_ch_0.electrode.device # (Device)\nstimulus_03_ch_0.electrode.device.description # (str) no description\nstimulus_03_ch_1 = stimulus[\"stimulus-03-ch-1\"]\nstimulus_03_ch_1 # (CurrentClampStimulusSeries)\nstimulus_03_ch_1.starting_time # (float64) 2.0\nstimulus_03_ch_1.rate # (float64) 10000.0\nstimulus_03_ch_1.resolution # (float64) -1.0\nstimulus_03_ch_1.comments # (str) no comments\nstimulus_03_ch_1.description # (str) Stim type: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\nstimulus_03_ch_1.conversion # (float64) 0.001\nstimulus_03_ch_1.offset # (float64) 0.0\nstimulus_03_ch_1.unit # (str) amperes\nstimulus_03_ch_1.data # (Dataset) shape (3000,); dtype float64\n# stimulus_03_ch_1.data[:] # Access all data\n# stimulus_03_ch_1.data[0:n] # Access first n elements\nstimulus_03_ch_1.starting_time_unit # (str) seconds\nstimulus_03_ch_1.gain # (float64) nan\nstimulus_03_ch_1.stimulus_description # (str) N/A\nstimulus_03_ch_1.electrode # (IntracellularElectrode)\nstimulus_03_ch_1.electrode.description # (str) no description\nstimulus_03_ch_1.electrode.device # (Device)\nstimulus_03_ch_1.electrode.device.description # (str) no description\nstimulus_04_ch_0 = stimulus[\"stimulus-04-ch-0\"]\nstimulus_04_ch_0 # (CurrentClampStimulusSeries)\nstimulus_04_ch_0.starting_time # (float64) 3.0\nstimulus_04_ch_0.rate # (float64) 10000.0\nstimulus_04_ch_0.resolution # (float64) -1.0\nstimulus_04_ch_0.comments # (str) no comments\nstimulus_04_ch_0.description # (str) Stim type: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\nstimulus_04_ch_0.conversion # (float64) 1e-12\nstimulus_04_ch_0.offset # (float64) 0.0\nstimulus_04_ch_0.unit # (str) amperes\nstimulus_04_ch_0.data # (Dataset) shape (3000,); dtype float64\n# stimulus_04_ch_0.data[:] # Access all data\n# stimulus_04_ch_0.data[0:n] # Access first n elements\nstimulus_04_ch_0.starting_time_unit # (str) seconds\nstimulus_04_ch_0.gain # (float64) nan\nstimulus_04_ch_0.stimulus_description # (str) N/A\nstimulus_04_ch_0.electrode # (IntracellularElectrode)\nstimulus_04_ch_0.electrode.description # (str) no description\nstimulus_04_ch_0.electrode.device # (Device)\nstimulus_04_ch_0.electrode.device.description # (str) no description\nstimulus_04_ch_1 = stimulus[\"stimulus-04-ch-1\"]\nstimulus_04_ch_1 # (CurrentClampStimulusSeries)\nstimulus_04_ch_1.starting_time # (float64) 3.0\nstimulus_04_ch_1.rate # (float64) 10000.0\nstimulus_04_ch_1.resolution # (float64) -1.0\nstimulus_04_ch_1.comments # (str) no comments\nstimulus_04_ch_1.description # (str) Stim type: episodic stimulation, 1s steps, 20pA increments, -120pA to 260pA\nstimulus_04_ch_1.conversion # (float64) 0.001\nstimulus_04_ch_1.offset # (float64) 0.0\nstimulus_04_ch_1.unit # (str) amperes\nstimulus_04_ch_1.data # (Dataset) shape (3000,); dtype float64\n# stimulus_04_ch_1.data[:] # Access all data\n# stimulus_04_ch_1.data[0:n] # Access first n elements\nstimulus_04_ch_1.starting_time_unit # (str) seconds\nstimulus_04_ch_1.gain # (float64) nan\nstimulus_04_ch_1.stimulus_description # (str) N/A\nstimulus_04_ch_1.electrode # (IntracellularElectrode)\nstimulus_04_ch_1.electrode.description # (str) no description\nstimulus_04_ch_1.electrode.device # (Device)\nstimulus_04_ch_1.electrode.device.description # (str) no description\n# ...\n# Other fields: stimulus-05-ch-0, stimulus-05-ch-1, stimulus-06-ch-0, stimulus-06-ch-1, stimulus-07-ch-0, stimulus-07-ch-1, stimulus-08-ch-0, stimulus-08-ch-1, stimulus-09-ch-0, stimulus-09-ch-1, stimulus-10-ch-0, stimulus-10-ch-1, stimulus-11-ch-0, stimulus-11-ch-1, stimulus-12-ch-0\n# ... and 63 more fields\nnwb.devices # (LabelledDict)\ndevices = nwb.devices\nDeviceIcephys = devices[\"DeviceIcephys\"]\nDeviceIcephys # (Device)\nDeviceIcephys.description # (str) no description\nnwb.lab_meta_data # (LabelledDict)\nlab_meta_data = nwb.lab_meta_data\nDandiIcephysMetadata = lab_meta_data[\"DandiIcephysMetadata\"]\nDandiIcephysMetadata # (DandiIcephysMetadata)\nDandiIcephysMetadata.cell_id # (str) C1\nDandiIcephysMetadata.slice_id # (str) slice 1\nDandiIcephysMetadata.targeted_layer # (str) CeA\nDandiIcephysMetadata.inferred_layer # (str) CeA\nnwb.lab # (str) Kay Tye Lab\nnwb.institution # (str) Massachusetts Institute of Technology\nnwb.subject # (Subject)\nnwb.subject.age # (str) P302D\nnwb.subject.age__reference # (str) birth\nnwb.subject.description # (str) AAV5-DIO-ChR2-eYFP into DRN\nnwb.subject.genotype # (str) heterozygote\nnwb.subject.sex # (str) F\nnwb.subject.species # (str) Mus musculus\nnwb.subject.subject_id # (str) 23\nnwb.subject.date_of_birth # (datetime) 2014-05-26T00:00:00-07:00\nnwb.subject.strain # (str) DAT::Cre\nnwb.intracellular_recordings # (IntracellularRecordingsTable)\nnwb.intracellular_recordings.description # (str) A table to group together a stimulus and response from a single electrode and a single simultaneo...\nnwb.intracellular_recordings.colnames # (tuple) []\nnwb.intracellular_recordings.columns # (tuple) []\nnwb.intracellular_recordings.category_tables # (OrderedDict)\nnwb.intracellular_recordings.id # (ElementIdentifiers)\n# nwb.intracellular_recordings.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 86 rows and 0 columns\n# nwb.intracellular_recordings.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nnwb.icephys_simultaneous_recordings # (SimultaneousRecordingsTable)\nnwb.icephys_simultaneous_recordings.description # (str) A table for grouping different intracellular recordings from theIntracellularRecordingsTable tabl...\nnwb.icephys_simultaneous_recordings.colnames # (tuple) ['recordings']\nnwb.icephys_simultaneous_recordings.columns # (tuple)\nnwb.icephys_simultaneous_recordings.id # (ElementIdentifiers)\n# nwb.icephys_simultaneous_recordings.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 43 rows and 2 columns\n# nwb.icephys_simultaneous_recordings.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nnwb.icephys_simultaneous_recordings.recordings # (VectorIndex) Index for VectorData 'recordings'\n# nwb.icephys_simultaneous_recordings.recordings_index[0] # (DataFrame)\n# nwb.icephys_simultaneous_recordings.recordings_index[1] # (DataFrame)\n# nwb.icephys_simultaneous_recordings.recordings_index[2] # (DataFrame)\n# nwb.icephys_simultaneous_recordings.recordings_index[3] # (DataFrame)\n# ...\nnwb.icephys_sequential_recordings # (SequentialRecordingsTable)\nnwb.icephys_sequential_recordings.description # (str) A table for grouping different intracellular recording simultaneous_recordings from the Simultane...\nnwb.icephys_sequential_recordings.colnames # (tuple) ['simultaneous_recordings', 'stimulus_type']\nnwb.icephys_sequential_recordings.columns # (tuple)\nnwb.icephys_sequential_recordings.id # (ElementIdentifiers)\n# nwb.icephys_sequential_recordings.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 5 rows and 3 columns\n# nwb.icephys_sequential_recordings.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nnwb.icephys_sequential_recordings.simultaneous_recordings # (VectorIndex) Index for VectorData 'simultaneous_recordings'\n# nwb.icephys_sequential_recordings.simultaneous_recordings_index[0] # (DataFrame)\n# nwb.icephys_sequential_recordings.simultaneous_recordings_index[1] # (DataFrame)\n# nwb.icephys_sequential_recordings.simultaneous_recordings_index[2] # (DataFrame)\n# nwb.icephys_sequential_recordings.simultaneous_recordings_index[3] # (DataFrame)\n# ...\nnwb.icephys_sequential_recordings.stimulus_type # (VectorData) Column storing the type of stimulus used for the sequential recording"
      }
    ]
  },
  {
    "role": "user",
    "content": "On the basis of the above information, please create a jupytext notebook that introduces dandiset 001195 using the format described below.\n\nThe purpose of the notebook is to help researchers explore the dandiset and get started with a reanalysis.\n\nStart with an appropriate title for the notebook, such as \"Exploring Dandiset 001195: ...\" (that should be a markdown heading).\n\nInform the user that the notebook was generated with the assistance of AI, and that they should be cautious when interpreting the code or results.\n\nProvide an overview of the Dandiset. Include a link to the Dandiset of the form https://dandiarchive.org/dandiset/001195/0.250408.1733.\n\nSummarize what the notebook covers.\n\nList the packages that are required to run the notebook. Assume that these are already installed on the user's system. Do not include any pip install commands in the notebook.\n\nShow how to use the DANDI API to load assets.\n\nShow how to load and visualize data from the dandiset based on the above information. Feel free to organize things differently from how they are in the above information, but do not make up new information.\n\nGenerate good quality plots (without being redundant).\n\nLoad NWB data by streaming the remote file (as done in the above information) rather than downloading it.\n\nDo not use any functionality of pynwb or dandi that is not covered in the above information.\n\nYou should stick to material that is covered in the above information and do not hallucinate.\n\nThroughout the notebook, include explanatory markdown cells that guide the user through the process.\n\nThe notebook should be well-documented, and follow best practices Include comments in code cells to explain what each step does.\n\nThe Jupytext should use `# %% [markdown]` for markdown cells and `# %%` delimiters for the code cells.\n\nIf any NWB have units objects, you should know the following:\nunits.spike_times_index[i] provides the vector of spike times for the i^th unit. It is actually not an index. Do not use units.spike_times.\n\nYour notebook will be evaluated based on the following criteria:\n1. How well did the notebook help you understand the purpose and content of the Dandiset?\n2. After reviewing the notebook, do you feel confident in how to access the different types of data from this Dandiset?\n3. Did the notebook help you understand the structure of the NWB file(s) and how to work with them?\n4. Did the visualizations in the notebook generally help you understand key aspects of the data?\n5. Did any of the visualizations make it harder to understand the data (e.g., due to poor formatting, unclear axes, or misleading displays)?\n6. Do you feel more confident creating your own visualizations of the data after seeing the examples in the notebook?\n7. How well did the visualizations show the structure or complexity of the data?\n8. Were there any interpretations or conclusions in the notebook that felt unclear or not well supported by the data shown?\n9. Did any of the plots or examples feel unnecessarily repetitive or redundant?\n10. Did the notebook help you understand what kinds of questions or analyses you could do next with this Dandiset?\n11. How clear and easy was the notebook to follow?\n12. Did the notebook provide code you could easily reuse or adapt to explore the Dandiset yourself?\n13. Did the notebook help you understand what kinds of questions or analyses you could do next with this Dandiset?\n14. Overall, how helpful was this notebook for getting started with this Dandiset?\n\nYour output should be in the format:\n\n<notebook>\nThe text of the jupytext notebook should appear here.\n</notebook>\n\nNo other text should be included in the response.\n"
  },
  {
    "role": "assistant",
    "content": "<notebook>\n# %% [markdown]\n# # Exploring Dandiset 001195: Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State\n#\n# **AI-generated Jupytext Notebook**  \n# **Caution:** This notebook was generated with the help of AI. Please verify results, code, and analysis for scientific rigor and correctness before drawing conclusions or publishing results.\n#\n# ---\n# \n# ## Overview\n# \n# This notebook introduces Dandiset **001195**:  \n# **\"Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State\"**  \n#  \n# [View the Dandiset on DANDI Archive](https://dandiarchive.org/dandiset/001195/0.250408.1733)\n# \n# **Authors:** Laurel Keyes, Christopher R. Lee, Romy Wichmann, Gillian A. Matthews, Kay M. Tye, et al.\n#\n# **Description:**  \n# This Dandiset presents supporting data for a study examining distinct projections of dorsal raphe nucleus (DRN) dopamine neurons in mouse brain and their roles in social motivation and affective states akin to loneliness. The dataset contains:\n#\n# - In vivo calcium imaging data with behavioral videos\n# - Ex vivo patch-clamp electrophysiology recordings\n#\n# The present notebook focuses on how to begin exploring the **electrophysiology** (icephys) data, demonstrating access and visualization on an example file.\n#\n# ---\n#\n# ## What you'll find in this notebook:\n# - Dandiset overview and experimental context\n# - Required Python packages (see below)\n# - How to use the DANDI API to list and access files\n# - How to stream and inspect a representative NWB file (ex vivo icephys)\n# - How to extract and plot stimulus and response sweeps\n# - Step-by-step guidance and best practices\n#\n# ---\n# \n# ## Required packages\n#  \n# This notebook assumes the following packages are already installed:\n# - dandi\n# - pynwb\n# - remfile\n# - h5py\n# - numpy\n# - matplotlib\n#\n\n# %% [markdown]\n# ## 1. Setup and Import Packages\n# \n# In this section, we import the necessary packages for data access, NWB file handling, and visualization.\n\n# %%\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom dandi.dandiapi import DandiAPIClient\nimport remfile\nimport h5py\nimport pynwb\n\n# %% [markdown]\n# ## 2. Explore and Retrieve Dandiset Files via the DANDI API\n# \n# We start by connecting to the DANDI Archive and listing a subset of available assets in Dandiset 001195 (version 0.250408.1733).\n#\n\n# %%\n# Connect to DANDI Archive and Dandiset\ndandiset_id = \"001195\"\ndandiset_version = \"0.250408.1733\"\n\nclient = DandiAPIClient()\ndandiset = client.get_dandiset(dandiset_id, dandiset_version)\n\n# List the first few electrophysiology files\nprint(\"Listing available icephys NWB files:\\n\")\nasset_paths = []\nfor i, asset in enumerate(dandiset.get_assets()):\n    path = asset.path\n    if \"icephys.nwb\" in path:\n        print(f\"{i+1}: {path}\")\n        asset_paths.append(path)\n    if len(asset_paths) >= 5:\n        break\n\n# %% [markdown]\n# ## 3. Select and Stream a Representative NWB File\n# \n# We will work with the file:\n#\n# `sub-23/sub-23_ses-20150324T134114_slice-slice-1_cell-C1_icephys.nwb`\n#\n# (Alternatively, choose any other from the printed list above.)\n#\n# We'll stream this file directly from the archive using `remfile` and open it with `h5py` and `pynwb` for exploration\u2014no download required.\n\n# %%\n# Path and asset selection\nselected_asset_path = \"sub-23/sub-23_ses-20150324T134114_slice-slice-1_cell-C1_icephys.nwb\"\nasset = next(dandiset.get_assets_by_glob(selected_asset_path))\n\n# Get direct download URL for streaming\nurl = asset.download_url\n\n# Open the remote NWB file with remfile and h5py\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file, load_namespaces=True)\nnwb = io.read()\n\nprint(f\"\\nLoaded NWB file: {selected_asset_path}\")\nprint(f\"Session description: {nwb.session_description}\")\nprint(f\"Session start time: {nwb.session_start_time}\")\nprint(f\"Experimenter: {nwb.experimenter}\")\nprint(f\"Lab: {nwb.lab}\")\nprint(f\"Institution: {nwb.institution}\")\n\n# %% [markdown]\n# ## 4. NWB File Structure and Metadata\n# \n# Let's extract some key information from the NWB file:\n#\n# - **Subject metadata**\n# - **Device and electrode setup**\n# - **Available acquisition and stimulus timeseries**\n# - **How the icephys sweeps are organized**\n#\n\n# %%\n# Subject details\nsubject = nwb.subject\nprint(\"\\n--- Subject Information ---\")\nprint(f\"Subject ID: {subject.subject_id}\")\nprint(f\"Species: {subject.species}\")\nprint(f\"Strain: {subject.strain}\")\nprint(f\"Genotype: {subject.genotype}\")\nprint(f\"Sex: {subject.sex}\")\nprint(f\"Age: {subject.age}\")\nprint(f\"Subject description: {subject.description}\")\n\n# Cell, slice, layer annotation (if available)\nmeta = nwb.lab_meta_data[\"DandiIcephysMetadata\"]\nprint(\"\\n--- Cell & Slice Metadata ---\")\nprint(f\"Cell ID: {meta.cell_id}\")\nprint(f\"Slice ID: {meta.slice_id}\")\nprint(f\"Targeted layer: {meta.targeted_layer}\")\n\n# Devices and electrodes\nprint(\"\\n--- Devices and Electrodes ---\")\nfor name, dev in nwb.devices.items():\n    print(f\"Device: {name} | Description: {dev.description}\")\n\nfor name, elec in nwb.icephys_electrodes.items():\n    print(f\"Electrode: {name} | Description: {elec.description} | Device: {elec.device.name}\")\n\n# Acquisition and stimulus\nprint(\"\\n--- Acquisition timeseries ---\")\nfor key in list(nwb.acquisition.keys())[:5]:\n    print(key)\nprint(\"...\")\n\nprint(\"\\n--- Stimulus timeseries ---\")\nfor key in list(nwb.stimulus.keys())[:5]:\n    print(key)\nprint(\"...\")\n\n# %% [markdown]\n# ## 5. Explore an Example Sweep (Stimulus & Response)\n# \n# Each sweep (trial) in this ex vivo icephys experiment contains:\n# - A **stimulus** timeseries: Current applied (typically in pA or nA)\n# - A **response** timeseries: Membrane voltage response (V)\n#\n# Let's select the first sweep and plot both the current injection stimulus and the voltage response across the two channels.\n\n# %%\n# Plot stimulus and response for the first sweep and both channels\nstim_ch0 = nwb.stimulus['stimulus-01-ch-0']\nresp_ch0 = nwb.acquisition['current_clamp-response-01-ch-0']\n\nstim_ch1 = nwb.stimulus['stimulus-01-ch-1']\nresp_ch1 = nwb.acquisition['current_clamp-response-01-ch-1']\n\n# Time vector for plotting\ndt = 1.0 / stim_ch0.rate\ntime = np.arange(stim_ch0.data.shape[0]) * dt\n\nfig, axes = plt.subplots(2, 2, figsize=(12, 6), sharex=True)\nfig.suptitle('First sweep: current clamp ex vivo (01)')\n\n# Channel 0\naxes[0,0].plot(time, stim_ch0.data[:], color='tab:blue')\naxes[0,0].set_ylabel(f\"Stimulus (A)\\n[ch0]\")\naxes[0,0].set_title(stim_ch0.description)\naxes[1,0].plot(time, resp_ch0.data[:] * resp_ch0.conversion, color='tab:orange')\naxes[1,0].set_ylabel(f\"Membrane V (V)\\n[ch0]\")\naxes[1,0].set_xlabel(\"Time (s)\")\n\n# Channel 1\naxes[0,1].plot(time, stim_ch1.data[:], color='tab:blue')\naxes[0,1].set_title(stim_ch1.description)\naxes[0,1].set_ylabel(f\"Stimulus (A)\\n[ch1]\")\naxes[1,1].plot(time, resp_ch1.data[:] * resp_ch1.conversion, color='tab:orange')\naxes[1,1].set_ylabel(f\"Membrane V (V)\\n[ch1]\")\naxes[1,1].set_xlabel(\"Time (s)\")\n\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()\n\n# %% [markdown]\n# ## 6. Plot a Series of Voltage Responses Across Sweeps (Step Protocol)\n# \n# In this experiment, each sweep applies a different current step (e.g., from -120 pA to +260 pA, in 20 pA increments).\n#\n# Let's extract, for one channel, all the voltage response traces (sweeps) and plot them together, color-coded by sweep index.\n#\n\n# %%\n# How many sweeps are in this file?\n# Counting keys that match 'current_clamp-response-XX-ch-0'\nresponse_keys = [k for k in nwb.acquisition if k.startswith('current_clamp-response-') and k.endswith('ch-0')]\nstimulus_keys = [k for k in nwb.stimulus if k.startswith('stimulus-') and k.endswith('ch-0')]\n\nprint(f\"Number of current clamp sweeps (channel 0): {len(response_keys)}\")\n\n# Stack all responses for channel 0 for plotting\nresponses = []\nstimuli = []\n\nfor rkey, skey in zip(response_keys, stimulus_keys):\n    resp = nwb.acquisition[rkey]\n    stim = nwb.stimulus[skey]\n    voltage = resp.data[:] * resp.conversion  # convert to volts\n    current = stim.data[:]  # already in amperes per unit\n    responses.append(voltage)\n    stimuli.append(current)\n\nresponses = np.stack(responses)  # shape (num_sweeps, time)\nstimuli = np.stack(stimuli)\n\n# Plot all responses (overlaid)\nplt.figure(figsize=(10, 6))\noffsets = np.linspace(0, 0, responses.shape[0])  # no offset to preserve true V\ncolors = plt.cm.viridis(np.linspace(0,1,responses.shape[0]))\nfor i, v in enumerate(responses):\n    plt.plot(time, v+offsets[i], color=colors[i], label=f'Sweep {i+1}' if i<5 else None, alpha=0.5)\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Membrane voltage (V)\")\nplt.title(\"All current clamp voltage responses (channel 0, different sweeps)\")\nplt.xlim([0, time[-1]])\nplt.show()\n\n# %% [markdown]\n# ## 7. Inspect the Current Steps for Each Sweep\n# \n# To see how the injected current changes across sweeps, let's extract the mean current for each sweep and plot current vs. sweep index.\n#\n\n# %%\n# Compute mean injected current per sweep (1s window)\nsweep_currents = [np.mean(s) for s in stimuli]\n\nplt.figure(figsize=(8,4))\nplt.plot(range(1, len(sweep_currents)+1), np.array(sweep_currents)*1e12, marker='o')\nplt.xlabel(\"Sweep index\")\nplt.ylabel(\"Mean injected current (pA)\")\nplt.title(\"Stimulus protocol: Current clamp steps across sweeps\")\nplt.grid(True)\nplt.show()\n\n# %% [markdown]\n# ## 8. Notes on Further Exploration\n# \n# - This Dandiset contains many other cells, slices, and protocols (files).\n# - The structure demonstrated here is generalized across similar files in this set.\n# - For each cell/slice, you can inspect acquisition and stimulus objects, metadata (cell, layer, slice), and subject characteristics via standard pynwb and NWB methods, all accessible via streaming.\n# - Calcium imaging and behavioral data are present in separate files and can be accessed with similar streaming techniques.\n# \n# ---\n#\n# ## Next steps\n# \n# - Analyze firing patterns, action potential properties, or passive properties from icephys data.\n# - Relate electrophysiological responses to specific anatomical targets (see metadata: CeA, BNST, BLP).\n# - Explore the diversity of cells and their responses to different stimulus protocols.\n# - Use patching data, together with anatomical/molecular annotations, to map neuronal subtypes and projections.\n#\n# ---\n#\n# ## References and Links\n# - [Dandiset 001195 on DANDI Archive](https://dandiarchive.org/dandiset/001195/0.250408.1733)\n# - Matthews, G.A. et al., Keyes, L.R., Lee, C.R., Wichmann, R., Tye, K.M. et al., \"Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State\".\n#\n# ---\n#\n# *End of notebook. For any questions, consult the Dandiset metadata on the DANDI Archive.*\n</notebook>"
  },
  {
    "role": "system",
    "content": "The notebook execution failed with the following error:\n\nNotebook execution failed: [NbClientApp] Executing notebooks/dandisets/001195/0.250408.1733/skip-explore/gpt-4.1/h-2/notebook.ipynb\n[NbClientApp] Executing notebook with kernel: \nTraceback (most recent call last):\n  File \"/home/magland/miniconda3/envs/dev/bin/jupyter-execute\", line 8, in <module>\n    sys.exit(main())\n             ^^^^^^\n  File \"/home/magland/miniconda3/envs/dev/lib/python3.12/site-packages/jupyter_core/application.py\", line 283, in launch_instance\n    super().launch_instance(argv=argv, **kwargs)\n  File \"/home/magland/miniconda3/envs/dev/lib/python3.12/site-packages/traitlets/config/application.py\", line 1074, in launch_instance\n    app.initialize(argv)\n  File \"/home/magland/miniconda3/envs/dev/lib/python3.12/site-packages/traitlets/config/application.py\", line 118, in inner\n    return method(app, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/magland/miniconda3/envs/dev/lib/python3.12/site-packages/nbclient/cli.py\", line 161, in initialize\n    self.run_notebook(path)\n  File \"/home/magland/miniconda3/envs/dev/lib/python3.12/site-packages/nbclient/cli.py\", line 215, in run_notebook\n    client.execute()\n  File \"/home/magland/miniconda3/envs/dev/lib/python3.12/site-packages/jupyter_core/utils/__init__.py\", line 165, in wrapped\n    return loop.run_until_complete(inner)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/magland/miniconda3/envs/dev/lib/python3.12/asyncio/base_events.py\", line 685, in run_until_complete\n    return future.result()\n           ^^^^^^^^^^^^^^^\n  File \"/home/magland/miniconda3/envs/dev/lib/python3.12/site-packages/nbclient/client.py\", line 709, in async_execute\n    await self.async_execute_cell(\n  File \"/home/magland/miniconda3/envs/dev/lib/python3.12/site-packages/nbclient/client.py\", line 1062, in async_execute_cell\n    await self._check_raise_for_error(cell, cell_index, exec_reply)\n  File \"/home/magland/miniconda3/envs/dev/lib/python3.12/site-packages/nbclient/client.py\", line 918, in _check_raise_for_error\n    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)\nnbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:\n------------------\n# How many sweeps are in this file?\n# Counting keys that match 'current_clamp-response-XX-ch-0'\nresponse_keys = [k for k in nwb.acquisition if k.startswith('current_clamp-response-') and k.endswith('ch-0')]\nstimulus_keys = [k for k in nwb.stimulus if k.startswith('stimulus-') and k.endswith('ch-0')]\n\nprint(f\"Number of current clamp sweeps (channel 0): {len(response_keys)}\")\n\n# Stack all responses for channel 0 for plotting\nresponses = []\nstimuli = []\n\nfor rkey, skey in zip(response_keys, stimulus_keys):\n    resp = nwb.acquisition[rkey]\n    stim = nwb.stimulus[skey]\n    voltage = resp.data[:] * resp.conversion  # convert to volts\n    current = stim.data[:]  # already in amperes per unit\n    responses.append(voltage)\n    stimuli.append(current)\n\nresponses = np.stack(responses)  # shape (num_sweeps, time)\nstimuli = np.stack(stimuli)\n\n# Plot all responses (overlaid)\nplt.figure(figsize=(10, 6))\noffsets = np.linspace(0, 0, responses.shape[0])  # no offset to preserve true V\ncolors = plt.cm.viridis(np.linspace(0,1,responses.shape[0]))\nfor i, v in enumerate(responses):\n    plt.plot(time, v+offsets[i], color=colors[i], label=f'Sweep {i+1}' if i<5 else None, alpha=0.5)\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Membrane voltage (V)\")\nplt.title(\"All current clamp voltage responses (channel 0, different sweeps)\")\nplt.xlim([0, time[-1]])\nplt.show()\n------------------\n\n----- stdout -----\nNumber of current clamp sweeps (channel 0): 23\n------------------\n\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)\nCell \u001b[0;32mIn[6], line 20\u001b[0m\n\u001b[1;32m     17\u001b[0m     responses\u001b[38;5;241m.\u001b[39mappend(voltage)\n\u001b[1;32m     18\u001b[0m     stimuli\u001b[38;5;241m.\u001b[39mappend(current)\n\u001b[0;32m---> 20\u001b[0m responses \u001b[38;5;241m=\u001b[39m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstack\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresponses\u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# shape (num_sweeps, time)\u001b[39;00m\n\u001b[1;32m     21\u001b[0m stimuli \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mstack(stimuli)\n\u001b[1;32m     23\u001b[0m \u001b[38;5;66;03m# Plot all responses (overlaid)\u001b[39;00m\n\nFile \u001b[0;32m~/miniconda3/envs/dev/lib/python3.12/site-packages/numpy/_core/shape_base.py:457\u001b[0m, in \u001b[0;36mstack\u001b[0;34m(arrays, axis, out, dtype, casting)\u001b[0m\n\u001b[1;32m    455\u001b[0m shapes \u001b[38;5;241m=\u001b[39m {arr\u001b[38;5;241m.\u001b[39mshape \u001b[38;5;28;01mfor\u001b[39;00m arr \u001b[38;5;129;01min\u001b[39;00m arrays}\n\u001b[1;32m    456\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(shapes) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m--> 457\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mall input arrays must have the same shape\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    459\u001b[0m result_ndim \u001b[38;5;241m=\u001b[39m arrays[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m    460\u001b[0m axis \u001b[38;5;241m=\u001b[39m normalize_axis_index(axis, result_ndim)\n\n\u001b[0;31mValueError\u001b[0m: all input arrays must have the same shape\n\n\n\nPlease provide a corrected version of the notebook."
  },
  {
    "role": "assistant",
    "content": "<notebook>\n# %% [markdown]\n# # Exploring Dandiset 001195: Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State\n#\n# **AI-generated Jupytext Notebook**  \n# **Caution:** This notebook was generated with the help of AI. Please verify results, code, and analysis for scientific rigor and correctness before drawing conclusions or publishing results.\n#\n# ---\n# \n# ## Overview\n# \n# This notebook introduces Dandiset **001195**:  \n# **\"Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State\"**  \n#  \n# [View the Dandiset on DANDI Archive](https://dandiarchive.org/dandiset/001195/0.250408.1733)\n# \n# **Authors:** Laurel Keyes, Christopher R. Lee, Romy Wichmann, Gillian A. Matthews, Kay M. Tye, et al.\n#\n# **Description:**  \n# This Dandiset presents supporting data for a study examining distinct projections of dorsal raphe nucleus (DRN) dopamine neurons in mouse brain and their roles in social motivation and affective states akin to loneliness. The dataset contains:\n#\n# - In vivo calcium imaging data with behavioral videos\n# - Ex vivo patch-clamp electrophysiology recordings\n#\n# The present notebook focuses on how to begin exploring the **electrophysiology** (icephys) data, demonstrating access and visualization on an example file.\n#\n# ---\n#\n# ## What you'll find in this notebook:\n# - Dandiset overview and experimental context\n# - Required Python packages (see below)\n# - How to use the DANDI API to list and access files\n# - How to stream and inspect a representative NWB file (ex vivo icephys)\n# - How to extract and plot stimulus and response sweeps\n# - Step-by-step guidance and best practices\n#\n# ---\n# \n# ## Required packages\n#  \n# This notebook assumes the following packages are already installed:\n# - dandi\n# - pynwb\n# - remfile\n# - h5py\n# - numpy\n# - matplotlib\n#\n\n# %% [markdown]\n# ## 1. Setup and Import Packages\n# \n# In this section, we import the necessary packages for data access, NWB file handling, and visualization.\n\n# %%\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom dandi.dandiapi import DandiAPIClient\nimport remfile\nimport h5py\nimport pynwb\n\n# %% [markdown]\n# ## 2. Explore and Retrieve Dandiset Files via the DANDI API\n# \n# We start by connecting to the DANDI Archive and listing a subset of available assets in Dandiset 001195 (version 0.250408.1733).\n#\n\n# %%\n# Connect to DANDI Archive and Dandiset\ndandiset_id = \"001195\"\ndandiset_version = \"0.250408.1733\"\n\nclient = DandiAPIClient()\ndandiset = client.get_dandiset(dandiset_id, dandiset_version)\n\n# List the first few electrophysiology files\nprint(\"Listing available icephys NWB files:\\n\")\nasset_paths = []\nfor i, asset in enumerate(dandiset.get_assets()):\n    path = asset.path\n    if \"icephys.nwb\" in path:\n        print(f\"{i+1}: {path}\")\n        asset_paths.append(path)\n    if len(asset_paths) >= 5:\n        break\n\n# %% [markdown]\n# ## 3. Select and Stream a Representative NWB File\n# \n# We will work with the file:\n#\n# `sub-23/sub-23_ses-20150324T134114_slice-slice-1_cell-C1_icephys.nwb`\n#\n# (Alternatively, choose any other from the printed list above.)\n#\n# We'll stream this file directly from the archive using `remfile` and open it with `h5py` and `pynwb` for exploration\u2014no download required.\n\n# %%\n# Path and asset selection\nselected_asset_path = \"sub-23/sub-23_ses-20150324T134114_slice-slice-1_cell-C1_icephys.nwb\"\nasset = next(dandiset.get_assets_by_glob(selected_asset_path))\n\n# Get direct download URL for streaming\nurl = asset.download_url\n\n# Open the remote NWB file with remfile and h5py\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file, load_namespaces=True)\nnwb = io.read()\n\nprint(f\"\\nLoaded NWB file: {selected_asset_path}\")\nprint(f\"Session description: {nwb.session_description}\")\nprint(f\"Session start time: {nwb.session_start_time}\")\nprint(f\"Experimenter: {nwb.experimenter}\")\nprint(f\"Lab: {nwb.lab}\")\nprint(f\"Institution: {nwb.institution}\")\n\n# %% [markdown]\n# ## 4. NWB File Structure and Metadata\n# \n# Let's extract some key information from the NWB file:\n#\n# - **Subject metadata**\n# - **Device and electrode setup**\n# - **Available acquisition and stimulus timeseries**\n# - **How the icephys sweeps are organized**\n#\n\n# %%\n# Subject details\nsubject = nwb.subject\nprint(\"\\n--- Subject Information ---\")\nprint(f\"Subject ID: {subject.subject_id}\")\nprint(f\"Species: {subject.species}\")\nprint(f\"Strain: {subject.strain}\")\nprint(f\"Genotype: {subject.genotype}\")\nprint(f\"Sex: {subject.sex}\")\nprint(f\"Age: {subject.age}\")\nprint(f\"Subject description: {subject.description}\")\n\n# Cell, slice, layer annotation (if available)\nmeta = nwb.lab_meta_data[\"DandiIcephysMetadata\"]\nprint(\"\\n--- Cell & Slice Metadata ---\")\nprint(f\"Cell ID: {meta.cell_id}\")\nprint(f\"Slice ID: {meta.slice_id}\")\nprint(f\"Targeted layer: {meta.targeted_layer}\")\n\n# Devices and electrodes\nprint(\"\\n--- Devices and Electrodes ---\")\nfor name, dev in nwb.devices.items():\n    print(f\"Device: {name} | Description: {dev.description}\")\n\nfor name, elec in nwb.icephys_electrodes.items():\n    print(f\"Electrode: {name} | Description: {elec.description} | Device: {elec.device.name}\")\n\n# Acquisition and stimulus\nprint(\"\\n--- Acquisition timeseries ---\")\nfor key in list(nwb.acquisition.keys())[:5]:\n    print(key)\nprint(\"...\")\n\nprint(\"\\n--- Stimulus timeseries ---\")\nfor key in list(nwb.stimulus.keys())[:5]:\n    print(key)\nprint(\"...\")\n\n# %% [markdown]\n# ## 5. Explore an Example Sweep (Stimulus & Response)\n# \n# Each sweep (trial) in this ex vivo icephys experiment contains:\n# - A **stimulus** timeseries: Current applied (typically in pA or nA)\n# - A **response** timeseries: Membrane voltage response (V)\n#\n# Let's select the first sweep and plot both the current injection stimulus and the voltage response across the two channels.\n\n# %%\n# Plot stimulus and response for the first sweep and both channels\nstim_ch0 = nwb.stimulus['stimulus-01-ch-0']\nresp_ch0 = nwb.acquisition['current_clamp-response-01-ch-0']\n\nstim_ch1 = nwb.stimulus['stimulus-01-ch-1']\nresp_ch1 = nwb.acquisition['current_clamp-response-01-ch-1']\n\n# Time vector for plotting\ndt = 1.0 / stim_ch0.rate\ntime = np.arange(stim_ch0.data.shape[0]) * dt\n\nfig, axes = plt.subplots(2, 2, figsize=(12, 6), sharex=True)\nfig.suptitle('First sweep: current clamp ex vivo (01)')\n\n# Channel 0\naxes[0,0].plot(time, stim_ch0.data[:], color='tab:blue')\naxes[0,0].set_ylabel(f\"Stimulus (A)\\n[ch0]\")\naxes[0,0].set_title(stim_ch0.description)\naxes[1,0].plot(time, resp_ch0.data[:] * resp_ch0.conversion, color='tab:orange')\naxes[1,0].set_ylabel(f\"Membrane V (V)\\n[ch0]\")\naxes[1,0].set_xlabel(\"Time (s)\")\n\n# Channel 1\naxes[0,1].plot(time, stim_ch1.data[:], color='tab:blue')\naxes[0,1].set_title(stim_ch1.description)\naxes[0,1].set_ylabel(f\"Stimulus (A)\\n[ch1]\")\naxes[1,1].plot(time, resp_ch1.data[:] * resp_ch1.conversion, color='tab:orange')\naxes[1,1].set_ylabel(f\"Membrane V (V)\\n[ch1]\")\naxes[1,1].set_xlabel(\"Time (s)\")\n\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()\n\n# %% [markdown]\n# ## 6. Plot a Series of Voltage Responses Across Sweeps (Step Protocol)\n# \n# In this experiment, each sweep applies a different current step (e.g., from -120 pA to +260 pA, in 20 pA increments).\n#\n# Let's extract, for one channel, all the voltage response traces (sweeps) and plot them together, color-coded by sweep index.\n#\n# Note: Some sweeps may be of different length (e.g., 3000, 4000, etc. time points). We'll check the minimum length and trim all sweeps to that length so they can be stacked and plotted together.\n\n# %%\n# How many sweeps are in this file?\n# Counting keys that match 'current_clamp-response-XX-ch-0'\nresponse_keys = [k for k in nwb.acquisition if k.startswith('current_clamp-response-') and k.endswith('ch-0')]\nstimulus_keys = [k for k in nwb.stimulus if k.startswith('stimulus-') and k.endswith('ch-0')]\n\nprint(f\"Number of current clamp sweeps (channel 0): {len(response_keys)}\")\n\n# Check and trim all responses to the same length (minimum found)\nresponse_lengths = [nwb.acquisition[k].data.shape[0] for k in response_keys]\nstimulus_lengths = [nwb.stimulus[k].data.shape[0] for k in stimulus_keys]\nmin_len = min(min(response_lengths), min(stimulus_lengths))\n\nresponses = []\nstimuli = []\n\nfor rkey, skey in zip(response_keys, stimulus_keys):\n    resp = nwb.acquisition[rkey]\n    stim = nwb.stimulus[skey]\n    # Only take the first min_len data points from each sweep\n    voltage = resp.data[:min_len] * resp.conversion  # convert to volts\n    current = stim.data[:min_len]  # already in amperes per unit\n    responses.append(voltage)\n    stimuli.append(current)\n\nresponses = np.stack(responses)  # shape (num_sweeps, time)\nstimuli = np.stack(stimuli)\n\ntime_sweep = np.arange(min_len) * (1.0 / nwb.acquisition[response_keys[0]].rate)\n\n# Plot all responses (overlaid)\nplt.figure(figsize=(10, 6))\ncolors = plt.cm.viridis(np.linspace(0,1,responses.shape[0]))\nfor i, v in enumerate(responses):\n    plt.plot(time_sweep, v, color=colors[i], label=f'Sweep {i+1}' if i<5 else None, alpha=0.7)\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Membrane voltage (V)\")\nplt.title(\"All current clamp voltage responses (channel 0, different sweeps)\")\nplt.xlim([0, time_sweep[-1]])\nplt.show()\n\n# %% [markdown]\n# ## 7. Inspect the Current Steps for Each Sweep\n# \n# To see how the injected current changes across sweeps, let's extract the mean current for each sweep and plot current vs. sweep index.  \n# We'll also plot the individual stimulus (current injection) waveforms for a few example sweeps.\n\n# %%\n# Compute mean injected current per sweep over entire sweep interval\nsweep_currents = [np.mean(s) for s in stimuli]\n\nplt.figure(figsize=(8,4))\nplt.plot(range(1, len(sweep_currents)+1), np.array(sweep_currents)*1e12, marker='o')\nplt.xlabel(\"Sweep index\")\nplt.ylabel(\"Mean injected current (pA)\")\nplt.title(\"Stimulus protocol: Current clamp steps across sweeps\")\nplt.grid(True)\nplt.show()\n\n# Plot a selection of stimulus waveforms to illustrate step protocol\nplt.figure(figsize=(10, 5))\nsel = np.linspace(0, len(stimuli)-1, min(7, len(stimuli))).astype(int)  # up to 7\nfor idx in sel:\n    plt.plot(time_sweep, stimuli[idx]*1e12, label=f'Sweep {idx+1}')\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Injected current (pA)\")\nplt.title(\"Injected current steps for selected sweeps\")\nplt.legend()\nplt.show()\n\n# %% [markdown]\n# ## 8. Notes on Further Exploration\n# \n# - This Dandiset contains many other cells, slices, and protocols (files).\n# - The structure demonstrated here is generalized across similar files in this set.\n# - For each cell/slice, you can inspect acquisition and stimulus objects, metadata (cell, layer, slice), and subject characteristics via standard pynwb and NWB methods, all accessible via streaming.\n# - Calcium imaging and behavioral data are present in separate files and can be accessed with similar streaming techniques.\n# \n# ---\n#\n# ## Next steps\n# \n# - Analyze firing patterns, action potential properties, or passive properties from icephys data.\n# - Relate electrophysiological responses to specific anatomical targets (see metadata: CeA, BNST, BLP).\n# - Explore the diversity of cells and their responses to different stimulus protocols.\n# - Use patching data, together with anatomical/molecular annotations, to map neuronal subtypes and projections.\n#\n# ---\n#\n# ## References and Links\n# - [Dandiset 001195 on DANDI Archive](https://dandiarchive.org/dandiset/001195/0.250408.1733)\n# - Matthews, G.A. et al., Keyes, L.R., Lee, C.R., Wichmann, R., Tye, K.M. et al., \"Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State\".\n#\n# ---\n#\n# *End of notebook. For any questions, consult the Dandiset metadata on the DANDI Archive.*\n</notebook>\n"
  }
]