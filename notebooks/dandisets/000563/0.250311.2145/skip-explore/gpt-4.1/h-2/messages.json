[
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata about Dandiset 000563 version 0.250311.2145."
      },
      {
        "type": "text",
        "text": "{\n  \"id\": \"DANDI:000563/0.250311.2145\",\n  \"doi\": \"10.48324/dandi.000563/0.250311.2145\",\n  \"url\": \"https://dandiarchive.org/dandiset/000563/0.250311.2145\",\n  \"name\": \"Allen Institute Openscope - Barcoding\",\n  \"about\": [],\n  \"access\": [\n    {\n      \"status\": \"dandi:OpenAccess\",\n      \"schemaKey\": \"AccessRequirements\"\n    }\n  ],\n  \"license\": [\n    \"spdx:CC-BY-4.0\"\n  ],\n  \"version\": \"0.250311.2145\",\n  \"@context\": \"https://raw.githubusercontent.com/dandi/schema/master/releases/0.6.4/context.json\",\n  \"citation\": \"Reinagel, Pamela; Lecoq, J\\u00e9r\\u00f4me; Durand, S\\u00e9verine; Gillis, Ryan; Carlson, Mikayla; Peene, Carter; Bawany, Ahad; Johnson, Tye; Amaya, Avalon; Han, Warren; Wilkes, Josh; Nguyen, Katrina; Suarez, Lucas; Naidoo, Robyn; Ouellette, Ben; Grasso, Conor ; Loeffler, Henry; Belski, Hannah; Williford, Ali; Swapp, Jackie; Howard, Robert (2025) Allen Institute Openscope - Barcoding (Version 0.250311.2145) [Data set]. DANDI Archive. https://doi.org/10.48324/dandi.000563/0.250311.2145\",\n  \"keywords\": [\n    \"mouse\",\n    \"neuropixel\",\n    \"extracellular electrophysiology\",\n    \"neocortex\",\n    \"excitatory\",\n    \"inhibitory\",\n    \"barcoding\",\n    \"temporal\",\n    \"precision\"\n  ],\n  \"protocol\": [],\n  \"schemaKey\": \"Dandiset\",\n  \"identifier\": \"DANDI:000563\",\n  \"repository\": \"https://dandiarchive.org\",\n  \"contributor\": [\n    {\n      \"name\": \"National Institutes of Health (NIH)\",\n      \"roleName\": [\n        \"dcite:Funder\"\n      ],\n      \"schemaKey\": \"Organization\",\n      \"awardNumber\": \"1 U24 NS 113646-03\"\n    },\n    {\n      \"url\": \"http://www.ratrix.org\",\n      \"name\": \"Reinagel, Pamela\",\n      \"email\": \"preinagel@ucsd.edu\",\n      \"roleName\": [\n        \"dcite:Author\",\n        \"dcite:Conceptualization\",\n        \"dcite:ContactPerson\",\n        \"dcite:FormalAnalysis\",\n        \"dcite:Investigation\",\n        \"dcite:ProjectLeader\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-6338-2611\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Lecoq, J\\u00e9r\\u00f4me\",\n      \"email\": \"jeromel@alleninstitute.org\",\n      \"roleName\": [\n        \"dcite:Author\",\n        \"dcite:ContactPerson\",\n        \"dcite:DataManager\",\n        \"dcite:ProjectLeader\",\n        \"dcite:ProjectManager\",\n        \"dcite:Software\",\n        \"dcite:Supervision\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0002-0131-0938\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Durand, S\\u00e9verine\",\n      \"roleName\": [\n        \"dcite:Supervision\",\n        \"dcite:DataCurator\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0001-7788-0200\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Gillis, Ryan\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0000-1879-6519\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Carlson, Mikayla\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0003-7019-2781\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Peene, Carter\",\n      \"roleName\": [\n        \"dcite:DataCurator\",\n        \"dcite:DataManager\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0000-6660-2264\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Bawany, Ahad\",\n      \"roleName\": [\n        \"dcite:DataManager\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Johnson, Tye\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0006-7239-7571\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Amaya, Avalon\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0003-2274-2892\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Han, Warren\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0006-0104-0380\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Wilkes, Josh\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0005-4858-2219\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Nguyen, Katrina\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0009-8547-9703\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Suarez, Lucas\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0002-0121-3334\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Naidoo, Robyn\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0004-0996-8808\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Ouellette, Ben\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0000-0003-4913-554X\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Grasso, Conor \",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0003-6384-4075\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Loeffler, Henry\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0007-3935-6863\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Belski, Hannah\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0001-5422-5964\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Williford, Ali\",\n      \"roleName\": [\n        \"dcite:ProjectManager\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0000-7282-7515\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Swapp, Jackie\",\n      \"roleName\": [\n        \"dcite:ProjectManager\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0008-4965-6242\",\n      \"includeInCitation\": true\n    },\n    {\n      \"name\": \"Howard, Robert\",\n      \"roleName\": [\n        \"dcite:DataCollector\"\n      ],\n      \"schemaKey\": \"Person\",\n      \"identifier\": \"0009-0008-5499-549X\",\n      \"includeInCitation\": true\n    }\n  ],\n  \"dateCreated\": \"2023-06-15T18:31:33.746898+00:00\",\n  \"description\": \"Some visual neurons have been shown to respond to white noise flicker visual stimuli with high temporal precision, particularly retinal ganglion cells and LGN relay cells. Responses to white noise stimulation are useful for a variety of analyses, including information theoretic measures and generative models of precise spike timing. However the literature was lacking data on responses to white noise in cortical visual areas, or in the visual stream flowing through the superior colliculus.\\n\\nThis experiment used the OpenScope Neuropixels passive viewing protocol, and displayed visual stimuli modulated in time by a short, repeated white noise sequence. The visual stimulus was either a spatially uniform field whose luminance was modulated in time (Full Field Flicker), or a standing sinusoidal grating whose contrast was modulated in time (Static Gratings). Perhaps surprisingly, most cortical visual neurons responded well to full-field flicker white noise.  To obtain large populations of neurons in subcortical areas, roughly half of the mice were recorded in a novel electrode configuration. \\n\\nWhen white noise visual stimuli are presented repeatedly and the neural responses displayed as spike rasters, the rasters look remarkably like UPC codes or bar codes. The same bar-code-like patterns have been found in neurons recorded in different individual animals, and even neurons in different species. We speculated that these barcodes could be used as identifiers of discrete cell types. The Temporal Barcode Dataset provides \\\"barcodes\\\" for visually responsive neurons throughout the mouse brain, enabling a test of this hypothesis.\",\n  \"publishedBy\": {\n    \"id\": \"urn:uuid:1253fe88-8e00-481c-a76c-55db684dff45\",\n    \"name\": \"DANDI publish\",\n    \"endDate\": \"2025-03-11T21:45:53.716747+00:00\",\n    \"schemaKey\": \"PublishActivity\",\n    \"startDate\": \"2025-03-11T21:45:53.716747+00:00\",\n    \"wasAssociatedWith\": [\n      {\n        \"id\": \"urn:uuid:a3ac88b6-1365-43fc-90fe-e7c76d77f0a9\",\n        \"name\": \"DANDI API\",\n        \"version\": \"0.1.0\",\n        \"schemaKey\": \"Software\",\n        \"identifier\": \"RRID:SCR_017571\"\n      }\n    ]\n  },\n  \"studyTarget\": [],\n  \"assetsSummary\": {\n    \"species\": [\n      {\n        \"name\": \"Mus musculus - House mouse\",\n        \"schemaKey\": \"SpeciesType\",\n        \"identifier\": \"http://purl.obolibrary.org/obo/NCBITaxon_10090\"\n      }\n    ],\n    \"approach\": [\n      {\n        \"name\": \"electrophysiological approach\",\n        \"schemaKey\": \"ApproachType\"\n      },\n      {\n        \"name\": \"optogenetic approach\",\n        \"schemaKey\": \"ApproachType\"\n      }\n    ],\n    \"schemaKey\": \"AssetsSummary\",\n    \"dataStandard\": [\n      {\n        \"name\": \"Neurodata Without Borders (NWB)\",\n        \"schemaKey\": \"StandardsType\",\n        \"identifier\": \"RRID:SCR_015242\"\n      }\n    ],\n    \"numberOfBytes\": 200169653509,\n    \"numberOfFiles\": 94,\n    \"numberOfSubjects\": 14,\n    \"variableMeasured\": [\n      \"LFP\",\n      \"ElectricalSeries\",\n      \"ProcessingModule\",\n      \"OptogeneticSeries\",\n      \"Units\"\n    ],\n    \"measurementTechnique\": [\n      {\n        \"name\": \"multi electrode extracellular electrophysiology recording technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"signal filtering technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"analytical technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      },\n      {\n        \"name\": \"spike sorting technique\",\n        \"schemaKey\": \"MeasurementTechniqueType\"\n      }\n    ]\n  },\n  \"datePublished\": \"2025-03-11T21:45:53.716747+00:00\",\n  \"schemaVersion\": \"0.6.4\",\n  \"ethicsApproval\": [\n    {\n      \"schemaKey\": \"EthicsApproval\",\n      \"identifier\": \"\\u200bAllen Institute Institutional Animal Care and Use Committee (IACUC), protocol 2117\",\n      \"contactPoint\": {\n        \"schemaKey\": \"ContactPoint\"\n      }\n    }\n  ],\n  \"wasGeneratedBy\": [],\n  \"acknowledgement\": \"We thank the Allen Institute founder, Paul G. Allen, for his vision, encouragement, and support.\",\n  \"relatedResource\": [],\n  \"manifestLocation\": [\n    \"https://dandiarchive.s3.amazonaws.com/dandisets/000563/0.250311.2145/assets.yaml\"\n  ]\n}"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is a listing of some of the files in the Dandiset."
      },
      {
        "type": "text",
        "text": "sub-699241/sub-699241_ses-1318772854_probe-1_ecephys.nwb\nsub-699241/sub-699241_ses-1318772854_probe-3_ecephys.nwb\nsub-699241/sub-699241_ses-1318772854_probe-4_ecephys.nwb\nsub-699241/sub-699241_ses-1318772854_probe-0_ecephys.nwb\nsub-699241/sub-699241_ses-1318772854_ogen.nwb\nsub-699241/sub-699241_ses-1318772854_probe-2_ecephys.nwb\nsub-699846/sub-699846_ses-1314466742_probe-1_ecephys.nwb\nsub-699846/sub-699846_ses-1314466742_probe-2_ecephys.nwb\nsub-699846/sub-699846_ses-1314466742_probe-4_ecephys.nwb\nsub-699846/sub-699846_ses-1314466742_probe-3_ecephys.nwb"
      }
    ]
  },
  {
    "role": "system",
    "content": [
      {
        "type": "text",
        "text": "The following is metadata and usage information about the file sub-699241/sub-699241_ses-1318772854_probe-1_ecephys.nwb."
      },
      {
        "type": "text",
        "text": "\nimport pynwb\nimport h5py\nimport remfile\n\n# Load\nfrom dandi.dandiapi import DandiAPIClient\n\nclient = DandiAPIClient()\ndandiset = client.get_dandiset(\"000563\", \"0.250311.2145\")\nurl = next(dandiset.get_assets_by_glob(\"sub-699241/sub-699241_ses-1318772854_probe-1_ecephys.nwb\")).download_url\n\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file)\nnwb = io.read()\n\nnwb # (NWBFile)\nnwb.session_description # (str) LFP data and associated info for one probe\nnwb.identifier # (str) 1\nnwb.session_start_time # (datetime) 2023-12-19T00:00:00-08:00\nnwb.timestamps_reference_time # (datetime) 2023-12-19T00:00:00-08:00\nnwb.file_create_date # (list) [datetime.datetime(2024, 2, 22, 23, 47, 13, 128007, tzinfo=tzoffset(None, -28800))]\nnwb.acquisition # (LabelledDict)\nacquisition = nwb.acquisition\nprobe_1_lfp = acquisition[\"probe_1_lfp\"]\nprobe_1_lfp # (LFP)\nprobe_1_lfp.electrical_series # (LabelledDict)\nelectrical_series = probe_1_lfp.electrical_series\nprobe_1_lfp_data = electrical_series[\"probe_1_lfp_data\"]\nprobe_1_lfp_data # (ElectricalSeries)\nprobe_1_lfp_data.resolution # (float64) -1.0\nprobe_1_lfp_data.comments # (str) no comments\nprobe_1_lfp_data.description # (str) no description\nprobe_1_lfp_data.conversion # (float64) 1.0\nprobe_1_lfp_data.offset # (float64) 0.0\nprobe_1_lfp_data.unit # (str) volts\nprobe_1_lfp_data.data # (Dataset) shape (10178133, 96); dtype float32\n# probe_1_lfp_data.data[:, :] # Access all data\n# probe_1_lfp_data.data[0:n, :] # Access first n rows\n# probe_1_lfp_data.data[:, 0:n] # Access first n columns\nprobe_1_lfp_data.timestamps # (Dataset) shape (10178133,); dtype float64\n# probe_1_lfp_data.timestamps[:] # Access all data\n# probe_1_lfp_data.timestamps[0:n] # Access first n elements\nprobe_1_lfp_data.timestamps_unit # (str) seconds\nprobe_1_lfp_data.interval # (int) 1\nprobe_1_lfp_data.electrodes # (DynamicTableRegion)\nprobe_1_lfp_data.electrodes.description # (str) lfp channels on probe 1\nprobe_1_lfp_data.electrodes.table # (DynamicTable)\nprobe_1_lfp_data.electrodes.table.description # (str) metadata about extracellular electrodes\nprobe_1_lfp_data.electrodes.table.colnames # (tuple)\nprobe_1_lfp_data.electrodes.table.columns # (tuple)\nprobe_1_lfp_data.electrodes.table.id # (ElementIdentifiers)\n# probe_1_lfp_data.electrodes.table.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 96 rows and 13 columns\n# probe_1_lfp_data.electrodes.table.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nprobe_1_lfp_data.electrodes.table.location # (VectorData) the location of channel within the subject e.g. brain region\nprobe_1_lfp_data.electrodes.table.group # (VectorData) a reference to the ElectrodeGroup this electrode is a part of\nprobe_1_lfp_data.electrodes.table.group_name # (VectorData) the name of the ElectrodeGroup this electrode is a part of\nprobe_1_lfp_data.electrodes.table.probe_vertical_position # (VectorData) Length-wise position of electrode/channel on device (microns)\nprobe_1_lfp_data.electrodes.table.probe_horizontal_position # (VectorData) Width-wise position of electrode/channel on device (microns)\nprobe_1_lfp_data.electrodes.table.probe_id # (VectorData) The unique id of this electrode's/channel's device\nprobe_1_lfp_data.electrodes.table.local_index # (VectorData) The local index of electrode/channel on device\nprobe_1_lfp_data.electrodes.table.valid_data # (VectorData) Whether data from this electrode/channel is usable\nprobe_1_lfp_data.electrodes.table.x # (VectorData) the x coordinate of the position (+x is posterior)\nprobe_1_lfp_data.electrodes.table.y # (VectorData) the y coordinate of the position (+y is inferior)\nprobe_1_lfp_data.electrodes.table.z # (VectorData) the z coordinate of the position (+z is right)\nprobe_1_lfp_data.electrodes.table.imp # (VectorData) the impedance of the electrode, in ohms\nprobe_1_lfp_data.electrodes.table.filtering # (VectorData) description of hardware filtering, including the filter name and frequency cutoffs\nprobe_1_lfp_data = acquisition[\"probe_1_lfp_data\"]\nprobe_1_lfp_data # (ElectricalSeries)\nprobe_1_lfp_data.resolution # (float64) -1.0\nprobe_1_lfp_data.comments # (str) no comments\nprobe_1_lfp_data.description # (str) no description\nprobe_1_lfp_data.conversion # (float64) 1.0\nprobe_1_lfp_data.offset # (float64) 0.0\nprobe_1_lfp_data.unit # (str) volts\nprobe_1_lfp_data.data # (Dataset) shape (10178133, 96); dtype float32\n# probe_1_lfp_data.data[:, :] # Access all data\n# probe_1_lfp_data.data[0:n, :] # Access first n rows\n# probe_1_lfp_data.data[:, 0:n] # Access first n columns\nprobe_1_lfp_data.timestamps # (Dataset) shape (10178133,); dtype float64\n# probe_1_lfp_data.timestamps[:] # Access all data\n# probe_1_lfp_data.timestamps[0:n] # Access first n elements\nprobe_1_lfp_data.timestamps_unit # (str) seconds\nprobe_1_lfp_data.interval # (int) 1\nprobe_1_lfp_data.electrodes # (DynamicTableRegion)\nprobe_1_lfp_data.electrodes.description # (str) lfp channels on probe 1\nprobe_1_lfp_data.electrodes.table # (DynamicTable)\nprobe_1_lfp_data.electrodes.table.description # (str) metadata about extracellular electrodes\nprobe_1_lfp_data.electrodes.table.colnames # (tuple)\nprobe_1_lfp_data.electrodes.table.columns # (tuple)\nprobe_1_lfp_data.electrodes.table.id # (ElementIdentifiers)\n# probe_1_lfp_data.electrodes.table.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 96 rows and 13 columns\n# probe_1_lfp_data.electrodes.table.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nprobe_1_lfp_data.electrodes.table.location # (VectorData) the location of channel within the subject e.g. brain region\nprobe_1_lfp_data.electrodes.table.group # (VectorData) a reference to the ElectrodeGroup this electrode is a part of\nprobe_1_lfp_data.electrodes.table.group_name # (VectorData) the name of the ElectrodeGroup this electrode is a part of\nprobe_1_lfp_data.electrodes.table.probe_vertical_position # (VectorData) Length-wise position of electrode/channel on device (microns)\nprobe_1_lfp_data.electrodes.table.probe_horizontal_position # (VectorData) Width-wise position of electrode/channel on device (microns)\nprobe_1_lfp_data.electrodes.table.probe_id # (VectorData) The unique id of this electrode's/channel's device\nprobe_1_lfp_data.electrodes.table.local_index # (VectorData) The local index of electrode/channel on device\nprobe_1_lfp_data.electrodes.table.valid_data # (VectorData) Whether data from this electrode/channel is usable\nprobe_1_lfp_data.electrodes.table.x # (VectorData) the x coordinate of the position (+x is posterior)\nprobe_1_lfp_data.electrodes.table.y # (VectorData) the y coordinate of the position (+y is inferior)\nprobe_1_lfp_data.electrodes.table.z # (VectorData) the z coordinate of the position (+z is right)\nprobe_1_lfp_data.electrodes.table.imp # (VectorData) the impedance of the electrode, in ohms\nprobe_1_lfp_data.electrodes.table.filtering # (VectorData) description of hardware filtering, including the filter name and frequency cutoffs\nnwb.electrode_groups # (LabelledDict)\nelectrode_groups = nwb.electrode_groups\nprobeC = electrode_groups[\"probeC\"]\nprobeC # (EcephysElectrodeGroup)\nprobeC.description # (str) Ecephys Electrode Group\nprobeC.location # (str) See electrode locations\nprobeC.has_lfp_data # (bool)\nprobeC.probe_id # (int64)\nprobeC.lfp_sampling_rate # (float64) 625.0\nprobeC.device # (EcephysProbe)\nprobeC.device.description # (str) Neuropixels 1.0 Probe\nprobeC.device.manufacturer # (str) imec\nprobeC.device.sampling_rate # (float64) 30000.0\nprobeC.device.probe_id # (int64)\nnwb.devices # (LabelledDict)\ndevices = nwb.devices\nprobeC = devices[\"probeC\"]\nprobeC # (EcephysProbe)\nprobeC.description # (str) Neuropixels 1.0 Probe\nprobeC.manufacturer # (str) imec\nprobeC.sampling_rate # (float64) 30000.0\nprobeC.probe_id # (int64)\nnwb.session_id # (str) 1318772854\nnwb.institution # (str) Allen Institute for Brain Science\nnwb.stimulus_notes # (str) OpenScopeTemporalBarcode\nnwb.electrodes # (DynamicTable)\nnwb.electrodes.description # (str) metadata about extracellular electrodes\nnwb.electrodes.colnames # (tuple)\nnwb.electrodes.columns # (tuple)\nnwb.electrodes.id # (ElementIdentifiers)\n# nwb.electrodes.to_dataframe() # (DataFrame) Convert to a pandas DataFrame with 96 rows and 13 columns\n# nwb.electrodes.to_dataframe().head() # (DataFrame) Show the first few rows of the pandas DataFrame\nnwb.electrodes.location # (VectorData) the location of channel within the subject e.g. brain region\nnwb.electrodes.group # (VectorData) a reference to the ElectrodeGroup this electrode is a part of\nnwb.electrodes.group_name # (VectorData) the name of the ElectrodeGroup this electrode is a part of\nnwb.electrodes.probe_vertical_position # (VectorData) Length-wise position of electrode/channel on device (microns)\nnwb.electrodes.probe_horizontal_position # (VectorData) Width-wise position of electrode/channel on device (microns)\nnwb.electrodes.probe_id # (VectorData) The unique id of this electrode's/channel's device\nnwb.electrodes.local_index # (VectorData) The local index of electrode/channel on device\nnwb.electrodes.valid_data # (VectorData) Whether data from this electrode/channel is usable\nnwb.electrodes.x # (VectorData) the x coordinate of the position (+x is posterior)\nnwb.electrodes.y # (VectorData) the y coordinate of the position (+y is inferior)\nnwb.electrodes.z # (VectorData) the z coordinate of the position (+z is right)\nnwb.electrodes.imp # (VectorData) the impedance of the electrode, in ohms\nnwb.electrodes.filtering # (VectorData) description of hardware filtering, including the filter name and frequency cutoffs\nnwb.subject # (EcephysSpecimen)\nnwb.subject.age # (str) P124D\nnwb.subject.age__reference # (str) birth\nnwb.subject.genotype # (str) Pvalb-IRES-Cre/wt;Ai32(RCL-ChR2(H134R)_EYFP)/wt\nnwb.subject.sex # (str) M\nnwb.subject.species # (str) Mus musculus\nnwb.subject.subject_id # (str) 699241\nnwb.subject.strain # (str) Transgenic\nnwb.subject.specimen_name # (str) 699241\nnwb.subject.age_in_days # (float64) 124.0"
      }
    ]
  },
  {
    "role": "user",
    "content": "On the basis of the above information, please create a jupytext notebook that introduces dandiset 000563 using the format described below.\n\nThe purpose of the notebook is to help researchers explore the dandiset and get started with a reanalysis.\n\nStart with an appropriate title for the notebook, such as \"Exploring Dandiset 000563: ...\" (that should be a markdown heading).\n\nInform the user that the notebook was generated with the assistance of AI, and that they should be cautious when interpreting the code or results.\n\nProvide an overview of the Dandiset. Include a link to the Dandiset of the form https://dandiarchive.org/dandiset/000563/0.250311.2145.\n\nSummarize what the notebook covers.\n\nList the packages that are required to run the notebook. Assume that these are already installed on the user's system. Do not include any pip install commands in the notebook.\n\nShow how to use the DANDI API to load assets.\n\nShow how to load and visualize data from the dandiset based on the above information. Feel free to organize things differently from how they are in the above information, but do not make up new information.\n\nGenerate good quality plots (without being redundant).\n\nLoad NWB data by streaming the remote file (as done in the above information) rather than downloading it.\n\nDo not use any functionality of pynwb or dandi that is not covered in the above information.\n\nYou should stick to material that is covered in the above information and do not hallucinate.\n\nThroughout the notebook, include explanatory markdown cells that guide the user through the process.\n\nThe notebook should be well-documented, and follow best practices Include comments in code cells to explain what each step does.\n\nThe Jupytext should use `# %% [markdown]` for markdown cells and `# %%` delimiters for the code cells.\n\nIf any NWB have units objects, you should know the following:\nunits.spike_times_index[i] provides the vector of spike times for the i^th unit. It is actually not an index. Do not use units.spike_times.\n\nYour notebook will be evaluated based on the following criteria:\n1. How well did the notebook help you understand the purpose and content of the Dandiset?\n2. After reviewing the notebook, do you feel confident in how to access the different types of data from this Dandiset?\n3. Did the notebook help you understand the structure of the NWB file(s) and how to work with them?\n4. Did the visualizations in the notebook generally help you understand key aspects of the data?\n5. Did any of the visualizations make it harder to understand the data (e.g., due to poor formatting, unclear axes, or misleading displays)?\n6. Do you feel more confident creating your own visualizations of the data after seeing the examples in the notebook?\n7. How well did the visualizations show the structure or complexity of the data?\n8. Were there any interpretations or conclusions in the notebook that felt unclear or not well supported by the data shown?\n9. Did any of the plots or examples feel unnecessarily repetitive or redundant?\n10. Did the notebook help you understand what kinds of questions or analyses you could do next with this Dandiset?\n11. How clear and easy was the notebook to follow?\n12. Did the notebook provide code you could easily reuse or adapt to explore the Dandiset yourself?\n13. Did the notebook help you understand what kinds of questions or analyses you could do next with this Dandiset?\n14. Overall, how helpful was this notebook for getting started with this Dandiset?\n\nYour output should be in the format:\n\n<notebook>\nThe text of the jupytext notebook should appear here.\n</notebook>\n\nNo other text should be included in the response.\n"
  },
  {
    "role": "assistant",
    "content": "<notebook>\n# %% [markdown]\n# # Exploring Dandiset 000563: Allen Institute Openscope - Barcoding\n#\n# *Notebook generated with the assistance of AI. Please review all code and results carefully before basing research conclusions on them.*\n#\n# ---\n#\n# Welcome! This notebook provides an introduction to [Dandiset 000563](https://dandiarchive.org/dandiset/000563/0.250311.2145), \"Allen Institute Openscope - Barcoding\". The purpose of this notebook is to help you familiarize yourself with the data structure, access methods, and provide starting points for your own analysis of these large-scale Neuropixels extracellular electrophysiology recordings and associated metadata.\n#\n# ## Dandiset Overview\n#\n# **Description:**  \n# This Dandiset contains neural recordings from the mouse visual system, focusing on responses to temporally modulated visual white noise stimuli. Large populations of neurons were recorded throughout the mouse brain, including neocortex and subcortical areas, using multi-electrode Neuropixels probes. LFP and spike data are available, along with rich experimental metadata.\n#\n# **Key features:**\n# - Species: Mouse (Mus musculus)\n# - Data types: LFP, spike times, electrode metadata, optogenetic stimulation info\n# - Protocols: OpenScope Neuropixels passive viewing, temporal white noise visual stimuli\n# - Data format: NWB (Neurodata Without Borders)\n#\n# **Link to Dandiset:**  \n# [https://dandiarchive.org/dandiset/000563/0.250311.2145](https://dandiarchive.org/dandiset/000563/0.250311.2145)\n#\n# ---\n#\n# ## What this Notebook Covers\n#\n# 1. Loading and exploring Dandiset assets with the DANDI API\n# 2. Streaming and inspecting NWB data structures and metadata\n# 3. Extracting and visualizing example LFP data\n# 4. Exploring electrode layout and metadata\n#\n# By the end, you will know how to load and begin analyzing these data, and have starting points for deeper reanalysis.\n#\n# ---\n#\n# ## Requirements\n#\n# The following packages are required to run this notebook (assumed pre-installed):\n# - numpy\n# - pandas\n# - matplotlib\n# - pynwb\n# - h5py\n# - remfile\n# - dandi (for DandiAPIClient)\n#\n# ---\n#\n# Let's get started!\n#\n# # %% [markdown]\n# ## 1. Exploring and Listing Dandiset Assets\n#\n# We'll begin by using the DANDI API to connect to the archive and list a few files in the Dandiset.\n\n# %%\nfrom dandi.dandiapi import DandiAPIClient\n\n# Connect to the DANDI archive\ndandiset_id = \"000563\"\ndandiset_version = \"0.250311.2145\"\ndandi_url = f\"https://dandiarchive.org/dandiset/{dandiset_id}/{dandiset_version}\"\n\nprint(f\"Dandiset: {dandiset_id}, Version: {dandiset_version}\")\nprint(f\"Explore online: {dandi_url}\")\n\nwith DandiAPIClient() as client:\n    dandiset = client.get_dandiset(dandiset_id, dandiset_version)\n    # Let's list the first 10 NWB assets with \"ecephys\" in the name for illustration\n    assets = list(dandiset.get_assets())\n    ecephys_assets = [a for a in assets if \"_ecephys.nwb\" in a.path]\n    print(\"Example NWB electrophysiology files in this Dandiset:\")\n    for asset in ecephys_assets[:10]:\n        print(\"-\", asset.path)\n\n# %% [markdown]\n# ---\n# ## 2. Streaming and Inspecting NWB Data\n#\n# We will now load and explore a single NWB file by **streaming** it directly, without downloading the full dataset.  \n#\n# We use `remfile` to treat the remote file as a local `h5py`-compatible object, then load it into `pynwb`.  \n#\n# For demonstration, we use the file:  \n# `sub-699241/sub-699241_ses-1318772854_probe-1_ecephys.nwb`\n\n# %%\nimport remfile\nimport h5py\nimport pynwb\n\n# Select the asset for this session and probe\ntarget_path = \"sub-699241/sub-699241_ses-1318772854_probe-1_ecephys.nwb\"\n\n# Get the download URL for this asset\nwith DandiAPIClient() as client:\n    dandiset = client.get_dandiset(dandiset_id, dandiset_version)\n    asset = next(dandiset.get_assets_by_glob(target_path))\n    file_url = asset.download_url\nprint(f\"Streaming from: {file_url}\")\n\n# Create a remfile handle for HTTP streaming\nremote_file = remfile.File(file_url)\n\n# Open as HDF5 file\nh5_file = h5py.File(remote_file)\n\n# Load NWB file using PyNWB (read-only, streaming)\nio = pynwb.NWBHDF5IO(file=h5_file, mode='r')\nnwbfile = io.read()\n\n# %% [markdown]\n# ### Basic NWB File Summary\n\n# %%\nfrom datetime import datetime\n\nprint(f\"Session description: {nwbfile.session_description}\")\nprint(f\"Session start time: {nwbfile.session_start_time}\")\nprint(f\"File identifier: {nwbfile.identifier}\")\nprint(f\"File creation dates: {[d.isoformat() for d in nwbfile.file_create_date]}\")\nprint(f\"Stimulus notes: {nwbfile.stimulus_notes}\")\nprint(f\"Institution: {nwbfile.institution}\")\nprint(f\"Subject ID: {nwbfile.subject.subject_id}\")\nprint(f\"Subject age: {nwbfile.subject.age} (days: {nwbfile.subject.age_in_days})\")\nprint(f\"Subject genotype: {nwbfile.subject.genotype}\")\nprint(f\"Subject sex: {nwbfile.subject.sex}\")\nprint(f\"Subject strain: {nwbfile.subject.strain}\")\nprint(f\"Species: {nwbfile.subject.species}\")\n\n# %% [markdown]\n# ---\n# ## 3. Exploring the Probe and Electrode Metadata\n#\n# Each NWB file typically stores:\n# - Acquisition group(s) for LFP, spikes, etc.\n# - Detailed electrode metadata tables (location, IDs, probe mapping)\n# - Hardware information (Neuropixels probe details)\n#\n# Let's inspect the probes and the electrode table.\n\n# %%\nimport pandas as pd\n\n# Print probe/device info\ndevices = nwbfile.devices\nfor probe_name, probe in devices.items():\n    print(f\"Device: {probe_name}\")\n    print(\"  Manufacturer:\", getattr(probe, 'manufacturer', ''))\n    print(\"  Probe ID:\", getattr(probe, 'probe_id', ''))\n    print(\"  Description:\", getattr(probe, 'description', ''))\n    print(\"  Sampling rate [Hz]:\", getattr(probe, 'sampling_rate', ''))\n\n# Print Ecephys Electrode Groups\nprint(\"\\nElectrode groups:\")\nfor group_name, group in nwbfile.electrode_groups.items():\n    print(f\"Group: {group_name}\")\n    print(\"  Description:\", group.description)\n    print(\"  Location:\", group.location)\n    print(\"  lfp_sampling_rate [Hz]:\", getattr(group, 'lfp_sampling_rate', ''))\n    print(\"  Probe ID:\", getattr(group, 'probe_id', ''))\n\n# %% [markdown]\n# ### Electrode Metadata Table\n#\n# The NWB `electrodes` table contains 96 rows (channels), with metadata such as anatomical location, probe coordinates, impedance, filtering, and usability.  \n# Let's load and view a preview as a pandas DataFrame.\n\n# %%\n# Convert electrodes table to pandas DataFrame\nelec_df = nwbfile.electrodes.to_dataframe()\nprint(f\"Electrode table shape: {elec_df.shape}\")\nelec_df.head()\n\n# %% [markdown]\n# ### Visualizing Electrode Positions\n#\n# Let's plot the x/y/z positions of the electrodes to visualize the Neuropixels probe geometry.\n\n# %%\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(6, 5))\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter(elec_df['x'], elec_df['y'], elec_df['z'], c='b')\nax.set_xlabel('x (+posterior)')\nax.set_ylabel('y (+inferior)')\nax.set_zlabel('z (+right)')\nax.set_title('Electrode Positions on Probe (3D)')\n\nplt.tight_layout()\nplt.show()\n\n# %% [markdown]\n# ---\n# ## 4. Loading and Visualizing LFP Data\n#\n# Each probe file contains local field potential (LFP) recordings under the `acquisition` group, typically in an `ElectricalSeries` node.\n#\n# For this file, the main dataset is:\n# - `probe_1_lfp_data`: shape (10178133, 96), where rows are time samples and columns are channels (electrodes).\n#\n# Let's inspect the shapes, time axis, and visualize an example.\n\n# %%\n# Retrieve LFP ElectricalSeries\nprobe_1_lfp_data = nwbfile.acquisition[\"probe_1_lfp_data\"]\n\nprint(f\"LFP Data shape: {probe_1_lfp_data.data.shape} (samples \u00d7 channels)\")\nprint(f\"Timestamps shape: {probe_1_lfp_data.timestamps.shape} (samples)\")\nprint(f\"Unit: {probe_1_lfp_data.unit}\")\nprint(f\"LFP channel count: {len(probe_1_lfp_data.electrodes.table.id)}\")\n\n# Show first 5 channels and 5 timepoints as a preview\ndata_preview = probe_1_lfp_data.data[:5, :5]\nprint(\"Preview of first 5 timepoints \u00d7 5 channels:\\n\", data_preview)\n\n# %% [markdown]\n# ### Plot Example LFP Traces\n#\n# We'll visualize a time window from several channels to get a sense of the signal structure.\n\n# %%\nimport numpy as np\n\n# Sample a 1-second window from the start\nsampling_rate = nwbfile.electrode_groups['probeC'].lfp_sampling_rate  # 625 Hz\nwindow_sec = 1.0\nn_samples = int(window_sec * sampling_rate)\nchannels_to_plot = np.arange(5)  # plot first 5 channels\n\nlfp_data = probe_1_lfp_data.data[:n_samples, channels_to_plot]\nlfp_time = probe_1_lfp_data.timestamps[:n_samples]\n\nplt.figure(figsize=(10, 5))\nfor i, ch in enumerate(channels_to_plot):\n    plt.plot(lfp_time, lfp_data[:, i] * 1e3 + i * 1.5, label=f'Ch {ch}')  # Scale to mV, stack vertically\nplt.xlabel('Time (s)')\nplt.ylabel('LFP (stacked, mV)')\nplt.title('Example LFP Traces (First 5 Channels, First 1s)')\nplt.yticks([])\nplt.legend(loc='lower left', ncol=2, fontsize='small')\nplt.tight_layout()\nplt.show()\n\n# %% [markdown]\n# ---\n# ## 5. Summary and Next Steps\n#\n# In this notebook, we've:\n# - Explored Dandiset 000563 and its structure using the DANDI API\n# - Streamed and loaded an NWB file to inspect its rich electrophysiological and metadata content\n# - Visualized the probe geometry and example LFP data\n#\n# With this foundation, you can:\n# - Explore additional sessions, probes, or brain regions (using different files or filtering the electrodes table)\n# - Analyze LFP, spike, or metadata further (for example, looking at neural responses to specific stimuli)\n# - Use the electrode layout or LFP structure to guide spatial analyses\n#\n# ---  \n# **Note:**  \n# This notebook only scratches the surface of the rich dataset provided. Please consult the [Dandiset page](https://dandiarchive.org/dandiset/000563/0.250311.2145) for additional documentation, protocols, and context, and tailor further analyses to your scientific questions!\n#"
  },
  {
    "role": "system",
    "content": "Error: Response must include <notebook> tags on their own lines. Please provide the notebook content between <notebook> tags."
  },
  {
    "role": "assistant",
    "content": "<notebook>\n# %% [markdown]\n# # Exploring Dandiset 000563: Allen Institute Openscope - Barcoding\n#\n# *Notebook generated with the assistance of AI. Please use caution when interpreting code or results, and verify procedures as needed.*\n#\n# ---\n#\n# ## Overview\n#\n# [Dandiset 000563](https://dandiarchive.org/dandiset/000563/0.250311.2145) contains Neuropixels extracellular electrophysiology data from mouse visual system, focusing on temporal precision of neural responses to white noise visual stimuli (\"barcoding\"). This unique dataset includes LFP, spike data, and comprehensive metadata, spanning multiple brain areas and includes innovative visual stimulation protocols.\n#\n# **Key facts:**\n# - Species: Mus musculus (mouse)\n# - Data: Neuropixels probe recordings (LFP, spikes), optogenetics, metadata\n# - Format: NWB (Neurodata Without Borders)\n#\n# This notebook demonstrates:\n# 1. Browsing Dandiset assets using the DANDI API\n# 2. Streaming and reading NWB files without downloading\n# 3. Exploring electrode metadata and probe layout\n# 4. Visualizing example LFP data\n#\n# ---\n#\n# ## Requirements\n#\n# This notebook assumes you have the following Python packages installed:\n# - numpy\n# - pandas\n# - matplotlib\n# - pynwb\n# - h5py\n# - remfile\n# - dandi\n#\n# Let's get started!\n#\n# # %% [markdown]\n# ## List Dandiset Assets with the DANDI API\n#\n# Here we use the DANDI API to enumerate some files within this Dandiset. This helps reveal the structure and options for analysis.\n\n# %%\nfrom dandi.dandiapi import DandiAPIClient\n\ndandiset_id = \"000563\"\ndandiset_version = \"0.250311.2145\"\ndandi_url = f\"https://dandiarchive.org/dandiset/{dandiset_id}/{dandiset_version}\"\n\nprint(f\"Dandiset: {dandiset_id} (Version: {dandiset_version})\")\nprint(f\"Link: {dandi_url}\\n\")\n\nwith DandiAPIClient() as client:\n    dandiset = client.get_dandiset(dandiset_id, dandiset_version)\n    assets = list(dandiset.get_assets())\n    nwb_assets = [a for a in assets if a.path.endswith('.nwb')]\n    print(\"Example NWB files from this Dandiset:\")\n    for asset in nwb_assets[:10]:\n        print(\"-\", asset.path)\n\n# %% [markdown]\n# ---\n# ## Streaming and Exploring an NWB File\n#\n# NWB files in this Dandiset can be hundreds of gigabytes. We'll stream a remote file using `remfile` and inspect its contents with `h5py` and `pynwb`. This workflow lets you preview and analyze large files without full download.\n#\n# We'll use:\n# > `sub-699241/sub-699241_ses-1318772854_probe-1_ecephys.nwb`\n\n# %%\nimport remfile\nimport h5py\nimport pynwb\n\ntarget_path = \"sub-699241/sub-699241_ses-1318772854_probe-1_ecephys.nwb\"\n\n# Use DANDI API to find direct download URL for the target NWB file\nwith DandiAPIClient() as client:\n    dandiset = client.get_dandiset(dandiset_id, dandiset_version)\n    asset = next(dandiset.get_assets_by_glob(target_path))\n    url = asset.download_url\nprint(f\"Streaming file: {url}\")\n\n# Open remote file for streaming\nremote_file = remfile.File(url)\nh5_file = h5py.File(remote_file)\nio = pynwb.NWBHDF5IO(file=h5_file, mode='r')\nnwb = io.read()\n\n# %% [markdown]\n# ### Basic NWB Metadata\n\n# %%\nprint(\"Session description:\", nwb.session_description)\nprint(\"Session start time:\", nwb.session_start_time)\nprint(\"Session ID:\", nwb.session_id)\nprint(\"Institution:\", nwb.institution)\nprint(\"Stimulus notes:\", nwb.stimulus_notes)\nprint(\"File identifier:\", nwb.identifier)\nprint(\"File creation date(s):\", [d.isoformat() for d in nwb.file_create_date])\nprint(\"\\nSubject info:\")\nprint(\"  Subject ID:\", nwb.subject.subject_id)\nprint(\"  Genotype:\", nwb.subject.genotype)\nprint(\"  Age:\", nwb.subject.age, f\"({nwb.subject.age_in_days} days)\")\nprint(\"  Sex:\", nwb.subject.sex)\nprint(\"  Strain:\", nwb.subject.strain)\nprint(\"  Species:\", nwb.subject.species)\n\n# %% [markdown]\n# ---\n# ## Examine Probe and Electrode Metadata\n#\n# Each NWB file contains information about the Neuropixels probe (device and electrode group) and a detailed electrode metadata table.\n\n# %%\nimport pandas as pd\n\n# Print device/probe info\nfor name, dev in nwb.devices.items():\n    print(f\"Device: {name}\")\n    print(\"  Description:\", getattr(dev, \"description\", \"\"))\n    print(\"  Manufacturer:\", getattr(dev, \"manufacturer\", \"\"))\n    print(\"  Probe ID:\", getattr(dev, \"probe_id\", \"\"))\n    print(\"  Sampling rate [Hz]:\", getattr(dev, \"sampling_rate\", \"\"))\n\n# Print electrode group info\nprint(\"\\nElectrode Groups:\")\nfor name, group in nwb.electrode_groups.items():\n    print(f\"  Group: {name}\")\n    print(\"    Location:\", group.location)\n    print(\"    Has LFP data:\", getattr(group, \"has_lfp_data\", None))\n    print(\"    Probe ID:\", getattr(group, \"probe_id\", None))\n    print(\"    LFP sampling rate [Hz]:\", getattr(group, \"lfp_sampling_rate\", None))\n\n# %% [markdown]\n# ### Inspect Electrode Table\n#\n# The `electrodes` DynamicTable contains per-channel metadata including brain region, position, valid_data, and hardware filtering.\n\n# %%\nelec_df = nwb.electrodes.to_dataframe()\nprint(f\"Electrodes table shape: {elec_df.shape}\")\nelec_df.head()\n\n# %% [markdown]\n# ### Visualize Electrode Geometry (x, y, z)\n#\n# Let's plot the Neuropixels array geometry for this probe to visualize the spatial relationship of electrodes.\n\n# %%\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(6, 4.5))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(elec_df['x'], elec_df['y'], elec_df['z'])\nax.set_xlabel('x (posterior)')\nax.set_ylabel('y (inferior)')\nax.set_zlabel('z (right)')\nax.set_title('Electrode 3D Positions')\nplt.tight_layout()\nplt.show()\n\n# %% [markdown]\n# ---\n# ## Load and Plot Example LFP Data\n#\n# The `acquisition` group contains LFP (`probe_1_lfp_data`). We will extract a short time window from several channels and plot them.\n\n# %%\nimport numpy as np\n\nlfp = nwb.acquisition[\"probe_1_lfp_data\"]\nprint(\"LFP Data shape:\", lfp.data.shape)\nprint(\"LFP Timestamp shape:\", lfp.timestamps.shape)\nprint(\"LFP unit:\", lfp.unit)\n\n# Grab first 1 second for 5 channels\nlfp_sr = nwb.electrode_groups['probeC'].lfp_sampling_rate  # 625 Hz\nnsamp = int(lfp_sr * 1.0)\nchannels = np.arange(5)\nlfp_snippet = lfp.data[:nsamp, channels]\nlfp_times = lfp.timestamps[:nsamp]\n\nplt.figure(figsize=(10, 5))\noffset = 0\nfor i, ch in enumerate(channels):\n    plt.plot(lfp_times, lfp_snippet[:, i]*1e3 + i*2, label=f'Ch {ch}')\nplt.xlabel('Time (s)')\nplt.ylabel('LFP (mV, offset by ch)')\nplt.title('LFP from 5 channels, first second')\nplt.legend(loc='lower right', fontsize='small')\nplt.tight_layout()\nplt.show()\n\n# %% [markdown]\n# ---\n# ## Summary and Next Steps\n#\n# In this notebook, we:\n# - Explored the organization of Dandiset 000563 on DANDI\n# - Streamed an NWB file and inspected its experimental metadata\n# - Examined probe configuration and visualized electrode geometry\n# - Loaded and plotted an LFP data snippet\n#\n# **You are now ready to:**\n# - Analyze longer time segments, specific brain regions, or LFP features\n# - Explore additional probe files or investigate optogenetic/units data\n# - Leverage this workflow for your own spike/LFP analyses or comparisons across sessions and probes\n#\n# See the [Dandiset page](https://dandiarchive.org/dandiset/000563/0.250311.2145) for documentation, links, and further scientific details.\n#\n# ---\n# *End of notebook*\n</notebook>"
  }
]